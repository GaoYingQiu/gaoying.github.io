<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>群通知里的人员名字点击剖析</title>
      <link href="/2021/07/02/nameClick/"/>
      <url>/2021/07/02/nameClick/</url>
      
        <content type="html"><![CDATA[<p>我们每个人的手机都安装有微信App,肯定大家都使用过以下场景在聊天群中，当有新的成员进入的时候，可以看到 某某邀请了某某1进入群聊，或者当你是群主的时候，某管理人员邀请了几个人进入时候看到 某某管理员邀请了张三、李四，王五，张三（同名）进入了群聊。对于邀请人员或者被邀请人员，我们发现人员的名称是可以点击的，即使同名的人，点击其名字也可以跳转到各自的主页详情中。</p><h3 id="如何存储人员的id？"><a href="#如何存储人员的id？" class="headerlink" title="如何存储人员的id？"></a>如何存储人员的id？</h3><p>一条群成员变更通知就是一串文本，我们点击的时候肯定要存储好他的人员id,然后点击的时候就能拿到对应人员的id。从最简单的存储方案来看，这条内容可以写成以下格式： 管理员<font color=blue>刘某某</font>邀请了<font color=blue>张三</font>、<font color=blue>李四</font>、<font color=blue>王五</font>、<font color=blue>张三</font>进入了群聊。换成代码的格式即为：“管理员\”刘某某::1000\”邀请了\”张三::1001、李四::1002、王五::1003、张三::1004\”进入了群聊”。其中的代码格式为userName::userId这样一种形式进行拼接，中间的符号可以采用其他特殊符号代替。这里为了区别用户特殊性输入用了双冒号。多个成员之间用顿号隔开，人员与普通内容之间用符号双引号\”进行分割（斜杆为转义符）。 我们需要对这一串文字表达式进行解析进行UI显示，把人员名字后的拼接符号用户id进行过滤掉,组合成不带用户id的易懂文字内容给到用户。</p><h3 id="解析带用户id的字符串规则，拼装成正常文本"><a href="#解析带用户id的字符串规则，拼装成正常文本" class="headerlink" title="解析带用户id的字符串规则，拼装成正常文本"></a>解析带用户id的字符串规则，拼装成正常文本</h3><p>判断待解析的目标内容是否包含我们定义的特殊连接符号与双引号，符合条件的情况下第一步以双引号将文本进行分割。分为以下步骤。</p><ol><li>双引号将文本进行分割成不同段的数组。</li><li>遍历数组，判断不同段中是否还有顿号，如果有则需要再根据顿号进行分割成最小粒化段（userName::userId），否则直接判断是否最小粒化段（判断是否包含特殊符::）,如果包含，则以特舒符再将文本分割、否则直接添加到可变字符串中进行拼接。这样我们就能够拿到userName 以及 userId. 另外准备一个数组，存储每一个被分割的最小粒化段 {userName::userId}。</li><li>记得把人员之间的顿号，以及普通文本与人员之间的双引号加回去。最终的到了正常显示的文本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">if([msgBody containsString:@&quot;\&quot;&quot;] &amp;&amp; [msgBody containsString:@&quot;::&quot;])&#123;</span><br><span class="line">  NSArray *descArr &#x3D; [msgBody componentsSeparatedByString:@&quot;\&quot;&quot;];</span><br><span class="line">  NSMutableString *afterFilterIdStr &#x3D;  [[NSMutableString alloc] init]; &#x2F;&#x2F;过滤出Id后要显示在界面的str</span><br><span class="line">  NSMutableArray *filterEmpDicArr &#x3D;  [[NSMutableArray alloc] init]; &#x2F;&#x2F;过滤出成员</span><br><span class="line"></span><br><span class="line">  NSInteger findIndex &#x3D; 0;</span><br><span class="line">  for (NSString *eachStr in descArr) &#123;</span><br><span class="line">      findIndex ++;</span><br><span class="line">      &#x2F;&#x2F;加入双引号</span><br><span class="line">      if(eachStr.length &gt; 0)&#123;</span><br><span class="line">          if([eachStr containsString:@&quot;、&quot;])&#123;</span><br><span class="line">              NSArray *namesArr &#x3D;  [eachStr componentsSeparatedByString:@&quot;、&quot;];</span><br><span class="line">              NSInteger otherFindIndex &#x3D; 0;</span><br><span class="line">              for(NSString *otherName in namesArr)&#123;</span><br><span class="line">                  otherFindIndex ++;</span><br><span class="line">                  if([otherName containsString:@&quot;::&quot;])&#123;</span><br><span class="line">                      &#x2F;&#x2F;需分割取得名字</span><br><span class="line">                      NSArray *itemStrArr &#x3D;  [otherName componentsSeparatedByString:@&quot;::&quot;];</span><br><span class="line">                      if(itemStrArr.count)&#123;</span><br><span class="line">                          NSString *empName &#x3D; itemStrArr.firstObject;</span><br><span class="line">                          NSString *empId &#x3D; itemStrArr.lastObject;</span><br><span class="line">                          [afterFilterIdStr appendString:empName];</span><br><span class="line">                          [filterEmpDicArr addObject:@&#123;@&quot;name&quot;:empName,@&quot;id&quot;:empId&#125;];</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  if(otherFindIndex &lt; namesArr.count)&#123;</span><br><span class="line">                      [afterFilterIdStr appendString:@&quot;、&quot;];</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              if([eachStr containsString:@&quot;::&quot;])&#123;</span><br><span class="line">                  &#x2F;&#x2F;需分割取得名字</span><br><span class="line">                      NSArray *itemStrArr &#x3D;  [eachStr componentsSeparatedByString:@&quot;::&quot;];</span><br><span class="line">                  if(itemStrArr.count)&#123;</span><br><span class="line">                      NSString *empName &#x3D; itemStrArr.firstObject;</span><br><span class="line">                      NSString *empId &#x3D; itemStrArr.lastObject;</span><br><span class="line">                      [afterFilterIdStr appendString:empName];</span><br><span class="line"></span><br><span class="line">                      NSString * oldContainsStr &#x3D; @&quot;将&quot;; &#x2F;&#x2F;兼容移除群聊的显示结果</span><br><span class="line">                      if([empId containsString:oldContainsStr])&#123;</span><br><span class="line">                          [afterFilterIdStr appendString:oldContainsStr];</span><br><span class="line">                          NSArray *oldArr &#x3D; [empId componentsSeparatedByString:oldContainsStr];</span><br><span class="line">                          empId &#x3D; oldArr.firstObject;</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                      [filterEmpDicArr addObject:@&#123;@&quot;name&quot;:empName,@&quot;id&quot;:empId&#125;];</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;else&#123;</span><br><span class="line">                  &#x2F;&#x2F;普通字符串</span><br><span class="line">                  [afterFilterIdStr appendString:eachStr];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(findIndex &lt; descArr.count)&#123;</span><br><span class="line">          [afterFilterIdStr appendString:@&quot;\&quot;&quot;];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  NSString *realMsgBody &#x3D; [afterFilterIdStr copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过以上代码，我们得到realMsgBody就是需要在文本上直接显示的内容，另外我们还得到了filterEmpDicArr包含了成员id的一个map。</li></ol><h3 id="渲染人员名字、增加样式蓝色，表示可以点击"><a href="#渲染人员名字、增加样式蓝色，表示可以点击" class="headerlink" title="渲染人员名字、增加样式蓝色，表示可以点击"></a>渲染人员名字、增加样式蓝色，表示可以点击</h3><p>由上一步，我们得到可正常显示在UI上的文字，另外还得到一个人名id的字典数组。渲染显示我们采用YYLabel设置Attribute的方式。先设置全内容属性mAttributedString。然后循环遍历filterEmpDicArr,根据人名创建名字高亮的lightAttribute。根据人名得到nameRange, 最后再采用替换方式将对应range进行替换掉属性。代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mAttributedString replaceCharactersInRange:nameRange withAttributedString:lightNameAttributeStr];</span><br></pre></td></tr></table></figure><br>这里有一个问题，当匹配到第四个人时候，取到的nameRange是第一个人张三，结果并不对。来看看我们取nameRange的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSRange range &#x3D; [realMsgBody rangeOfString:empName]; &#x2F;&#x2F;可能存在多个</span><br></pre></td></tr></table></figure></p><p>这个时候就需要判断名字是否在文本中多次出现。当同名时候，我们需要把匹配到该人名的range全部找出来，而不是一个range。 当遍历当前的name时候，检查该人名出现的次数，出现第几次则这个当前遍历的人名的range则是对应第几个range. 这个逻辑才是正确的！这个时候，我们可以把当前遍历的userId对应的正确的range记录下来存到一个map中。最后当用户点击蓝色某名字时候label点击处所对应的range会返回，这个时候我们就可以根据range来命中userId了。当点击同名的时候不知道点击的是谁的问题就可以迎刃而解！此处应该有点赞，哈。过奖了，只是一个技巧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">NSString *realMsgBody &#x3D; [afterFilterIdStr copy];</span><br><span class="line">NSMutableAttributedString *mAttributedString &#x3D; [[NSMutableAttributedString alloc] initWithString:realMsgBody];</span><br><span class="line">mAttributedString.yy_font &#x3D; labelFont;</span><br><span class="line">mAttributedString.yy_color &#x3D; message_centerTextColor;</span><br><span class="line">mAttributedString.yy_alignment &#x3D; NSTextAlignmentCenter;</span><br><span class="line">NSMutableDictionary *recordNameCountDic &#x3D;  [[NSMutableDictionary alloc] init]; &#x2F;&#x2F;缓存每个名字记录的次数</span><br><span class="line">NSMutableDictionary *recordRangeEmpIdDic &#x3D;  [[NSMutableDictionary alloc] init]; &#x2F;&#x2F;记录每个名字的range对应的id</span><br><span class="line">&#x2F;&#x2F;循环找出名字，并且替换attribute;</span><br><span class="line">for (NSDictionary *empDic in filterEmpDicArr) &#123;</span><br><span class="line">    NSString *empName &#x3D; empDic[@&quot;name&quot;];</span><br><span class="line">    NSString *empId &#x3D; empDic[@&quot;id&quot;];</span><br><span class="line">   NSMutableAttributedString *lightNameAttributeStr &#x3D; [[NSMutableAttributedString alloc] initWithString:empName];</span><br><span class="line">   lightNameAttributeStr.yy_font &#x3D; labelFont;</span><br><span class="line">   lightNameAttributeStr.yy_underlineStyle &#x3D; NSUnderlineStyleNone; &#x2F;&#x2F;NSUnderlineStyleSingle;</span><br><span class="line">   lightNameAttributeStr.yy_color &#x3D; message_centerTextColor;</span><br><span class="line">    lightNameAttributeStr.yy_lineSpacing &#x3D; 2;</span><br><span class="line"></span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">   [lightNameAttributeStr yy_setTextHighlightRange:lightNameAttributeStr.yy_rangeOfAll</span><br><span class="line">                           color:[UIColor colorWithRed:110&#x2F;255.0f green:121&#x2F;255.0f blue:151&#x2F;255.0f alpha:1]</span><br><span class="line">                 backgroundColor:[UIColor colorWithWhite:0.000 alpha:0.0]</span><br><span class="line">                       tapAction:^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect)&#123;</span><br><span class="line">       &#x2F;&#x2F;点击名字跳转</span><br><span class="line">       &#x2F;&#x2F; NSString *empName &#x3D; [text.string substringWithRange:range];</span><br><span class="line">        NSString *empId &#x3D; [recordRangeEmpIdDic objectForKey:[NSValue valueWithRange:range]];</span><br><span class="line">       if(empId &amp;&amp; weakSelf.tappedNameBlock)&#123;</span><br><span class="line">           weakSelf.tappedNameBlock(empId);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">    NSRange range &#x3D; [realMsgBody rangeOfString:empName]; &#x2F;&#x2F;可能存在多个</span><br><span class="line">    &#x2F;&#x2F;同名可匹配出多个range</span><br><span class="line">    NSArray *rangeArr &#x3D; [self rangeOfSubString:empName inString:realMsgBody];</span><br><span class="line">    if(rangeArr.count &amp;&amp; rangeArr.count &gt; 1)&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;有多个重名，拿字典记录的值&#123;name:count&#125; 名字次数. count有存切大于1时，本次的range为 rangeArr【count】</span><br><span class="line">        if([recordNameCountDic objectForKey:empName])&#123;</span><br><span class="line">            NSInteger nameCount &#x3D; [[recordNameCountDic objectForKey:empName] integerValue];</span><br><span class="line">            nameCount++;  &#x2F;&#x2F;rangeArr[name]记录的count累加</span><br><span class="line">            [recordNameCountDic setObject:@(nameCount) forKey:empName];</span><br><span class="line">            NSValue * value &#x3D; rangeArr[nameCount-1];</span><br><span class="line">            range &#x3D;  [value rangeValue];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            [recordNameCountDic setObject:@1 forKey:empName];</span><br><span class="line">            NSValue * value &#x3D; rangeArr.firstObject;</span><br><span class="line">            range &#x3D;  [value rangeValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据range来记录id</span><br><span class="line">    NSValue *rangeKey &#x3D; [NSValue valueWithRange:range];</span><br><span class="line">    [recordRangeEmpIdDic setObject:empId forKey:rangeKey];</span><br><span class="line"></span><br><span class="line">   [mAttributedString replaceCharactersInRange:range withAttributedString:lightNameAttributeStr];</span><br><span class="line">&#125;</span><br><span class="line">mAttributedString.yy_lineSpacing &#x3D; 2;</span><br><span class="line">self.groupInfolabel.attributedText &#x3D; mAttributedString;</span><br></pre></td></tr></table></figure><p>以下是匹配一个字符串里包含字段某字符串的所有range<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray*)rangeOfSubString:(NSString*)subStr inString:(NSString*)string &#123;</span><br><span class="line">    NSMutableArray *rangeArray &#x3D; [NSMutableArray array];</span><br><span class="line">    NSString*string1 &#x3D; [string stringByAppendingString:subStr];</span><br><span class="line">    NSString *temp;</span><br><span class="line">    for(int i &#x3D;0; i &lt; string.length; i ++) &#123;</span><br><span class="line">        temp &#x3D; [string1 substringWithRange:NSMakeRange(i, subStr.length)];</span><br><span class="line">        if ([temp isEqualToString:subStr]) &#123;</span><br><span class="line">            NSRange range &#x3D; &#123;i,subStr.length&#125;;</span><br><span class="line">            [rangeArray addObject: [NSValue valueWithRange:range]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return rangeArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="正则过滤处理"><a href="#正则过滤处理" class="headerlink" title="正则过滤处理"></a>正则过滤处理</h3><p>将符合改正则表达式的字符串找出来，NSRegularExpression可以拿到NSTextCheckingResult,然后result可以拿到range.把对应的字符串截取出来。最后再循环遍替换成空字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> if([msgBody containsString:@&quot;::&quot;])&#123;</span><br><span class="line">   &#x2F;&#x2F;匹配替换掉::工号显示。</span><br><span class="line">    NSMutableArray *replaceFormatStrArr &#x3D; [[NSMutableArray alloc] init];</span><br><span class="line">    NSError *error &#x3D; nil;</span><br><span class="line">    NSRegularExpression *regexp &#x3D; [NSRegularExpression regularExpressionWithPattern:@&quot;::\\d&#123;1,&#125;&quot; options:NSRegularExpressionCaseInsensitive error:&amp;error];</span><br><span class="line">    [regexp enumerateMatchesInString:msgBody options:0 range:NSMakeRange(0, msgBody.length) usingBlock:^(NSTextCheckingResult *result, __unused NSMatchingFlags flags, __unused BOOL *stop) &#123;</span><br><span class="line">        if (flags !&#x3D; NSMatchingInternalError) &#123;</span><br><span class="line">            NSRange firstHalfRange &#x3D; [result rangeAtIndex:0];</span><br><span class="line">            if (firstHalfRange.length &gt; 0) &#123;</span><br><span class="line">                NSString *resultString1 &#x3D; [msgBody substringWithRange:result.range];</span><br><span class="line">                [replaceFormatStrArr addObject:resultString1];</span><br><span class="line">                NSLog(@&quot;result1 &#x3D; %@&quot;,resultString1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">    for(NSString *formatStr in replaceFormatStrArr)&#123;</span><br><span class="line">         msgBody &#x3D; [msgBody stringByReplacingOccurrencesOfString:formatStr  withString:@&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>群插件如何开发？</title>
      <link href="/2021/07/01/groupPlugin/"/>
      <url>/2021/07/01/groupPlugin/</url>
      
        <content type="html"><![CDATA[<h4 id="群插件的基础属性"><a href="#群插件的基础属性" class="headerlink" title="群插件的基础属性"></a>群插件的基础属性</h4><p>群插件一般是用H5配置的网页小插件，然后和群构造一个入口。本地通过sqlite维护一个插件表，以及群插件关系表。插件信息升级一下可分为平台系统必须插件以及业务自定义插件。具体可由业务决定。<br>插件有其基本属性：名称，插件id，类型，默认排序值，跳转内容(本地模块名/h5链接地址)，跳转类型：h5/本地模块 等等。<br>插件关系表： 群id，插件id，角标数量，排序值，是否显示，等等。<br><a id="more"></a></p><h4 id="群插件的本地存储以及业务逻辑"><a href="#群插件的本地存储以及业务逻辑" class="headerlink" title="群插件的本地存储以及业务逻辑"></a>群插件的本地存储以及业务逻辑</h4><p>由于每个IM用户本地都有一个相关的userId唯一数据库，插件基础信息存储在一张表，信息更新频率较低。插件关系一张表，和群id关联性较高，即一个群可以有多个插件。<br>当用户登录后，在适当的时机请求Java接口进行同步插件信息。（客户端可以根据时间戳定义一个时间段，这样就不用每次登录同步插件信息了）由业务决定多久时间段同步最新的插件信息到本地。如果后端后台配置了最新插件，客户单需要及时显示的话就需要服务端进行实时下发IM通知，表示有插件更新或新增。群插件当且仅当和群挂钩时候才会实时下发。当客户端收到群插件变更指令的时候，首先判断群插件变更类型如果是插件信息变更，则根据id请求最新的某插件信息 replace into（更新或新增） 插件信息的记录。如果是其他变更类型： 首先检查插件表是否有该插件记录，如果有，则存储到插件关系表，完成后则通知界面去读取群最新的插件信息。如果没有，则先请求网络插件信息，再replace into 到插件表。然后再处理插件关系表，最后通知到界面刷新。 群插件的变更类型一般可分为以下几种：绑定，解绑，角标数量，群插件排序，显示/隐藏等等。具体根据业务情况，这里只是简单列举。</p><h4 id="界面刷新"><a href="#界面刷新" class="headerlink" title="界面刷新"></a>界面刷新</h4><p>当IM收到群插件自定义通知时，进行条件处理对应的业务。当完成群插件关系表的变更时，发送通知到控制器，控制器收到通知后，判断仅当当前会id与要接收通知的群id相等的时候，才进行调用dao查询群插件列表方法返回相关的插件关系集合。插件关系Model包含插件信息Model，然后界面就能完整显示了。</p><h4 id="同步时机？"><a href="#同步时机？" class="headerlink" title="同步时机？"></a>同步时机？</h4><ol><li>当用户登录后，首次点开某群时候，会自动调用同步群信息基础接口，里面包含插件集合。集合里分别为已关联的某插件id在当前群的最终状态。根据existGroupFlag为true表示与该群关联着，如果为false 则需要调用解绑删除群插件关系。</li><li>当用户首次安装或卸载重装时候，进入消息首页会进行多群同步，在群信息同步时返回的基础信息也会包含此群插件集合基信息。</li></ol><h4 id="代码建议"><a href="#代码建议" class="headerlink" title="代码建议"></a>代码建议</h4><p>插件Dao提供查询，修改，删除等基本方法。插件Manager专门处理业务，调用Dao相关方法结合完成业务需求。避免block回调地狱,防止多层嵌套。内存排序和sql排序相结合，结构体和对象Model相映射，解包时候留意结构体字段类型，解码时候对应相关网络字节序，留意新增与replace into 的区别，界面刷新严格条件过滤防止造成不必要的刷新。插件基本信息同步频率看业务，关系绑定要实时，测试要充分留意卸载重装后的插件信息同步问题。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊天输入框@某人</title>
      <link href="/2021/07/01/input@/"/>
      <url>/2021/07/01/input@/</url>
      
        <content type="html"><![CDATA[<h3 id="聊天输入框-某人逻辑分类点说明"><a href="#聊天输入框-某人逻辑分类点说明" class="headerlink" title="聊天输入框@某人逻辑分类点说明"></a>聊天输入框@某人逻辑分类点说明</h3><p>IM 应用软件无论是App端或者是PC端都有@某人这样一个功能点，由于用户输入框输入条件的复杂随机性种类多，@的针对不同情况进行拼接或者新增样式显示蓝色字体表示该人名可链接。由输入框开始，用户输入@的方式进行分类：</p><ol><li>首字母为空，用户直接输入@，然后跳转到成员页面进行选择相关人员，选完即带回人名 结果为：“@某人”</li><li>input输入框输入了文字的基础上: 在最前面下班为0的第1个位置进行插入@  结果为：“@某人原input输入框的文字”</li><li>input输入框输入了文字的基础上，在最后面下班为length-1的第后一个位置进行插入@   结果为：“原input输入框的文字@某人”</li><li>input输入框输入了文字的基础上，在文字内容中输入@。即条件 0 &lt; index &lt; length-1 结果为：“原input输入@某人框的文字”</li></ol><p>在以上四种输入情况中，3，4 输入拼接@某人的时候，需要判断前一个字是否为@, 如果是,则后面拼接的时候直接+某人即可。另外当在第4种情况文字中间输入的时候，中英文下输入可能遇到文本框的值为 “ @@文字”，按照之前的逻辑当光标输入在第2个@后时，然后键盘输入@跳转页面选择成员，最后的结果应该是“ @@某人文字”这个组合，为了更友好地显示，还需检查当前两个也是@的时候，即出现1个@. 即结果为“ @某人文字” 以便更友好地显示。</p><p>核心逻辑：根据文本框原输入文字是否有内容，无内容时候直接拼接。有内容时候分两种情况，即光标的输入位置情况：当location等于0的时候，即在首位置输入@某人拼接原文本内容。当location大于0的时候，即光标可能出现在内容文字之间，也可能是在最后面。也是分两种情况：根据location+1判断是否小于原文本框文字长度length.如果小于，则表示在内容之间插入。否则,在内容最后尾部插入。无论是之间还是尾部做插入，都需检查前一个字符是否为@,如果是，则在做拼接人名时候就无需再追加@。当在之间做插入的时候，为了友好显示，可适当判断前两个字符为@@时候进行替换为一个@。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">NSString *newNameStr &#x3D; nil;</span><br><span class="line">    if(originStr.length &gt; 1)&#123;</span><br><span class="line">        NSMutableString *mStr &#x3D; [[NSMutableString alloc] init];</span><br><span class="line">        if(_range.location &gt; 0)&#123;</span><br><span class="line">            &#x2F;&#x2F;在中间或者在末尾插入@,取出之前的，再取出之后的。</span><br><span class="line">            NSString *beforeStr &#x3D; [originStr substringWithRange:NSMakeRange(0, _range.location)];</span><br><span class="line">            [mStr appendString:beforeStr];</span><br><span class="line">            BOOL bCenterInsertFlag &#x3D; NO;</span><br><span class="line">            BOOL bNeedInsertAtFlag &#x3D; YES;</span><br><span class="line">            if(_range.location + 1 &lt; originStr.length)&#123;</span><br><span class="line">                bCenterInsertFlag &#x3D; YES;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;中间插入.判断前一个是否@</span><br><span class="line">                NSString *lastChar &#x3D; [beforeStr substringFromIndex:beforeStr.length-1];</span><br><span class="line">                if([lastChar isEqualToString:@&quot;@&quot;])&#123;</span><br><span class="line">                    bNeedInsertAtFlag &#x3D; NO;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(beforeStr.length &gt; 2 &amp;&amp; beforeStr.length-2 &gt; 0)&#123;</span><br><span class="line">                    NSString *lastTwoChar &#x3D; [beforeStr substringFromIndex:beforeStr.length-2];</span><br><span class="line">                    if([lastTwoChar isEqualToString:@&quot;@@&quot;])&#123;</span><br><span class="line">                        [mStr replaceOccurrencesOfString:@&quot;@@&quot; withString:@&quot;@&quot; options:nil range:NSMakeRange(0, mStr.length)];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                &#x2F;&#x2F;末尾插入.判断前一个是否@</span><br><span class="line">                NSString *lastChar &#x3D; [beforeStr substringFromIndex:beforeStr.length-1];</span><br><span class="line">                if([lastChar isEqualToString:@&quot;@&quot;])&#123;</span><br><span class="line">                    bNeedInsertAtFlag &#x3D; NO;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(bNeedInsertAtFlag)&#123;</span><br><span class="line">                [mStr appendString:@&quot;@&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">            [mStr appendString:nameStr];</span><br><span class="line">            if(bCenterInsertFlag)&#123; &#x2F;&#x2F;如果在文字中间插入,拿到@之后的字符串</span><br><span class="line">                NSString *afterStr &#x3D; [originStr substringFromIndex:_range.location+1];</span><br><span class="line">                [mStr appendString:afterStr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F;首字母为@符号，截取之后的.</span><br><span class="line">            [mStr appendString:@&quot;@&quot;];</span><br><span class="line">            [mStr appendString:nameStr];</span><br><span class="line">            NSString *afterStr &#x3D; [originStr substringFromIndex:1];</span><br><span class="line">            [mStr appendString:afterStr];</span><br><span class="line">        &#125;</span><br><span class="line">        newNameStr &#x3D; mStr;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        newNameStr &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;,mutableStr,nameStr];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>奇怪的侧边栏问题</title>
      <link href="/2021/07/01/LeftSlide/"/>
      <url>/2021/07/01/LeftSlide/</url>
      
        <content type="html"><![CDATA[<p>开发中由于系统版本以及sdk，第三方库等原因，都会影响成出现一些奇怪的问题。当时是引用YYTextview控件解决消息cell长文本的光标选择范围内容复制的小功能。由于YYTextview光标弹出层自定义在另外一个新的Windown上，然后左侧侧滑出的view是新增在另一个新的Windown中。当侧边栏dismiss的时候，可能由于windown层级的影响，当在聊天输入框再次输入文字长按时候，系统出现的UIMenu层的Button不见了。当时想从根本问题去排查为啥系统的UIMenu当长按的时候操作功能的button为啥不见去解决，花费了将近2个多小时通过Xcode调试查看层级，阅读YYTextview的光标自定义层的实现以及添加到windown的层级，查看左侧侧边栏添加动画实现方式等都未解决。然后想到如果不通过新创建window来添加view 实现动画，而是通过present一个控制器实现侧边栏动画。最终问题得到了解决。</p><h4 id="旧Slide侧滑方案"><a href="#旧Slide侧滑方案" class="headerlink" title="旧Slide侧滑方案"></a>旧Slide侧滑方案</h4><p>旧有的侧滑方案是创建一个新window,然后设置其windowLevel 为正常的+1，这样就在最顶层了，然后设置其rootViewController为侧滑的控制器。很有可能是新创建的window与YYtextView的光标选择层创建的window有冲突，然后造成UIMenu按钮消失了。</p><h4 id="改进方案，Present一个控制器-SlideVC"><a href="#改进方案，Present一个控制器-SlideVC" class="headerlink" title="改进方案，Present一个控制器 SlideVC"></a>改进方案，Present一个控制器 SlideVC</h4><p>实则我们可以通过拿到最顶层控制器topVC，用导航控制器把SlideVC包裹好，设置它的 modalPresentationStyle 模式为UIModalPresentationOverCurrentContext，然后present出来 .这里要注意的是，系统的present方法是否有被runtime method swizled进行方法替换来公共统一处理modelPresentStyle问题，因为有些App交互不想使用系统的抽屉式present效果, 如果有需要做相关的过滤业务控制器逻辑判断。 侧边动画的实现：在SlideVC中定义一个半透明层背景bgView，添加tap手势，点击即关闭。往bgView添加一个左侧内容视图leftView 75%宽,右侧rightView。self.view添加一个Pan手势，用来计算leftView拖拽时候X的值位移变化。将内容控制器交由SlideVC管理：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[self addChildViewController:self.leftVC];</span><br><span class="line">[self.leftVC didMoveToParentViewController:self];</span><br></pre></td></tr></table></figure><br>当slideVC控制器ViewDidApper显示的时候，我们即做动画（可以加一个开关状态判断其是否打开）。根据侧滑手指移动距离是否使内容View到屏幕的一半，否则复位。然后可以适当做一点弹性动画。通过UIview的animateWithDuration: usingSpringWithDamping:方法进行设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)showAnimation &#123;</span><br><span class="line">    self.view.userInteractionEnabled &#x3D; NO;</span><br><span class="line">    self.menuOpenFlag &#x3D; YES;</span><br><span class="line">    if(!self.hasMoreThenHalf)&#123;</span><br><span class="line">        CGAffineTransform translate &#x3D; CGAffineTransformMakeTranslation(-300, 0);</span><br><span class="line">        CGAffineTransform scale &#x3D; CGAffineTransformMakeScale(3.0, 1.0);</span><br><span class="line">        self.modalView.transform &#x3D; CGAffineTransformConcat(translate, scale);</span><br><span class="line">    &#125;</span><br><span class="line">    CGFloat time &#x3D; fabs(self.modalView.frame.origin.x &#x2F; self.modalView.frame.size.width) * animationTime;</span><br><span class="line"></span><br><span class="line">    [UIView animateWithDuration:time delay:0.0 usingSpringWithDamping:0.85 initialSpringVelocity:0.7 options:UIViewAnimationOptionCurveLinear animations:^&#123;</span><br><span class="line">        if(self.hasMoreThenHalf)&#123;</span><br><span class="line">            self.modalView.frame &#x3D;  CGRectMake(0, 0, MenuWidth, [UIScreen mainScreen].bounds.size.height);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">           self.modalView.transform &#x3D; CGAffineTransformIdentity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        self.view.userInteractionEnabled &#x3D; YES;</span><br><span class="line">        self.menuOpenFlag &#x3D; YES;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当关闭的时候：进行视图的复位动画，然后dismiss控制器。这个是主动关闭。另外需要预留好被动其他业务情况下需要关闭侧边栏的情况，注册好相关的通知，当收到通知时，就自动关闭了侧边栏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)closeAnimation &#123;</span><br><span class="line">    self.view.userInteractionEnabled &#x3D; NO;</span><br><span class="line">    self.hasMoreThenHalf &#x3D; NO;</span><br><span class="line">    &#x2F;&#x2F; 根据当前x，计算隐藏时间</span><br><span class="line">    CGFloat time &#x3D; (1 - fabs(self.modalView.frame.origin.x &#x2F; self.modalView.frame.size.width)) * animationTime;</span><br><span class="line">    [UIView animateWithDuration:time animations:^&#123;</span><br><span class="line">        self.modalView.frame &#x3D; CGRectMake(-self.modalView.frame.size.width, 0, self.modalView.frame.size.width, [UIScreen mainScreen].bounds.size.height);</span><br><span class="line">        self.bgView.alpha &#x3D; 0.0;</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        self.menuOpenFlag &#x3D; NO;</span><br><span class="line">        [self dismissViewControllerAnimated:false completion:nil];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Pan手势的事件控制LeftView X坐标位移<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">- (void)moveViewWithGesture:(UIPanGestureRecognizer *)panGes &#123;</span><br><span class="line">    &#x2F;&#x2F; 开始位置</span><br><span class="line">    static CGFloat startX;</span><br><span class="line">    &#x2F;&#x2F; 结束位置</span><br><span class="line">    static CGFloat lastX;</span><br><span class="line">    &#x2F;&#x2F; 改变多少</span><br><span class="line">    static CGFloat durationX;</span><br><span class="line"></span><br><span class="line">    CGPoint touchPoint &#x3D; [panGes locationInView:self.view];</span><br><span class="line">    &#x2F;&#x2F; 手势开始</span><br><span class="line">    if (panGes.state &#x3D;&#x3D; UIGestureRecognizerStateBegan) &#123;</span><br><span class="line">        startX &#x3D; touchPoint.x;</span><br><span class="line">        lastX &#x3D; touchPoint.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (panGes.state &#x3D;&#x3D; UIGestureRecognizerStateChanged) &#123;</span><br><span class="line">        CGFloat currentX &#x3D; touchPoint.x;</span><br><span class="line">        durationX &#x3D; currentX - lastX;</span><br><span class="line">        lastX &#x3D; currentX;</span><br><span class="line">        self.hasMoreThenHalf &#x3D; NO;</span><br><span class="line">        CGFloat leftVC_X &#x3D; durationX + self.modalView.x;</span><br><span class="line">        if (leftVC_X &lt;&#x3D; -self.modalView.width) &#123;</span><br><span class="line">            leftVC_X &#x3D; - self.modalView.width;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果是向右滑动</span><br><span class="line">        if (leftVC_X &gt; 0) &#123;</span><br><span class="line">            leftVC_X &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.bgView.alpha &#x3D; (1 + leftVC_X &#x2F; self.modalView.frame.size.width) * 0.5;</span><br><span class="line"></span><br><span class="line">        [self.modalView setFrame:CGRectMake(leftVC_X, 0, _modalView.frame.size.width, _modalView.frame.size.height)];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (panGes.state &#x3D;&#x3D; UIGestureRecognizerStateEnded) &#123;</span><br><span class="line">        &#x2F;&#x2F; 超过一半屏幕</span><br><span class="line">        if (_modalView.x &gt; - _modalView.frame.size.width + [UIScreen mainScreen].bounds.size.width &#x2F; 2) &#123;</span><br><span class="line">            self.hasMoreThenHalf &#x3D; YES;</span><br><span class="line">            [self showAnimation];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            [self closeAnimation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="H5页面奇怪的UIDocumentMenuViewController"><a href="#H5页面奇怪的UIDocumentMenuViewController" class="headerlink" title="H5页面奇怪的UIDocumentMenuViewController"></a>H5页面奇怪的UIDocumentMenuViewController</h4><p>在边栏控制器点击菜单进入进入意见反馈模块，通过input标签打开原生图片选择器出现闪退。此时系统的present会经过两层。第一层是UIDocumentMenuViewController,第二层才到系统选择相册那个控制器。所以我们可以在我们的导航控制器中重写dismiss方法，根据presentedViewController是否为UIDocumentMenuViewController做一个标记documentFlag, 需要手动控制当第二次系统调用dismiss时候就无需回调父类的dismiss方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(void) dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion&#123;</span><br><span class="line">    if(self.presentedViewController !&#x3D; nil &amp;&amp; [self.presentedViewController isKindOfClass:[NSClassFromString(@&quot;UIDocumentMenuViewController&quot;) class]])&#123;</span><br><span class="line">        self.documentFlag &#x3D; YES;</span><br><span class="line">        [super dismissViewControllerAnimated:flag completion:completion];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F;第二次dismiss阻止掉。</span><br><span class="line">        if(!self.documentFlag)&#123;</span><br><span class="line">            [super dismissViewControllerAnimated:flag completion:completion];</span><br><span class="line">        &#125;</span><br><span class="line">        self.documentFlag &#x3D; NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color=green>总结：问题本身不可怕，可怕的是不愿意尝试从影响该问题点去绕开该点所导致的问题。这本身也是一种解决问题的捷径方案。当产生新的问题点时候，我们只需耐心调试，步步细心，发现造成问题点的直接原因。</font>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年下半年iOS工作技术点</title>
      <link href="/2021/06/29/2020iOS/"/>
      <url>/2021/06/29/2020iOS/</url>
      
        <content type="html"><![CDATA[<h3 id="2020-年下半年iOS工作技术点-tips"><a href="#2020-年下半年iOS工作技术点-tips" class="headerlink" title="2020 年下半年iOS工作技术点 tips"></a>2020 年下半年iOS工作技术点 tips</h3><p>背景：疫情原因导致之前云喵工作不能够继续，2020年6月还是面试找了一份相对稳定的工作，去了南航的一家外包供应商。</p><p>E App 是一个企业内部OA即时通讯App. 驻场南航后主要是针对此项目进行功能迭代敏捷开发。主要说一下几个技术任务点：</p><ol><li>首要任务就是将旧有MRC内存运行环境改成ARC运行环境。<br> 任务到不是复杂，主要修改点是多，体力劳动。将ARC相关的修饰关键词，控制器的dealloc 方法以及设置的代理delegate, 配置文件-fno-objc 相关配置干掉。<br>遇到的问题？<br> 期间由于之前是MRC手动内存回收机制，由于开发人员代码某些变量没有回收或者泄露贮存在内存中，当改成ARC之后会自动释放导致再次使用该变量的时候出现nil值崩溃或者业务的中断开！<br>C++代码块Client类某方法的变量被释放造成崩溃？<br> 当时问题点抛向如何停止某线程的解决方案上去了，而不是终止某条件然后让线程自然停止。当程序进入后台applicationWillTerminate的时候，手动退出IM.然后进入销毁连接阶段。为了使alive_thread , recv_thread 两线程退出,在CLIENT_Disconnect 销毁阶段，通过改变alivethread的条件让while条件中止，线程必然退出。</li><li>h5网页打卡有时候定位不到或者崩溃。因App程序使用了百度地图sdk,所以直接升级百度地图sdk即可。sdk编译分xcode11.3 或 xcode 12 。具体看E项目如果采取xcode11.3 编译打包上线，那么需要找到适应的.a包或者framework 进行编译。</li><li><p>将ASI网络文件下载改成AFNetwroking网络文件下载，将长进度条改成扇形进度条。<br>ASI那套网络请求比较老旧，当时还是用NSURLConnnection来进行网络请求，而且需要单独维护一个网络线程长期贮存到内存中。AFN 采取NSURLSession来进行网络请求，线程即用即回收。<br>AFN请求时设置支持SSL安全策略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AFSecurityPolicy *securityPolicy &#x3D; [[AFSecurityPolicy alloc] init];</span><br><span class="line">securityPolicy &#x3D; [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];</span><br><span class="line">securityPolicy.allowInvalidCertificates &#x3D; YES;</span><br><span class="line">securityPolicy.validatesDomainName &#x3D; NO;</span><br><span class="line">[_manager setSecurityPolicy:securityPolicy];</span><br></pre></td></tr></table></figure><p>然后通过NSURLSessionDownloadTask 进行下载request,返回对应的进度，通过KVO进行进度条的UI显示,也可通过Block传递到控制器进行显示。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> NSURLSessionDownloadTask *downloadTask &#x3D; [_manager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) &#123;</span><br><span class="line">     dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">         if(progressBlock)&#123;</span><br><span class="line">             progressBlock(downloadProgress);</span><br><span class="line">         &#125;</span><br><span class="line">         downloadModel.progress &#x3D; downloadProgress.fractionCompleted;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125; destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123;</span><br><span class="line">        return [NSURL fileURLWithPath:downloadModel.pathName]; &#x2F;&#x2F;这里直接返回需要存储的本地沙盒路径</span><br><span class="line">&#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;</span><br><span class="line">   if (error) &#123;</span><br><span class="line">       if (failedBlock) &#123;</span><br><span class="line">           downloadModel.progress &#x3D; 1;</span><br><span class="line">           failedBlock(error);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">       if(successBlock)&#123;</span><br><span class="line">           NSHTTPURLResponse * successRes &#x3D; (NSHTTPURLResponse *)response;</span><br><span class="line">           successBlock(successRes,downloadModel);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;];</span><br><span class="line">[downloadTask resume];</span><br><span class="line">downloadModel.task &#x3D; downloadTask;</span><br></pre></td></tr></table></figure><p>扇形视图的定义编写参考TZImagePicker图片选择器开源UI框架中的TZProgressView，后期的聊天图片预览也很大参考了TZ的图片、gif，视频混合预览控件。后期还会讲到基于TZImagePicker的图片入口进行图片编辑等功能扩展。<br>回到扇形进度视图，我们定义了一个PieProgressView， 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#define Hollow_Circle_Radius 0 &#x2F;&#x2F;中间空心圆半径，默认为0实心</span><br><span class="line">#define KOffsetRadius 10 &#x2F;&#x2F;偏移距离</span><br><span class="line">#define KMargin 0 &#x2F;&#x2F;边缘间距</span><br><span class="line"></span><br><span class="line">@interface PieProgressView ()&#123;</span><br><span class="line">    CGFloat _radius;</span><br><span class="line">    CGPoint _center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) CAShapeLayer *pieLayer;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation PieProgressView</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithFrame:(CGRect)frame&#123;</span><br><span class="line"></span><br><span class="line">    self &#x3D; [super initWithFrame:frame];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.backgroundColor &#x3D; UIColor.clearColor;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;线的半径为扇形半径的一半，线宽是扇形半径-&gt;半径+线宽的一半&#x3D;真实半径，这样就能画出圆形了</span><br><span class="line">        _radius &#x3D; (frame.size.width - KMargin*2)&#x2F;4.f;</span><br><span class="line">        _center &#x3D; CGPointMake(_radius*2 + KMargin, _radius*2 + KMargin);</span><br><span class="line"></span><br><span class="line">         _pieLayer &#x3D; [CAShapeLayer layer];</span><br><span class="line">         _pieLayer.strokeStart &#x3D; 0;</span><br><span class="line">        _pieLayer.lineWidth &#x3D; _radius*2 - Hollow_Circle_Radius;</span><br><span class="line">        _pieLayer.strokeColor &#x3D;  [[UIColor colorWithWhite:0 alpha:0.5] CGColor];</span><br><span class="line">        _pieLayer.fillColor &#x3D; [UIColor clearColor].CGColor;</span><br><span class="line">        _pieLayer.strokeEnd &#x3D; 0.98;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- Publish Methods</span><br><span class="line"></span><br><span class="line">- (void)drawRect:(CGRect)rect &#123;</span><br><span class="line"></span><br><span class="line">    _radius &#x3D; (rect.size.width - KMargin*2)&#x2F;4.f;</span><br><span class="line">    _center &#x3D; CGPointMake(_radius*2 + KMargin, _radius*2 + KMargin);</span><br><span class="line">    _pieLayer.frame &#x3D; self.bounds;</span><br><span class="line">    UIBezierPath *piePath &#x3D; [UIBezierPath bezierPathWithArcCenter:_center radius:_radius + Hollow_Circle_Radius startAngle:M_PI_2*3 endAngle:-M_PI_2 clockwise:false];</span><br><span class="line"></span><br><span class="line">    _pieLayer.strokeEnd &#x3D; 1.0-_progress;</span><br><span class="line">    _pieLayer.path &#x3D; piePath.CGPath;</span><br><span class="line">   [_pieLayer removeFromSuperlayer];</span><br><span class="line">    [self.layer addSublayer:_pieLayer];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setProgress:(float)progress &#123;</span><br><span class="line"></span><br><span class="line">    _progress &#x3D; progress;</span><br><span class="line">    [self setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>设置视图进度属性的时候，通过调用setNeedsDisplay告诉系统需要进行视图渲染，系统调用drawRect方法,往self.layer添加一个pieLayer, pieLayer的path通过贝塞尔曲线进行设置，piePath相当于从画了一个圆弧度，通过strokeEnd控制结束点，需要和closewise配合控制逆时针。pieLayer需要每次移除再往里添加。<br>在控制器列表cellFor的时候, 设置progress的起初值为0.0001很小，几乎接近0，这样在点击的时候如果去下载，则灰色透明蒙版值达到0.999接近1.0 ，给人很逼真的感觉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if(_convRecord.msg_type &#x3D;&#x3D; type_file)&#123;</span><br><span class="line">    PieProgressView *pieProgressView &#x3D; (PieProgressView *) [cell.contentView viewWithTag:pic_progress_circle_tag];</span><br><span class="line">    pieProgressView.superview.hidden &#x3D; NO;</span><br><span class="line">    if(pieProgressView) &#123;</span><br><span class="line">         if(_convRecord.download_flag &#x3D;&#x3D; state_download_success) &#123;</span><br><span class="line">             pieProgressView.hidden &#x3D; YES;</span><br><span class="line">         &#125;else &#123;</span><br><span class="line">              pieProgressView.hidden &#x3D; YES;</span><br><span class="line">              pieProgressView.alpha &#x3D; 1.0;</span><br><span class="line">              pieProgressView.progress &#x3D; 0.0001; &#x2F;&#x2F;初始化配置进度。</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于ui需求需显示圆扇形进度，需要将pieProgressView添加到一个背景view中，再设置其circleBackView的背景颜色为透明，layer的masksToBounds为YES,这样就可以显示我们需要的圆扇形了。</p></li><li><p>Xcode12 Runtime的方法调用。由于主工程是多个project工程相互依赖串行而成的工程，底工程需要依赖主工程类时候，可通过runtime obj_msgSend消息发送方式进行调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id cls &#x3D; ((id (*) (id, SEL)) objc_msgSend)(objc_getClass(&quot;HttpTool&quot;),sel_registerName(&quot;tool&quot;));</span><br><span class="line">SEL sel &#x3D; sel_registerName(&quot;POST:paramDic:Success:Failure:&quot;);</span><br><span class="line">((void (*)(id,SEL,NSString *,NSDictionary *, id, id))objc_msgSend)(cls, sel, urlStr, dic, finishSuccessBlock,FailureBlock);</span><br></pre></td></tr></table></figure></li><li><p>崩溃问题：</p><ul><li>数组越界。尤其在使用tableview的beginUpdate 的时候，局部刷新操作的数据源和读取的数据源个数不一致导致。还有一种情况是在子线程中操作了该数据，导致刷新的时候和该数据源不一致导致崩溃。或者是数据源遭到污染，变相被改变。</li><li>字符串截取崩溃。 在使用字符串的方法截取range 的时候没有判断长度越界情况。</li><li>在集合copy的时候，要注意是否变化为不可变集合，否则调用类似addObject等方法时候容易崩溃。</li><li>对象释放。在使用SDWebImage下载图片的时候，如果用一个临时的imageView去下载一个图片，而这个imageView又没有被界面引用就出现对象被释放了。从而导致imageView sd_download的时候complateBlock一直没有回调。</li><li>对象关键字的使用。比如block没有使用copy, delegate没有使用weak等。</li><li>在子线程中发送了通知，然后在主线程更改了UI导致崩溃。</li></ul></li><li><p>业务异常：</p><ul><li>切换登录用户，导致发送消息失败或者丢失。原因：切换用户时，数据库开关不正确导致sql事务没有提交。 解决方案：首先sqllite模式为串行模式，全局App只有一个共享的句柄handle。我们把这个变量定义在LCLSqlite中设置为只读。 建立一个单例dbManager类,只负责创建数据库和关闭数据库以及数据库版本的管理。 定义BaseSqlite类.提供公共的操纵数据库sql的读写方法，子类业务DAO都继承于BaseSqlite类，子类Dao可以使用handle(只读),但不可更改handle. 在数据库sqlite关闭的时候，为防止遗留与语句池statement还在使用, 需循环拿出未处理的语句池进行关闭。这样再打开数据库就能成功。</li><li>正在某会话聊天的时候，输入文字发送后。突然杀掉进程，再次打开会话发现消息消失。解决方案：App线程干掉会走applicationWillTerminate方法，在此需要将数据库关闭。</li><li>用户登录后收到很多离线消息，如果处理消息入库的线程池开辟数量大于2，则会出现多个业务先后顺序的问题（问题场景：消息在会话页面撤销了，但未在消息列表页面撤销掉）。必须控制线程数为1，保证Operation任务依赖有序插入，如果要处理入库的效率。可将消息数据记录进行批量事务入库。</li></ul></li><li><p>线程问题：</p><ul><li>消息数据记录入库后，都会写一段代码来发送通知到控制器进行页面的刷新操作。当大量消息入库后发送通知时候，会造成主界面代码块如果开辟了GCD线程，会造成大量浪费和内存开辟的浪费。需要严格控制好线程的数量，可通过线程池等方面去控制。</li><li>不要一味地想当然用异步去处理耗时长的任务然后直接下一步业务操作。比如发送一段语音，需要存储到沙盒，需要上传，需要把数据记录存到数据库。存到数据库时候，我们需要存储后端服务器返回给我们的fileToken，线程的执行有先后，文件的fileToken取到的是否正确的？值得考量。或者采取Block方式当真正拿到fileToken时候才进行下一步的业务操作。</li><li>如何保证在多线程情况下的数据源安全？原子性？加同步锁？信号量？栅栏函数？ 值得你去探索? 归根结底是引用类型造成的问题，Swift Struct 值类型值得你拥有。</li></ul></li><li><p>业务懒加载：</p><ul><li>场景1：某消息类型为群待办或者群公告。他们重用的消息Cell可能一直，只是局部UI的不同。 cell的显示需要实时显示正确的消息类型对应的UI,这个时候可能通过查数据库拿到值后再更新UI. 但在计算cell高度的时候，无论是群待办还是群公告，它们的高度是固定的。所以无需多余的查询，只需load数据源的时候提前一次查询即可。</li><li>当涉及到对象的copy的时候，尤其是当对象里某属性重写了get又去查询数据库的时候，性能损耗较大，在copyWithZone的方法里赋值的时候可根据情况将self.propA 改成_propA 这样就不会触发耗时的查询。</li><li>在消息首页不断地查询计算总得未读数的时候，我们可以控制当消息数99+的时候，终止没必要的查询机制。当在收到通知需要查询未读数业务时候可控制专门的线程去查询该未读数。</li><li>为了减少通知之后的刷新率，我们可以在消息入库之后发出通知之前，用一个中转器相当于一个定时时间内去检查有记录则即通知刷新一次（带参将消息数据发出去）。</li></ul></li><li><p>性能问题：</p><ul><li>大部分性能损耗其实还是发生在主线程进行IO读取上，应该尽量去控制IO的读取频次，以及根据业务情况按实际需要它放在子线程中处理，再通过Block形式去返回。而block形式会给编写的代码造成block嵌套，尤其是层次多的时候，给阅读上造成一定的干扰。所以应该控制嵌套层次数，两者结合。业界也有coobjc协程解决方案。或者参考PromiseKit 类似前端web的promise方案。</li><li>Sqlite串行模式下数据库读写在大量离线消息收到时候比较容易出现卡顿的问题，因为所触发的读和写都是穿插排队。并不能很好地实现读写并发。在此基础上，我们应该控制大量数据写的时候尽量剥离出冗合的业务，将数据批量事务入库，这样在性能上也不至于那么卡。当然此方案也需要后台配合，看后台服务器是一条条下发给客户端还是批量多条下发给客户端。</li><li>当在群会话发送一条消息的时候，本地有一张数据已读回执表记录着消息id, 用户id,阅读状态，创建时间，阅读时间等。首先需要将群里所有人批量入库初始为未阅读状态。当有收到回执消息时，即更新对应的阅读状态。这样给此表造成数据量的庞大和臃肿。解决方案：可根据时间戳删除一个月之前的废记录。在创建表的时候，可根据一个群一个回执记录表。这样有利于消息的多表连接与快速查询。</li><li>当有大量数据在内存中排序的时候，如果能从数据库中排序尽量通过sql排序，效率远远大于内存排序。</li><li>如果服务器是一条条离线消息下发，可根据消息的类型属于聊天消息专门通过一个队列来维护，后台线程getMessage循环去取的时候，一次就可以拿多个进行批量入库。</li></ul></li><li>关于IM App 消息存储问题：<br>目前是所有消息都存储在本地客户端。虽然节省了服务器资源，如果不批量下发，客户端性能上处理可能有点问题。可能会有轻微卡顿，如果量大，那就很明显了。虽然进入会话都是从本地拉数据，查询数据也都是本地进行搜索，比较全。但是如果后期要做多端数据同步[漫游]。那其实服务器还是要存储一定时间段的用户聊天消息的。网上查了很多资料，还有一种做法是这样：用户每次登录后，IM服务端会下发每个会话的近50条消息，10个会话也才500条，其实数据量很小了。当用户点击某会话时候，先显示最近的消息，当往上翻页的时候，本地数据库如果有则本地加载出来，如果没有则请求网络进行拉数据。这样推拉结合能减轻客户端很多问题。客户端根据需要进行消息存储。</li></ol><p>接下来将会写一些功能点上的技术心得：<br>[图片编辑：涂鸦，裁剪，文字帖，马赛克]<br>[聊天图片浏览：图片，gif，视频]<br>[消息收藏]<br>[YYTextView富文本部分文字光标选择]<br>[正则匹配解决群内邀请新成员点击问题]<br>[奇怪的侧边栏问题]<br>[@某人在文字前中后的处理规则]<br>[群插件如何开发？]<br>[数据源的线程安全]<br>[图片的转发]</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这两个月学的前端知识</title>
      <link href="/2020/04/25/webSummary/"/>
      <url>/2020/04/25/webSummary/</url>
      
        <content type="html"><![CDATA[<p>框架方面目前主要掌握 Vue 。可独立开发 H5 项目，PC Web 后台系统, 小程序开发。</p><p>UI 框架：用过 element-UI, iView, WeUI, WeUIJs. MiniUI</p><p>第三方插件：使用过 Moment 日期处理,Echart 图表统计, VueDraggable 拖动。</p><p>网络请求：Axios</p><p>图片上传: Weui-Uploader, Blob 或 base64 上传.</p><p>IM: 使用过网易云信。</p><p>移动 App: 用 Swift 开发过 iOS 项目,Sass 应用。(云喵)</p><p>熟悉 Webpack, Sass, NodeJs, vue-Cli, Router, VueX.</p><p><a href="https://github.com/GaoYingQiu/Vue-Draggable-AppTemplate" target="_blank" rel="noopener">个人 Github Page 演示</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建前端网络请求</title>
      <link href="/2020/02/06/webBegain/"/>
      <url>/2020/02/06/webBegain/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP超文本传输协议。"><a href="#HTTP超文本传输协议。" class="headerlink" title="HTTP超文本传输协议。"></a>HTTP超文本传输协议。</h3><h4 id="TCP-三次握手。"><a href="#TCP-三次握手。" class="headerlink" title="TCP 三次握手。"></a>TCP 三次握手。</h4><p>   1、客户端 发syn询问 给 服务器<br>   2、服务器  回应询问syn,并发送一个指令ack 客户端<br>   3、客户端 回 ack  服务器。 正式连接成功。 开始客户端请求Http报文 ，服务器响应报文。<br><a id="more"></a><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/tcp_threeBegin.png" alt="三次握手"></p><h4 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h4><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/tcp_fourEnd.png" alt="四次挥手"></p><h3 id="发送一个请求查询用户日志记录"><a href="#发送一个请求查询用户日志记录" class="headerlink" title="发送一个请求查询用户日志记录"></a>发送一个请求查询用户日志记录</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:method: POST</span><br><span class="line">:scheme: https</span><br><span class="line">:authority: vendor-api-prod.gaoying.com</span><br><span class="line">:path: &#x2F;customer&#x2F;logs&#x2F;</span><br><span class="line"></span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded  &#x2F;&#x2F;表单提交方式</span><br><span class="line">Origin: http:&#x2F;&#x2F;h5-vendor-dev.gaoying.com</span><br><span class="line">Content-Length: 236</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">Host: vendor-api-dev.gaoying.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 13_3 like Mac OS X) AppleWebKit&#x2F;605.1.15 (KHTML, like Gecko) Mobile&#x2F;15E148</span><br><span class="line">Referer: http:&#x2F;&#x2F;h5-vendor-dev.gaoying.com&#x2F;page&#x2F;customerMain.html?customerId&#x3D;172821&amp;userId&#x3D;15243265&amp;token&#x3D;41cadcb70eed35378a92379871a51181</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">status: 200</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8  &#x2F;&#x2F;json响应格式</span><br><span class="line">Date: Fri, 27 Dec 2019 05:58:18 GMT</span><br><span class="line">Server: Tengine</span><br></pre></td></tr></table></figure><h4 id="请求方式有哪些？"><a href="#请求方式有哪些？" class="headerlink" title="请求方式有哪些？"></a>请求方式有哪些？</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">METHODS: [</span><br><span class="line">   'ACL',         'BIND',       'CHECKOUT',</span><br><span class="line">   'CONNECT',     'COPY',       'DELETE',</span><br><span class="line">   'GET',         'HEAD',       'LINK',</span><br><span class="line">   'LOCK',        'M-SEARCH',   'MERGE',</span><br><span class="line">   'MKACTIVITY',  'MKCALENDAR', 'MKCOL',</span><br><span class="line">   'MOVE',        'NOTIFY',     'OPTIONS',</span><br><span class="line">   'PATCH',       'POST',       'PROPFIND',</span><br><span class="line">   'PROPPATCH',   'PURGE',      'PUT',</span><br><span class="line">   'REBIND',      'REPORT',     'SEARCH',</span><br><span class="line">   'SOURCE',      'SUBSCRIBE',  'TRACE',</span><br><span class="line">   'UNBIND',      'UNLINK',     'UNLOCK',</span><br><span class="line">   'UNSUBSCRIBE'</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h4 id="响应码有哪些？"><a href="#响应码有哪些？" class="headerlink" title="响应码有哪些？"></a>响应码有哪些？</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">STATUS_CODES: &#123;</span><br><span class="line">  '100': 'Continue',</span><br><span class="line">  '101': 'Switching Protocols',</span><br><span class="line">  '102': 'Processing',</span><br><span class="line">  '103': 'Early Hints',</span><br><span class="line">  '200': 'OK',</span><br><span class="line">  '201': 'Created',</span><br><span class="line">  '202': 'Accepted',</span><br><span class="line">  '203': 'Non-Authoritative Information',</span><br><span class="line">  '204': 'No Content',</span><br><span class="line">  '205': 'Reset Content',</span><br><span class="line">  '206': 'Partial Content',</span><br><span class="line">  '207': 'Multi-Status',</span><br><span class="line">  '208': 'Already Reported',</span><br><span class="line">  '226': 'IM Used',</span><br><span class="line">  '300': 'Multiple Choices',</span><br><span class="line">  '301': 'Moved Permanently',</span><br><span class="line">  '302': 'Found',</span><br><span class="line">  '303': 'See Other',</span><br><span class="line">  '304': 'Not Modified',</span><br><span class="line">  '305': 'Use Proxy',</span><br><span class="line">  '307': 'Temporary Redirect',</span><br><span class="line">  '308': 'Permanent Redirect',</span><br><span class="line">  '400': 'Bad Request',</span><br><span class="line">  '401': 'Unauthorized',</span><br><span class="line">  '402': 'Payment Required',</span><br><span class="line">  '403': 'Forbidden',</span><br><span class="line">  '404': 'Not Found',</span><br><span class="line">  '405': 'Method Not Allowed',</span><br><span class="line">  '406': 'Not Acceptable',</span><br><span class="line">  '407': 'Proxy Authentication Required',</span><br><span class="line">  '408': 'Request Timeout',</span><br><span class="line">  '409': 'Conflict',</span><br><span class="line">  '410': 'Gone',</span><br><span class="line">  '411': 'Length Required',</span><br><span class="line">  '412': 'Precondition Failed',</span><br><span class="line">  '413': 'Payload Too Large',</span><br><span class="line">  '414': 'URI Too Long',</span><br><span class="line">  '415': 'Unsupported Media Type',</span><br><span class="line">  '416': 'Range Not Satisfiable',</span><br><span class="line">  '417': 'Expectation Failed',</span><br><span class="line">  '418': "I'm a Teapot",</span><br><span class="line">  '421': 'Misdirected Request',</span><br><span class="line">  '422': 'Unprocessable Entity',</span><br><span class="line">  '423': 'Locked',</span><br><span class="line">  '424': 'Failed Dependency',</span><br><span class="line">  '425': 'Unordered Collection',</span><br><span class="line">  '426': 'Upgrade Required',</span><br><span class="line">  '428': 'Precondition Required',</span><br><span class="line">  '429': 'Too Many Requests',</span><br><span class="line">  '431': 'Request Header Fields Too Large',</span><br><span class="line">  '451': 'Unavailable For Legal Reasons',</span><br><span class="line">  '500': 'Internal Server Error',</span><br><span class="line">  '501': 'Not Implemented',</span><br><span class="line">  '502': 'Bad Gateway',</span><br><span class="line">  '503': 'Service Unavailable',</span><br><span class="line">  '504': 'Gateway Timeout',</span><br><span class="line">  '505': 'HTTP Version Not Supported',</span><br><span class="line">  '506': 'Variant Also Negotiates',</span><br><span class="line">  '507': 'Insufficient Storage',</span><br><span class="line">  '508': 'Loop Detected',</span><br><span class="line">  '509': 'Bandwidth Limit Exceeded',</span><br><span class="line">  '510': 'Not Extended',</span><br><span class="line">  '511': 'Network Authentication Required'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端请求后，服务器响应携带的https证书"><a href="#客户端请求后，服务器响应携带的https证书" class="headerlink" title="客户端请求后，服务器响应携带的https证书"></a>客户端请求后，服务器响应携带的https证书</h4><p>HTTPS:<br>在HTTP与TCP之间 加入SSL层，一个加密/身份验证层，用于安全的HTTP数据传输。 它是一个URI scheme（抽象标识符体系）。<br>SSL : 安全套接层 ， 在网络传输层基础上对网络连接进行数据加密； 具有校验机制，配备身份证书。<br>客户端利用公钥对数据加密，服务端收到加密数据后 对数据进行解密；</p><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/https_cer.png" alt="https证书"></p><p>Https 服务器端口是443, Https 公共密钥采用 RSA算法加密， 证书信息将在请求响应之前回复给客户端。客户端根据证书信息 本地做一个安全校验，通过后再允许服务端响应返回数据，否则取消本次请求响应。<br>签名算法：SHA-256 ECDSA</p><h4 id="常用加密算法"><a href="#常用加密算法" class="headerlink" title="常用加密算法"></a>常用加密算法</h4><h5 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h5><ul><li>单向散列函数<br>MD5 是一种 不可逆的信息摘要算法，严格来说不是加密。<br>单向散列函数是一种不可逆的信息摘要算法，无法通过密文还原成明文（注意：是算法上不能实现），对于简单的 MD5 加密（这里的简单是指：明文长度短，且字符单一，并且进行 HASH 操作的时候没有进行加盐处理），是可以通过一些在线工具网站解密出来，实则是利用了彩虹表的技术。</li><li>AES 加密<br>  加密原理： 字节代换，行位移，列混合：（矩阵相乘：状态矩阵 和 固定矩阵相乘） ，轮钥加密：轮钥加密是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作</li><li>DES 加密</li></ul><h5 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h5><ul><li>RSA 加密<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/http_rsa_aes.png" alt="https加密流程"></li></ul><h3 id="快速搭建Vue-普通h5项目页面的网络请求"><a href="#快速搭建Vue-普通h5项目页面的网络请求" class="headerlink" title="快速搭建Vue 普通h5项目页面的网络请求"></a>快速搭建Vue 普通h5项目页面的网络请求</h3><p>在学习请求之前，需要掌握好Javascript语言。最基础的知识首先要了解和掌握变量修饰符，Function 和 Object对象。</p><h4 id="js-变量修饰符"><a href="#js-变量修饰符" class="headerlink" title="js 变量修饰符"></a>js 变量修饰符</h4><p>let 是局部变量，非常适合循环的时候；<br>const 是只读变量， 初始化的时候就要赋值；只能赋值一次；<br>var 是全局变量，全局都可以用。</p><h4 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数 Function"></a>函数 Function</h4><p> <img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/javascript_function.png" alt="javascript_function"><br> 从上图我们看到有个名为open的函数，包含参数，调用者，长度，名字，以及 <strong>Proto</strong> 对象。该对象里面有 apply ,bind, call 函数。还有一个contructor构造器。</p><ul><li>Function属性： length,name,prototype</li><li><p>Function方法:</p><ul><li>Function.prototype.apply(),  //调用一个函数并将其设置为提供的值。 可以将参数作为Array对象传递</li><li>Function.prototype.bind(), //创建一个新函数，该新函数在调用时将其设置为提供的值，并在调用新函数时在提供的任何参数之前添加给定的参数序列。</li><li>Function.prototype.call(), //调用一个函数并将其设置为提供的值。 可以按原样传递参数。</li><li>Function.prototype.toString() //返回表示函数源代码的字符串。</li></ul><p>//题外话，apply 和 bind 增强代码的扩展性，类似iOS 的category;<br>①动态改变this的指向，也就是this从callObject动态切换为thisArg。<br>②callObject.method.apply(thisArg,thisArray)，可以将thisArray转化为arguments，传入到callObject.method内部。<br>我们通过以下代码来测试bind 的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序员的黄金年龄 18 ~ 35</span></span><br><span class="line"><span class="keyword">var</span> checkProgramerAgeRange = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">'number'</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> value &gt;= <span class="keyword">this</span>.minimum &amp;&amp; value &lt;= <span class="keyword">this</span>.maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> programmerRange = &#123; <span class="attr">minimum</span>: <span class="number">18</span>, <span class="attr">maximum</span>: <span class="number">35</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把函数内部的this修改为range对象，</span></span><br><span class="line"><span class="keyword">let</span> boundCheckProgramerAgeRange = checkProgramerAgeRange.bind(programmerRange);</span><br><span class="line"><span class="built_in">console</span>.log(boundCheckProgramerAgeRange(<span class="number">12</span>));</span><br></pre></td></tr></table></figure></li></ul><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><p>Object 继承Function, 扩展了自己的许多方法。</p><pre><code>Object 的属性构造器 Object.prototypeObject.assign()   将所有可枚举的自身属性的值从一个或多个源对象复制到目标对象。Object.create()  用指定的原型对象和属性创建一个新对象。Object.defineProperty()  定义一个property给指定对象Object.defineProperties() 定义一个属性 给指定对象Object.entries() 返回一个装有map的数组。Object.getOwnPropertyNames() 得到这个对象自己的属性名Object.getPrototypeOf() 得到指定类型的属性Object.is() 比较对象Object.keys() 字符窜属性Object.values()</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stuObj = &#123;<span class="attr">room</span>:<span class="string">"english"</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(stuObj,&#123;</span><br><span class="line">    stuName:&#123;</span><br><span class="line">        value:<span class="string">"qiugaoying"</span>,</span><br><span class="line">        writable:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         configurable, enumerable, </span></span><br><span class="line"><span class="comment">         value, writable, get, set</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        value:<span class="number">18</span>,</span><br><span class="line">        writable:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可直接覆盖某对象的属性；</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(stuObj,<span class="string">"stuName"</span>,&#123;</span><br><span class="line">    value:<span class="string">"gaogao"</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stuObj.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stuObj.stuName); <span class="comment">//gaogao</span></span><br><span class="line"><span class="built_in">console</span>.log(stuObj.age); <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(stuObj)); <span class="comment">//room 取得公共属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(stuObj)); <span class="comment">//room 取得公共属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(stuObj)); <span class="comment">//room,age,stuName 取得对象所有属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(stuObj)); <span class="comment">//获取属性描述器</span></span><br><span class="line"><span class="built_in">console</span>.log(stuObj[<span class="string">"stuName"</span>]); <span class="comment">//gaogao</span></span><br></pre></td></tr></table></figure><h4 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h4><h5 id="传统方式定义一个对象"><a href="#传统方式定义一个对象" class="headerlink" title="传统方式定义一个对象"></a>传统方式定义一个对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过函数的prototype公共空间存储方法</span></span><br><span class="line">Person.prototype.introduce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Person().introduce();</span><br></pre></td></tr></table></figure><h5 id="Class方式定义一个对象"><a href="#Class方式定义一个对象" class="headerlink" title="Class方式定义一个对象"></a>Class方式定义一个对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduce()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我的名字是："</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的本质是对象，对象继承Function; 所以introduce方法还是存储在prototype 公共空间中。操作类函数也可通过Person.prototype 去动态新增新的方法。另外要注意一点类的所有实列共享原型的prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Person(<span class="string">"qiugaoying"</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Person(<span class="string">"lihua"</span>,<span class="number">22</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(student.__proto__ == student2.__proto__); <span class="comment">//结果为true。 类的所有实列共享原型的prototype</span></span><br></pre></td></tr></table></figure></p><h4 id="Ajax-请求"><a href="#Ajax-请求" class="headerlink" title="Ajax 请求"></a>Ajax 请求</h4><p>通常，发起一个请求，需要传入基础参数，业务url,  业务参数，设置请求头，和响应方式。 接着对响应成功和失败的处理；<br>前端通常的请求方式有 表单提交，Ajax异步请求，Jquery也提供了ajax封装的快捷api。另外也有较新的框架Axios。</p><p>ajax 的出现是解决局部数据刷新的问题。可通过后台异步调用接口 实现页面局部刷新。浏览器原生有个XMLHttpRequest对象。<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/js_window_xmlHttpRequest.png" alt="xmlHttpRequest"><br>jQuery 出来之后，ajax的调用简化了好多 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>, <span class="comment">//服务端返回的数据类型</span></span><br><span class="line">    contentType: <span class="string">'application/json'</span> ,<span class="comment">//参数类型</span></span><br><span class="line">    url : <span class="string">"http://127.0.0.1/log/list/"</span>,</span><br><span class="line">    headers:&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;,<span class="comment">//请求头, 内容编码类型 默认 "application/x-www-form-urlencoded"</span></span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">"name"</span>:<span class="string">"qiugaoying"</span>&#125;), <span class="comment">//传参</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result,status,xhr</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result); <span class="comment">//获取结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr,status,error</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Axios-框架"><a href="#Axios-框架" class="headerlink" title="Axios 框架"></a>Axios 框架</h4><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中. 我们来观察一下 在axios 的api 方法。<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/http_axios.png" alt="axios"></p><ul><li>从图可以看出，有个默认属性中有个xmlHttpRequet网络适配器。</li><li>可设置基础baseURL , 以及请求头，请求超时等一些基础设置。</li><li>转换请求数据和响应数据，支持防御 XSRF。</li><li>提供了常用的get,post 等请求。自动转换 JSON 数据。还提供请求和响应的拦截器。</li></ul><h5 id="script标签引入axios-的js"><a href="#script标签引入axios-的js" class="headerlink" title="script标签引入axios 的js"></a>script标签引入axios 的js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/构建一个axios实列只读变量，设置基础url</span></span><br><span class="line"><span class="regexp">const http = axios.create(&#123;</span></span><br><span class="line"><span class="regexp">    baseURL: 'https:/</span><span class="regexp">/vendor-api-prod.qiugaoying.com',</span></span><br><span class="line"><span class="regexp">    timeout: 1000,</span></span><br><span class="line"><span class="regexp">    transformRequest: [function(data) &#123;</span></span><br><span class="line"><span class="regexp">        // Do whatever you want to transform the data</span></span><br><span class="line"><span class="regexp">        let ret = ''</span></span><br><span class="line"><span class="regexp">        for (let it in data) &#123;</span></span><br><span class="line"><span class="regexp">            ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&amp;'</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return ret</span></span><br><span class="line"><span class="regexp">    &#125;]</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="封装基础参数，排序-加密等"><a href="#封装基础参数，排序-加密等" class="headerlink" title="封装基础参数，排序 加密等"></a>封装基础参数，排序 加密等</h5><p>对请求的基础参数做一个封装。 大部分请求都需要带上一些基础参数和userId,token 等字段。最后对所有字段key排序,最后转成Json 字符串再加密。以下为示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> netManager = &#123;</span><br><span class="line">    getRequestParams: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> userId = localStorage.getItem(<span class="string">"userId"</span>);</span><br><span class="line">        <span class="keyword">let</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// var userInfo = JSON.parse(userInfoStr);</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(params, &#123;</span><br><span class="line">            api_version: <span class="number">1</span>, <span class="comment">//接口版本</span></span><br><span class="line">            platform: <span class="number">2</span>, <span class="comment">//平台类型</span></span><br><span class="line">            terminal: <span class="number">1</span>, <span class="comment">//终端类型</span></span><br><span class="line">            nonce: (<span class="built_in">Math</span>.random().toFixed(<span class="number">8</span>) + <span class="string">''</span>).replace(<span class="string">'0.'</span>, <span class="string">''</span>), <span class="comment">//随机数;</span></span><br><span class="line">            timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="comment">//当前时间戳 毫秒</span></span><br><span class="line">            user_id:<span class="number">123</span>, <span class="comment">//userId</span></span><br><span class="line">            token: <span class="string">"ec29c3af0dd998yjhgd22f9y867ws6512"</span>, <span class="comment">//token</span></span><br><span class="line">            version_code: <span class="number">100</span> <span class="comment">//当前版本号</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> sign = MD5(<span class="keyword">this</span>.strKeySort(obj)).toUpperCase(); <span class="comment">//md5加密</span></span><br><span class="line">        obj[<span class="string">"Sign"</span>] = sign;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key排序</span></span><br><span class="line">    strKeySort: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> newkey = <span class="built_in">Object</span>.keys(obj).sort();</span><br><span class="line">        <span class="keyword">const</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newkey.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj[newkey[i]] === <span class="string">'undefined'</span> || obj[newkey[i]] === <span class="string">'null'</span>) &#123;</span><br><span class="line">                obj[newkey[i]] = <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newArr.push(<span class="string">`<span class="subst">$&#123;newkey[i]&#125;</span>=<span class="subst">$&#123;obj[newkey[i]]&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newStr = newArr.join(<span class="string">'&amp;'</span>) + <span class="string">'&amp;secret_key=gaoyingAESKey'</span>;</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取url 后面带的参数;</span></span><br><span class="line">    getUrlKey: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>((<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[?|&amp;]'</span> + name + <span class="string">'='</span> + <span class="string">'([^&amp;;]+?)(&amp;|#|;|$)'</span>).exec(location.href) || [, <span class="string">""</span>])[<span class="number">1</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">'%20'</span>)) || <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="axios实列发起一个请求示例"><a href="#axios实列发起一个请求示例" class="headerlink" title="axios实列发起一个请求示例"></a>axios实列发起一个请求示例</h5><p>这里拿请求用户个人主页基础信息为样例，把下面方法放入 Vue 的 methods 中。 加载loading用到的是weiui.js.<br>以下可以实现一个分页加载的请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#PageContainer1'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">//分页数据</span></span><br><span class="line">        pageNumber: <span class="number">1</span>,</span><br><span class="line">        pageSize: <span class="number">10</span>,</span><br><span class="line">        gyPageListStart: <span class="number">0</span>,</span><br><span class="line">        hasMoreDataFlag: <span class="literal">false</span>,</span><br><span class="line">        dataSource: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        execBaseCustomerRequest: <span class="function"><span class="keyword">function</span>(<span class="params">url, listKey</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> loading = <span class="literal">null</span>;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber == <span class="number">1</span>) &#123;</span><br><span class="line">                  loading = weui.loading(<span class="string">'加载中'</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">let</span> pageVue = <span class="keyword">this</span>; <span class="comment">//this在不同的作用域中指向的对象不同；临时存储vue对象</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber == <span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="keyword">this</span>.gyPageListStart = <span class="number">0</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              http.post(url, netManager.getRequestParams(&#123;</span><br><span class="line">                  customer_id: <span class="keyword">this</span>.customerId,</span><br><span class="line">                  start: <span class="keyword">this</span>.gyPageListStart,</span><br><span class="line">                  size: <span class="number">10</span>,</span><br><span class="line">              &#125;)).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">                      loading.hide();</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">let</span> dataDic = response.data;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (dataDic.status == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">var</span> arr = pageVue.dataSource;</span><br><span class="line">                      <span class="keyword">if</span> (pageVue.pageNumber == <span class="number">1</span>) &#123;</span><br><span class="line">                          arr = [];</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">var</span> dataArr = dataDic.data[listKey];</span><br><span class="line">                      arr = arr.concat(dataArr);</span><br><span class="line"></span><br><span class="line">                      pageVue.gyPageListStart = dataDic.data.start;</span><br><span class="line">                      vm.$data.hasMoreDataFlag = (dataDic.data.more == <span class="number">1</span>);</span><br><span class="line">                      vm.$data.dataSource = arr;</span><br><span class="line">                  &#125;</span><br><span class="line">                  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                      pageVue.requestLoadingFinished = <span class="literal">true</span>;</span><br><span class="line">                  &#125;, <span class="number">800</span>);</span><br><span class="line">                  <span class="comment">//重置加载完成的状态；</span></span><br><span class="line"></span><br><span class="line">              &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(error);</span><br><span class="line">              &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>其他： url 通常会放到一个全局文件中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gaoyingAPI = &#123;</span><br><span class="line">    customerList: <span class="string">"/customer/list/"</span>,</span><br><span class="line">    customerLogs: <span class="string">"/customer/logs/"</span>,</span><br><span class="line">    customerCoupons: <span class="string">"/customer/coupons/"</span>,</span><br><span class="line">    customerOrders: <span class="string">"/customer/orders/"</span>,</span><br><span class="line">    customerDetail: <span class="string">"/customer/detail/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Promise-用法简要讲解"><a href="#Promise-用法简要讲解" class="headerlink" title="Promise 用法简要讲解"></a>Promise 用法简要讲解</h5><p>从上文中，我们看到http发送post 方法请求之后，通过promise语法 then的回调监听响应结果，通过catch方法 来捕捉异常错误处理。ES6 就支持了Promise的用法。<br>Promise中文为承诺。有三种状态：pending(进行中)、fulfilled(已成功)、rejected(已失败)。 即状态一旦更改就不能再次改变赋值。这也是承诺的意义。<br>Promise实列通过.then方法或者.catch方法 返回一个新的Promise实例来实现链式调用。.then方法可以返回普通值或者一个新的promise。不设置返回值时，默认返回null。<br>Promise有很多用法，但什么情况下需要用到Promise呢？ 在需要处理异步耗时任务的时候，可用Promise包装后进行返回。Promise用的时候会遇到很多种情况，Promise也提供了对应的解决方法。</p><ul><li>当Promise.then方法返回一个新的Promise时候，下一级的then 将在 新的Promise then 执行 之后执行。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise then 嵌套 方式一</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1:异步请求处理耗时任务"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"qiu"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一个接口请求成功拿到qiu</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1:异步请求处理耗时任务2"</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">"qiugao"</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//触发第二个接口请求</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//第二个接口请求成功，拿到id2 做第一件事情。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event1:"</span> + value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"qiugaoying"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//第二个接口请求成功，拿到id2 做第二件事情。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event2:"</span> + value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, my name is qiugaoying"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//最后全部请求完成，触发汇总刷新。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">console输出结果:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">step1:异步请求处理耗时任务</span></span><br><span class="line"><span class="comment">step1-result:qiu</span></span><br><span class="line"><span class="comment">step2-1:异步请求处理耗时任务2</span></span><br><span class="line"><span class="comment">step2-1-result-event1:qiugao</span></span><br><span class="line"><span class="comment">step2-1-result-event2:qiugaoying</span></span><br><span class="line"><span class="comment">step1-result:hello, my name is qiugaoying</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise then 嵌套，方式二： 把then移到同一级展开。执行打印结果是一样的。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1:异步请求处理耗时任务"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"qiu"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一个接口请求成功拿到qiu</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1:异步请求处理耗时任务"</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">"qiugao"</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//触发第二个接口请求</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第二个接口请求成功，拿到id2 做第一件事情。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event1:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"qiugaoying"</span>;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第二个接口请求成功，拿到id2 做第二件事情。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event2:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, my name is qiugaoying"</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//最后全部请求完成，触发汇总刷新。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>then 方法提供两个参数，第二个参数可选。一个是名为resolve的成功回调 和 另一个名为reject 的失败回调。通常处理一个失败回调我们会用catch方法去捕捉异常和失败。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1:异步请求处理耗时任务"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"qiu"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一个接口请求成功拿到qiu</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1:异步请求处理耗时任务"</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">"qiugao"</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//触发第二个接口请求</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第二个接口请求成功，拿到id2 做第一件事情。</span></span><br><span class="line">    <span class="keyword">let</span> hasError = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"step2-1-result-event1-error报异常"</span>);</span><br><span class="line">        <span class="comment">//抛出异常 将不再继续执行then, 直接到catch异常；中途如果没有遇到catch 将直接到最后的catch.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event1:"</span> + value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"qiugaoying"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*.catch(err =&gt; &#123;</span></span><br><span class="line"><span class="comment">    console.log("中途catchError会继续往下走:" + err);</span></span><br><span class="line"><span class="comment">    return "qiugaoying"</span></span><br><span class="line"><span class="comment">    //也会返回一个promise实例，并且是resolved状态，不会被最后一个catch 捕捉</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line">.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第二个接口请求成功，拿到id2 做第二件事情。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step2-1-result-event2:"</span> + value);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, my name is "</span>+value;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//最后全部请求完成，触发汇总刷新。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"step1-result:"</span> + value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end error:"</span> + error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>finally 方法是最终执行的方法（无参） ，无论状态是什么，成功 or 失败 都会执行收尾。</li><li><p>Promise 还提供all 方法(接收一个数组，里面值可以是普通函数，或者Promise对象)，可用来做一个类似批量处理之后汇总的业务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> testPromiseAll() &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">washFood</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第一步：洗菜'</span>);</span><br><span class="line">        <span class="keyword">let</span> hasError = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(hasError)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"发现了一只虫子！洗掉它。"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'菜洗干净了。'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cutFood</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第二步：切菜'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">//做一些异步操作</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> cutFoodHasError = <span class="literal">true</span>;  <span class="comment">//控制默契切菜时 是否发生异常</span></span><br><span class="line">                <span class="keyword">if</span>(cutFoodHasError)&#123;</span><br><span class="line">                    reject(<span class="string">"呜呜~ 割到手了，流血！"</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(<span class="string">'切好了菜。'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* 试试打开这里的注释</span></span><br><span class="line"><span class="comment">        .catch(error=&gt;&#123;</span></span><br><span class="line"><span class="comment">            console.log("切菜异常:"+error); //异常本身就是返回resolve状态，值是null</span></span><br><span class="line"><span class="comment">            console.log("用创口贴止血，继续做菜。");</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cooking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第三步：炒菜'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">//做一些异步操作</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve(<span class="string">'菜已做好!'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组里，如果放Promise 一定要返回状态。 </span></span><br><span class="line">    <span class="built_in">Promise</span>.all([washFood(), cutFood(),cooking()])</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上桌，吃饭了：'</span>+result);</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"菜没做成，出现了小事故:"</span>+error);</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     结果：</span></span><br><span class="line"><span class="comment">     1. 当cutFoodHasError = true；打印如下结果：</span></span><br><span class="line"><span class="comment">        菜没做成，出现了小事故:呜呜~ 割到手了，流血！</span></span><br><span class="line"><span class="comment">     2. 当cutFoodHasError = true 且 cutFood方法里的Promise有异常捕捉时： </span></span><br><span class="line"><span class="comment">        切菜异常:呜呜~ 割到手了，流血！</span></span><br><span class="line"><span class="comment">        上桌，吃饭了：菜洗干净了！,,菜已做好</span></span><br><span class="line"><span class="comment">     3. 当cutFoodHasError = false </span></span><br><span class="line"><span class="comment">        上桌，吃饭了：菜洗好了。切好了菜。菜已做好！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    Promise.all使用总结：</span></span><br><span class="line"><span class="comment">    数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变</span></span><br><span class="line"><span class="comment">    当所有的子Promise都完成，该Promise完成，返回值是全部值得数组</span></span><br><span class="line"><span class="comment">    有任何一个失败，该Promise失败，返回值是第一个先失败的子Promise结果 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>Promise 另外一个race 方法与all 不同的是，race 类似竞赛，参数中的Promise实例只要有一个率先改变状态就会触发结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//打印结果： 兔子赢了</span></span><br><span class="line">testPromiseRace() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rabbit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'兔子选手'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve(<span class="string">'兔子赢了'</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;) .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"兔子跑步中出现异常:"</span>+error);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tortoise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'乌龟选手'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve(<span class="string">'乌龟赢了'</span>);</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.race([rabbit(),tortoise()])</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"比赛结果:"</span>+result);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Vue-Cli-脚手架项目请求模块的搭建"><a href="#Vue-Cli-脚手架项目请求模块的搭建" class="headerlink" title="Vue Cli 脚手架项目请求模块的搭建"></a>Vue Cli 脚手架项目请求模块的搭建</h3><p>在vue的基础上，我们可以通过vue cli来管理我们的项目。vue cli 方式的优势在于模块之间可以很好地相互引用，通过package 包来管理配置相关的框架依赖。生态非常丰富，可轻松运用vue-router 来解决路由跳转等问题。<br>首先第一步是要创建一个 vue cli项目。</p><h4 id="基础安装环境"><a href="#基础安装环境" class="headerlink" title="基础安装环境"></a>基础安装环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue create helloworld 方式创建项目</span><br><span class="line">也可以 使用GUI vue ui 来通过网页 手动点击按钮操作 来创建项目</span><br></pre></td></tr></table></figure><h4 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"gaoying-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"vue-cli-service lint"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"animate.css"</span>: <span class="string">"^3.7.2"</span>,</span><br><span class="line">    <span class="attr">"core-js"</span>: <span class="string">"^3.4.3"</span>,</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.6.10"</span>,</span><br><span class="line">    <span class="attr">"vue-axios"</span>: <span class="string">"^2.1.5"</span>,</span><br><span class="line">    <span class="attr">"vue-router"</span>: <span class="string">"^3.1.3"</span>,</span><br><span class="line">    <span class="attr">"vuex"</span>: <span class="string">"^3.1.2"</span>,</span><br><span class="line">    <span class="attr">"weui.js"</span>: <span class="string">"^1.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@vue/cli-plugin-babel"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="attr">"@vue/cli-plugin-router"</span>: <span class="string">"^4.1.1"</span>,</span><br><span class="line">    <span class="attr">"@vue/cli-plugin-vuex"</span>: <span class="string">"^4.1.1"</span>,</span><br><span class="line">    <span class="attr">"@vue/cli-service"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.6.10"</span>,</span><br><span class="line">    <span class="attr">"weui"</span>: <span class="string">"^2.1.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">      <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"extends"</span>: [</span><br><span class="line">      <span class="string">"plugin:vue/essential"</span>,</span><br><span class="line">      <span class="string">"eslint:recommended"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">      <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,</span><br><span class="line">    <span class="string">"last 2 versions"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置main-js"><a href="#配置main-js" class="headerlink" title="配置main.js"></a>配置main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span> <span class="comment">//请求网络</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span> </span><br><span class="line"><span class="keyword">import</span> weui <span class="keyword">from</span> <span class="string">'weui.js'</span> <span class="comment">//weuiJs</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'weui'</span> <span class="comment">//weui样式</span></span><br><span class="line"><span class="keyword">import</span> ymAPI <span class="keyword">from</span> <span class="string">'@/assets/js/urlConfig.js'</span> <span class="comment">//Api</span></span><br><span class="line"><span class="keyword">import</span> netManager <span class="keyword">from</span> <span class="string">'@/assets/js/netManager.js'</span> <span class="comment">//请求基础参数拼接</span></span><br><span class="line"><span class="keyword">import</span> ymNativeBridge <span class="keyword">from</span> <span class="string">'@/assets/js/ymNativeBridge.js'</span> <span class="comment">//原生事件交互</span></span><br><span class="line"><span class="keyword">import</span> animate <span class="keyword">from</span> <span class="string">'animate.css'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> ymHttp = axios.create(&#123;</span><br><span class="line">    </span><br><span class="line">    baseURL: <span class="string">'https://vendor-api-prod.gaoying.com'</span>, </span><br><span class="line">    timeout: <span class="number">1000</span>,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">        <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">            ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$weui = weui</span><br><span class="line">Vue.prototype.$ymAPI = ymAPI</span><br><span class="line">Vue.prototype.$netManager = netManager</span><br><span class="line">Vue.prototype.$ymNativeBridge = ymNativeBridge</span><br><span class="line">Vue.use(VueAxios, ymHttp,animate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><h4 id="请求Demo示例"><a href="#请求Demo示例" class="headerlink" title="请求Demo示例"></a>请求Demo示例</h4><p>//和普通h5 请求网络类似，唯一不同的就是通过挂载到Vue上的axios ，可以通过this.$http 取得。this.$netManager 也类似。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">execBaseCustomerRequest: <span class="function"><span class="keyword">function</span>(<span class="params">url, listKey</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> loading = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber == <span class="number">1</span>) &#123;</span><br><span class="line">       loading = <span class="keyword">this</span>.$weui.loading(<span class="string">'加载中'</span>);</span><br><span class="line">       <span class="keyword">this</span>.gyPageListStart = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> pageVue = <span class="keyword">this</span>; <span class="comment">//this在不同的作用域中指向的对象不同；临时存储vue对象</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">this</span>.$http.post(url, <span class="keyword">this</span>.$netManager.getRequestParams(&#123;</span><br><span class="line">       customer_id: <span class="keyword">this</span>.customerId,</span><br><span class="line">       start: <span class="keyword">this</span>.gyPageListStart,</span><br><span class="line">       size: <span class="number">10</span>,</span><br><span class="line">   &#125;)).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">           loading.hide();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> dataDic = response.data;         </span><br><span class="line">       <span class="keyword">if</span> (dataDic.status == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> arr = pageVue.dataSource;</span><br><span class="line">           <span class="keyword">if</span> (pageVue.pageNumber == <span class="number">1</span>) &#123;</span><br><span class="line">               arr = [];</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> dataArr = dataDic.data[listKey];</span><br><span class="line">           arr = arr.concat(dataArr);</span><br><span class="line"></span><br><span class="line">           pageVue.gyPageListStart = dataDic.data.start;</span><br><span class="line">           pageVue.hasMoreDataFlag = (dataDic.data.more == <span class="number">1</span>);</span><br><span class="line">           pageVue.dataSource = arr;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           pageVue.$weui.topTips(dataDic.errorMsg);</span><br><span class="line">       &#125;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           pageVue.requestLoadingFinished = <span class="literal">true</span>;</span><br><span class="line">       &#125;, <span class="number">800</span>);</span><br><span class="line">       <span class="comment">//重置加载完成的状态；</span></span><br><span class="line"></span><br><span class="line">   &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(error);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="模块之间的引用和导出"><a href="#模块之间的引用和导出" class="headerlink" title="模块之间的引用和导出"></a>模块之间的引用和导出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MD5 <span class="keyword">from</span> <span class="string">'./md5.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getRequestParams: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> userId = localStorage.getItem(<span class="string">"userId"</span>);</span><br><span class="line">        <span class="keyword">let</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//md5.js 文件中 </span></span><br><span class="line"><span class="keyword">var</span> MD5 = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = MD5</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口配置urlConfig.js 文件中</span></span><br><span class="line"><span class="keyword">const</span> ymAPI = &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//客户信息 </span></span><br><span class="line">    customerList: <span class="string">"/customer/list/"</span>,</span><br><span class="line">    customerLogs: <span class="string">"/customer/logs/"</span>,</span><br><span class="line">    customerCoupons: <span class="string">"/customer/coupons/"</span>,</span><br><span class="line">    customerOrders: <span class="string">"/customer/orders/"</span>,</span><br><span class="line">    customerDetail: <span class="string">"/customer/detail/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = ymAPI</span><br></pre></td></tr></table></figure><p>export 在js文件中可以有多个.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//testExport.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"qiugaoying"</span>,<span class="attr">sex</span>:<span class="number">1</span>, <span class="attr">job</span>:<span class="string">"software Programmer"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addressInfo = &#123;<span class="attr">province</span>:<span class="string">"广东省"</span>, <span class="attr">city</span>:<span class="string">"guangzhou"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> introduct = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"my name is qiugaoying"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>export 有多个的时候 ，导入必须用花括号括起来.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;person,addressInfo&#125; <span class="keyword">from</span> <span class="string">"../../utils/testExport.js"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span>  allExp <span class="keyword">from</span> <span class="string">"../../utils/testExport.js"</span>  <span class="comment">//加载全部export,取个别名</span></span><br></pre></td></tr></table></figure><br><strong> 总结 </strong></p><ol><li>export default 只能导出一个对象。import 和 export 同一js文件中可以导入或导出多次。</li><li>module.exports 和 exports 都是 node 端在用，两者指向同一内存块，可以导出变量 或 函数，对象。</li><li>exports 变量是在模块的文件级作用域内可用的，且在模块执行之前赋值给 module.exports。</li></ol><h3 id="H5-和-App-原生交互"><a href="#H5-和-App-原生交互" class="headerlink" title="H5 和 App 原生交互"></a>H5 和 App 原生交互</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原生调用app</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    callApp:<span class="function"><span class="keyword">function</span>(<span class="params">handlerMethod, parameters</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>.WeixinJSBridge || !WeixinJSBridge.invoke) &#123;</span><br><span class="line">            <span class="keyword">var</span> handlerInterface = <span class="string">'YunMiaoNative'</span>;</span><br><span class="line">            <span class="keyword">var</span> dic = &#123;</span><br><span class="line">                <span class="string">'handlerInterface'</span>: handlerInterface,</span><br><span class="line">                <span class="string">'function'</span>: handlerMethod, <span class="comment">//调用原生的指令</span></span><br><span class="line">                <span class="string">'parameters'</span>: parameters <span class="comment">//传递的参数；</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/(iPhone|iPad|iPod|iOS)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">                <span class="built_in">window</span>.webkit.messageHandlers[handlerInterface].postMessage(dic);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//安卓  </span></span><br><span class="line">                app.ymAppWebClick(); <span class="comment">//dic</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//包含微信功能，比如可唤起小程序。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//原生调用app 并传递参数给H5</span></span><br><span class="line">    callbackH5: <span class="function"><span class="keyword">function</span>(<span class="params">handlerMethod, parameters, callbackMethod</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>.WeixinJSBridge || !WeixinJSBridge.invoke) &#123;</span><br><span class="line">            <span class="keyword">var</span> handlerInterface = <span class="string">'YunMiaoH5'</span>;</span><br><span class="line">            <span class="keyword">var</span> dic = &#123;</span><br><span class="line">                <span class="string">'handlerInterface'</span>: handlerInterface,</span><br><span class="line">                <span class="string">'function'</span>: handlerMethod, <span class="comment">//调用原生的指令</span></span><br><span class="line">                <span class="string">'parameters'</span>: parameters, <span class="comment">//传递的参数；</span></span><br><span class="line">                <span class="string">'callbackMethod'</span>: callbackMethod <span class="comment">//回调的函数</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/(iPhone|iPad|iPod|iOS)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">                <span class="built_in">window</span>.webkit.messageHandlers[handlerInterface].postMessage(dic);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//安卓  </span></span><br><span class="line">                app.ymAppWebClick(<span class="built_in">JSON</span>.stringify(dic));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//包含微信功能，比如可唤起小程序。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归，分治，标记</title>
      <link href="/2020/02/02/algorithmExercises/"/>
      <url>/2020/02/02/algorithmExercises/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>打印图案<ol><li>等腰三角形之字母扩展</li><li>空心菱形 方法一：两个等腰三角形拼接</li><li>空心菱形 方法二：对角线相等</li><li>杨辉三角</li><li>螺旋矩阵</li><li>蛇形矩阵 1</li><li>蛇形矩阵 2</li></ol></li><li>趣味习题<ol><li>打印某年某月日历排版</li><li>找出最长的单词</li><li>颠倒一串英文句子</li><li>颠倒一串英文句子 Java版本</li><li>生成不重复的随机数</li><li>统计班级成绩排名 Java 版本</li><li>统计班级成绩排名 C 版本</li><li>报数 123，报数 3 的童鞋退出，最后留下的是哪个同学。 Java 版本</li><li>报数 123，报数 3 的童鞋退出，最后留下的是哪个同学。 C 语言版本</li><li>模拟对象层级树结构</li></ol></li><li>基础排序<ol><li>插入排序</li><li>选择排序</li><li>冒泡排序</li><li>快速排序</li><li>二分法查找</li></ol></li><li>Json 格式的校验</li></ol><a id="more"></a><h3 id="打印图案"><a href="#打印图案" class="headerlink" title="打印图案"></a>打印图案</h3><h4 id="等腰三角形之字母扩展"><a href="#等腰三角形之字母扩展" class="headerlink" title="等腰三角形之字母扩展"></a>等腰三角形之字母扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等腰三角形之字母扩展</span></span><br><span class="line"><span class="keyword">void</span>  printThreeCornerRect1()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,row;</span><br><span class="line">    printf(<span class="string">"输入行："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;row);</span><br><span class="line">    int col=<span class="number">2</span>*row<span class="number">-1</span>;</span><br><span class="line">    char words[<span class="number">27</span>]=<span class="string">" ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    int center = col/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    printf(<span class="string">"center:%d\n"</span>,center);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=col;j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(j&lt;=row-i||j&gt;col-(row-i))</span><br><span class="line">                printf(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==center &amp;&amp; i &gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    printf(<span class="string">"%c"</span>,words[i+<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    printf(<span class="string">"%c"</span>,words[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印结果：</span><br><span class="line">输入行：<span class="number">9</span></span><br><span class="line">        A        </span><br><span class="line">       BCB       </span><br><span class="line">      CCDCC      </span><br><span class="line">     DDDEDDD     </span><br><span class="line">    EEEEFEEEE    </span><br><span class="line">   FFFFFGFFFFF   </span><br><span class="line">  GGGGGGHGGGGGG  </span><br><span class="line"> HHHHHHHIHHHHHHH </span><br><span class="line">IIIIIIIIJIIIIIIII</span><br></pre></td></tr></table></figure><p>思路分析： </p><ol><li>根据输入行数，先输出一个矩形如下图所示。 </li><li>确定每一行字母的个数为 2 n - 1。</li><li>每行显示的时候根据条件对显示字母除外的地方挖空，用 * 表示</li><li>打印字母取数组对应下标行数的字母。正中间的位置为下标加 1 输出下一个字母。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">********A********</span><br><span class="line">*******BCB*******</span><br><span class="line">******CCDCC******</span><br><span class="line">*****DDDEDDD*****</span><br><span class="line">****EEEEFEEEE****</span><br><span class="line">***FFFFFGFFFFF***</span><br><span class="line">**GGGGGGHGGGGGG**</span><br><span class="line">*HHHHHHHIHHHHHHH*</span><br><span class="line">IIIIIIIIJIIIIIIII</span><br></pre></td></tr></table></figure><h4 id="空心菱形-方法一-两个等腰三角形拼接"><a href="#空心菱形-方法一-两个等腰三角形拼接" class="headerlink" title="空心菱形 方法一: 两个等腰三角形拼接"></a>空心菱形 方法一: 两个等腰三角形拼接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空心菱形</span></span><br><span class="line"><span class="keyword">void</span> printLingxingRect()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,e,f;</span><br><span class="line">    int c;</span><br><span class="line">    char word[<span class="number">10</span>] = <span class="string">"*"</span>;</span><br><span class="line">    printf(<span class="string">"请输代表图案:"</span>);</span><br><span class="line">    scanf(<span class="string">"%s"</span>,&amp;word);</span><br><span class="line">    printf(<span class="string">"请输入行:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c;i++)  <span class="comment">//打印上半部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=c+<span class="number">1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">" "</span>); <span class="comment">//左边挖空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=(<span class="number">2</span>*i<span class="number">-1</span>);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;j&lt;(<span class="number">2</span>*i<span class="number">-1</span>))</span><br><span class="line">                printf(<span class="string">" "</span>); <span class="comment">//中间挖空</span></span><br><span class="line">            <span class="keyword">else</span> printf(<span class="string">"%s"</span>, word);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(e=<span class="number">2</span>;e&lt;=c;e++) <span class="comment">//打印下半部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(f=<span class="number">1</span>;f&lt;=e;f++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(f=<span class="number">1</span>;f&lt;=<span class="number">2</span>*c+<span class="number">1</span><span class="number">-2</span>*e;f++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(f&gt;<span class="number">1</span>&amp;&amp;f&lt;<span class="number">2</span>*c+<span class="number">1</span><span class="number">-2</span>*e)</span><br><span class="line">                printf(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                printf(<span class="string">"%s"</span>,word);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>效果如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">请输代表图案:*</span><br><span class="line">请输入行:<span class="number">9</span></span><br><span class="line"></span><br><span class="line">         *</span><br><span class="line">        * *</span><br><span class="line">       *   *</span><br><span class="line">      *     *</span><br><span class="line">     *       *</span><br><span class="line">    *         *</span><br><span class="line">   *           *</span><br><span class="line">  *             *</span><br><span class="line"> *               *</span><br><span class="line">  *             *</span><br><span class="line">   *           *</span><br><span class="line">    *         *</span><br><span class="line">     *       *</span><br><span class="line">      *     *</span><br><span class="line">       *   *</span><br><span class="line">        * *</span><br><span class="line">         *</span><br></pre></td></tr></table></figure>思路分析：</li><li>由一个正等腰三角形和倒等腰三角形组成。</li><li>对上半部分等腰三角形左边挖空，中间挖空。</li><li>对下半部分倒等腰三角形左边挖空，中间挖空。下图为数字 0 替代挖空位置的分析思路。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000000</span>*</span><br><span class="line"><span class="number">00000000</span>*<span class="number">0</span>*</span><br><span class="line"><span class="number">0000000</span>*<span class="number">000</span>*</span><br><span class="line"><span class="number">000000</span>*<span class="number">00000</span>*</span><br><span class="line"><span class="number">00000</span>*<span class="number">0000000</span>*</span><br><span class="line"><span class="number">0000</span>*<span class="number">000000000</span>*</span><br><span class="line"><span class="number">000</span>*<span class="number">00000000000</span>*</span><br><span class="line"><span class="number">00</span>*<span class="number">0000000000000</span>*</span><br><span class="line"><span class="number">0</span>*<span class="number">000000000000000</span>*</span><br><span class="line"><span class="number">00</span>*<span class="number">0000000000000</span>*</span><br><span class="line"><span class="number">000</span>*<span class="number">00000000000</span>*</span><br><span class="line"><span class="number">0000</span>*<span class="number">000000000</span>*</span><br><span class="line"><span class="number">00000</span>*<span class="number">0000000</span>*</span><br><span class="line"><span class="number">000000</span>*<span class="number">00000</span>*</span><br><span class="line"><span class="number">0000000</span>*<span class="number">000</span>*</span><br><span class="line"><span class="number">00000000</span>*<span class="number">0</span>*</span><br><span class="line"><span class="number">000000000</span>*</span><br></pre></td></tr></table></figure></li></ol><h4 id="空心菱形-方法二：-对角线相等"><a href="#空心菱形-方法二：-对角线相等" class="headerlink" title="空心菱形 方法二： 对角线相等"></a>空心菱形 方法二： 对角线相等</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printLingxingRect2()</span><br><span class="line">&#123;</span><br><span class="line">    int r,c,row;</span><br><span class="line">    printf(<span class="string">"请输入菱形的对角线的长度:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;row);</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">1</span>;r&lt;=row*<span class="number">2</span><span class="number">-1</span>;r++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=row*<span class="number">2</span><span class="number">-1</span>;c++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((r&lt;=row &amp;&amp; (c==row+<span class="number">1</span>-r)) || c==row<span class="number">-1</span>+r)</span><br><span class="line">                printf(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((r&gt;=row &amp;&amp; (c==r-row+<span class="number">1</span>)) || (c==row+row*<span class="number">2</span><span class="number">-1</span>-r))</span><br><span class="line">                printf(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                printf(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 思路分析：</p><ol><li>根据菱形的对角线相等的数据知识，首先绘制的是一个矩形图案如图所示: 数字 0 为挖空项。</li><li>第一个条件先判断上半部分左边和右边星星位置。</li><li>第二个条件判断下半部分左边和右边星星的位置。</li><li>以上半部分为列  “c == row-1+r”  和 左边 “row+1-r” 对称。 </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">请输入菱形的对角线的长度:<span class="number">9</span></span><br><span class="line"><span class="number">00000000</span>*<span class="number">00000000</span></span><br><span class="line"><span class="number">0000000</span>*<span class="number">0</span>*<span class="number">0000000</span></span><br><span class="line"><span class="number">000000</span>*<span class="number">000</span>*<span class="number">000000</span></span><br><span class="line"><span class="number">00000</span>*<span class="number">00000</span>*<span class="number">00000</span></span><br><span class="line"><span class="number">0000</span>*<span class="number">0000000</span>*<span class="number">0000</span></span><br><span class="line"><span class="number">000</span>*<span class="number">000000000</span>*<span class="number">000</span></span><br><span class="line"><span class="number">00</span>*<span class="number">00000000000</span>*<span class="number">00</span></span><br><span class="line"><span class="number">0</span>*<span class="number">0000000000000</span>*<span class="number">0</span></span><br><span class="line">*<span class="number">000000000000000</span>*</span><br><span class="line"><span class="number">0</span>*<span class="number">0000000000000</span>*<span class="number">0</span></span><br><span class="line"><span class="number">00</span>*<span class="number">00000000000</span>*<span class="number">00</span></span><br><span class="line"><span class="number">000</span>*<span class="number">000000000</span>*<span class="number">000</span></span><br><span class="line"><span class="number">0000</span>*<span class="number">0000000</span>*<span class="number">0000</span></span><br><span class="line"><span class="number">00000</span>*<span class="number">00000</span>*<span class="number">00000</span></span><br><span class="line"><span class="number">000000</span>*<span class="number">000</span>*<span class="number">000000</span></span><br><span class="line"><span class="number">0000000</span>*<span class="number">0</span>*<span class="number">0000000</span></span><br><span class="line"><span class="number">00000000</span>*<span class="number">00000000</span></span><br></pre></td></tr></table></figure><h4 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//杨辉三角</span></span><br><span class="line"><span class="keyword">void</span> yanghui_Corner()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    int i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        arr[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        arr[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从第三行开始出现规律</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            arr[i][j]=arr[i<span class="number">-1</span>][j]+arr[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            printf(<span class="string">"%d\t"</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">3</span>    <span class="number">3</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">4</span>    <span class="number">6</span>    <span class="number">4</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">5</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">5</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">6</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">15</span>    <span class="number">6</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">7</span>    <span class="number">21</span>    <span class="number">35</span>    <span class="number">35</span>    <span class="number">21</span>    <span class="number">7</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">8</span>    <span class="number">28</span>    <span class="number">56</span>    <span class="number">70</span>    <span class="number">56</span>    <span class="number">28</span>    <span class="number">8</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">9</span>    <span class="number">36</span>    <span class="number">84</span>    <span class="number">126</span>    <span class="number">126</span>    <span class="number">84</span>    <span class="number">36</span>    <span class="number">9</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure><p>思路分析：</p><ol><li>从图中观察到规律，第二行开始，数字 2 是前一行的对应列和前一个位置相加所得结果。</li><li>每一行的第一个位置都是 1，每一行的最后一个位置都是 1。</li><li>第一步： 建立二维数组。先给每一行的的第一个位置和 n 行的第 n 个位置赋值1。</li><li>第二步：从第 3 行开始出现规律可得出 “arr[i][j]=arr[i-1][j]+arr[i-1][j-1]”  表达式。<h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#define len 9</span><br><span class="line"><span class="keyword">void</span> luoxuan()&#123;</span><br><span class="line">    int arr[len][len];</span><br><span class="line">    <span class="comment">//开始初始化，给数组赋值0</span></span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            arr[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//顶角确定了，我们可以算出第一行右边的数字</span></span><br><span class="line">    int circleTimes = len/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    int circelIndex = <span class="number">0</span>; <span class="comment">//圈的数量</span></span><br><span class="line">    <span class="comment">//赋值过程</span></span><br><span class="line">    <span class="keyword">while</span>(circleTimes&gt;<span class="number">0</span>)&#123;  <span class="comment">//测试时候，每一圈结束可以打印出看一下：&amp;&amp; circelIndex &lt;1</span></span><br><span class="line">        circelIndex ++;</span><br><span class="line">        printf(<span class="string">"第%d圈\n"</span>,circelIndex);</span><br><span class="line">        <span class="keyword">for</span>(int column = <span class="number">1</span>;column &lt;= len-circelIndex; column++)&#123;  <span class="comment">//往右排列</span></span><br><span class="line">            <span class="keyword">if</span>(column &gt;= circelIndex<span class="number">-1</span>)&#123;</span><br><span class="line">                arr[circelIndex<span class="number">-1</span>][column] = arr[circelIndex <span class="number">-1</span>][column<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int row = circelIndex; row&lt;= len-circelIndex; row++)&#123; <span class="comment">//往下排列，从第二行，第X-i 列开始</span></span><br><span class="line">            arr[row][len-circelIndex] = arr[row<span class="number">-1</span>][len-circelIndex] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int column = len-circelIndex<span class="number">-1</span>; column &gt;= circelIndex<span class="number">-1</span>; column--)&#123; <span class="comment">//往左排，下标递减1，值为后一个 + 1</span></span><br><span class="line">            arr[len-circelIndex][column] = arr[len-circelIndex][column+<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int row =len-circelIndex<span class="number">-1</span>; row &gt; circelIndex<span class="number">-1</span>; row--)&#123; <span class="comment">//往上排列</span></span><br><span class="line">            arr[row][circelIndex<span class="number">-1</span>] = arr[row+<span class="number">1</span>][circelIndex<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        circleTimes--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出二维数组</span></span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            printf(<span class="string">"%d\t"</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/luoxun_line.png" width="375px"></li></ol><p>思路分析：<br>由上图，当我们打印 9 行的时候，列也是 9 列。确定二维数组的长度。为了方便视觉上可以观察出每一次绕圈赋值的效果，可将二维数组每一个位置初始化赋值为 0。根据 9 行，我们确定绕圈数为 circleTimes = 5。确定循环条件之后，为每一次绕圈的二维数组某些位置赋值。依次从向右、向下、向左、向上进行赋值。circleTimes 圈数相对应减 1。</p><ol><li><p>往右排列：列的起始位置为1，条件为 len - circleIndex，值为相同行的前一列的值加 1。赋值的时候还需控制列大于等于 circleIndex 减 1。如图所示控制 32，56，72，80，81 的列起始位置。</p></li><li><p>往下排列：行的起始位置为第几圈的索引， 值为前一行的相同列的值加 1。</p></li><li><p>往左排列：列起始位置为 len - 第几圈 - 1，值为同行的后一列值加 1。</p></li><li><p>往上排列：行的起始位置为 len - 第几圈 -1，值为相同列的后一行值加 1。</p></li></ol><h4 id="蛇形矩阵1"><a href="#蛇形矩阵1" class="headerlink" title="蛇形矩阵1"></a>蛇形矩阵1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1 3 6 10 15</span></span><br><span class="line"><span class="comment">    2 5 9 14  </span></span><br><span class="line"><span class="comment">    4 8 13  </span></span><br><span class="line"><span class="comment">    7 12  </span></span><br><span class="line"><span class="comment">    11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Test3 t=<span class="keyword">new</span> Test3();</span><br><span class="line">        t.test(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">void</span> test(int n)  &#123;</span><br><span class="line">        int arr[][]=<span class="keyword">new</span> int[n][n]; </span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        int column=n;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; column; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">                     arr[i][j]=arr[i<span class="number">-1</span>][j]+i;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    arr[i][j]=arr[i][j<span class="number">-1</span>]+(i+<span class="number">1</span>+j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           column-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j]!=<span class="number">0</span>)</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>思路分析：</p><ol><li>第n行第一列值为前一行的第一列值加 n。</li><li>其他列赋值为前一列值加行 i 和列 j 再加 1。</li><li>控制第二层循环列的范围，列随行变化递减。</li></ol><h4 id="蛇形矩阵2"><a href="#蛇形矩阵2" class="headerlink" title="蛇形矩阵2"></a>蛇形矩阵2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">打印结果：</span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">15</span>    <span class="number">16</span>    <span class="number">28</span>    <span class="number">29</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>    <span class="number">5</span>    <span class="number">8</span>    <span class="number">14</span>    <span class="number">17</span>    <span class="number">27</span>    <span class="number">30</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">4</span>    <span class="number">9</span>    <span class="number">13</span>    <span class="number">18</span>    <span class="number">26</span>    <span class="number">31</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">10</span>    <span class="number">12</span>    <span class="number">19</span>    <span class="number">25</span>    <span class="number">32</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">11</span>    <span class="number">20</span>    <span class="number">24</span>    <span class="number">33</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">21</span>    <span class="number">23</span>    <span class="number">34</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">22</span>    <span class="number">35</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">36</span>   </span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Test4 t=<span class="keyword">new</span> Test4();</span><br><span class="line">        t.printData(t.test2(<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int[][] test2(int n)&#123;</span><br><span class="line">        int arr[][]=<span class="keyword">new</span> int[n][n];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j=<span class="number">0</span>,c=i;j&lt;=i&amp;&amp;c&gt;=<span class="number">0</span>;j++,c--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="keyword">if</span>(c==i)&#123;</span><br><span class="line">                         <span class="keyword">if</span>(c==<span class="number">0</span>)</span><br><span class="line">                            arr[c][j]=<span class="number">1</span>; <span class="comment">//arr[0][0] = 1</span></span><br><span class="line">                         <span class="keyword">else</span></span><br><span class="line">                           arr[c][j]=arr[c<span class="number">-1</span>][j]+<span class="number">1</span>; <span class="comment">//前一行加1</span></span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">else</span> </span><br><span class="line">                        arr[c][j]=arr[c+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>; <span class="comment">//后一行前一列加1</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     <span class="keyword">if</span>(c==i)</span><br><span class="line">                        arr[j][c]=arr[j][c<span class="number">-1</span>]+<span class="number">1</span>; <span class="comment">//前一列加1</span></span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                       arr[j][c]=arr[j<span class="number">-1</span>][c+<span class="number">1</span>]+<span class="number">1</span>;<span class="comment">//前一行后一列加1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> printData(int arr[][])&#123;</span><br><span class="line">        int n=arr.length;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; n; j++) &#123;    </span><br><span class="line">                <span class="keyword">if</span>(arr[i][j]&gt;=<span class="number">10</span>)</span><br><span class="line">                  System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                  <span class="keyword">if</span>(arr[i][j]!=<span class="number">0</span>)</span><br><span class="line">                  System.out.print(<span class="string">"0"</span>+arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>思路分析：<br>根据规律，根据行下标奇偶数拆分赋值。</p><ul><li>数字 {02,07,16,29} 为在前一列加 1。数字 {03,08,17,30} 为前一行的后一列加 1。</li><li>数字 {05,06,15,28} 为后一行的前一列加 1。数字 4 为前一行加 1。</li></ul><h4 id="蛇形矩阵2-1"><a href="#蛇形矩阵2-1" class="headerlink" title="蛇形矩阵2"></a>蛇形矩阵2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   1 </span></span><br><span class="line"><span class="comment">   5     2</span></span><br><span class="line"><span class="comment">   8     6     3</span></span><br><span class="line"><span class="comment">   10    9     7      4</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   观察</span></span><br><span class="line"><span class="comment">     arr[1][0]  arr[3][3] </span></span><br><span class="line"><span class="comment">     arr[2][0]  arr[3][2]          </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Test5 t=<span class="keyword">new</span> Test5();</span><br><span class="line">        t2.printData(t.test(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int[][] test(int n)&#123;</span><br><span class="line">        int arr[][]=<span class="keyword">new</span> int[n][n];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>,c=i;j&lt;n&amp;&amp;c&lt;n; j++,c++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(c==i)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(c==<span class="number">0</span>)</span><br><span class="line">                           arr[c][j]=<span class="number">1</span>; <span class="comment">//arr[0][0] = 1</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                           arr[c][<span class="number">0</span>]=arr[n<span class="number">-1</span>][n-c]+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        arr[c][j]=arr[c<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                    &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="趣味习题"><a href="#趣味习题" class="headerlink" title="趣味习题"></a>趣味习题</h3><h4 id="打印某年某月日历排版"><a href="#打印某年某月日历排版" class="headerlink" title="打印某年某月日历排版"></a>打印某年某月日历排版</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> showDateBookDetail()</span><br><span class="line">&#123;</span><br><span class="line">    int year, month;</span><br><span class="line">    int sumYearDays = <span class="number">0</span>;  <span class="comment">//该变量是统计到现在的总年数天数</span></span><br><span class="line">    int sumMonthDays = <span class="number">0</span>; <span class="comment">//月份总天数</span></span><br><span class="line">    int sumDays = <span class="number">0</span>;<span class="comment">//总天数</span></span><br><span class="line">    int week; <span class="comment">//星期</span></span><br><span class="line">    int y, i;</span><br><span class="line">    int monthArr[] = &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;  <span class="comment">//12个月的天数</span></span><br><span class="line">    printf(<span class="string">"请输入一个日期(列如 2019-10):"</span>);</span><br><span class="line">    scanf(<span class="string">"%d-%d"</span>, &amp;year, &amp;month);  <span class="comment">//年-月-日</span></span><br><span class="line">    <span class="comment">//思路: 1900年1月1日是星期一</span></span><br><span class="line">    <span class="keyword">for</span>(y = <span class="number">1900</span>; y &lt; year; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y % <span class="number">400</span> == <span class="number">0</span> || (y %  <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>))&#123;</span><br><span class="line">            sumYearDays += <span class="number">366</span>;     <span class="comment">//闰年 加366天</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sumYearDays += <span class="number">365</span>; <span class="comment">//平年 加365天</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//闰年的二月份</span></span><br><span class="line">    <span class="keyword">if</span>(year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) )&#123;</span><br><span class="line">        monthArr[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//累加今年的月份天数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; month<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        sumMonthDays += monthArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sumDays = sumYearDays + sumMonthDays + <span class="number">1</span>;  <span class="comment">//总天数= 年得总天数+月、号得总天数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//求本月的第一天是星期几 余数</span></span><br><span class="line">    week = sumDays % <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"日\t一\t二\t三\t四\t五\t六\n\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; week; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= monthArr[month - <span class="number">1</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"%d\t"</span> , i);</span><br><span class="line">        <span class="keyword">if</span>((i + week) % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">            printf(<span class="string">"\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">请输入一个日期(列如 <span class="number">2020</span><span class="number">-01</span>):<span class="number">2020</span><span class="number">-01</span></span><br><span class="line">日    一    二    三    四    五    六</span><br><span class="line"></span><br><span class="line">            <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span>    <span class="number">16</span>    <span class="number">17</span>    <span class="number">18</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">19</span>    <span class="number">20</span>    <span class="number">21</span>    <span class="number">22</span>    <span class="number">23</span>    <span class="number">24</span>    <span class="number">25</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">26</span>    <span class="number">27</span>    <span class="number">28</span>    <span class="number">29</span>    <span class="number">30</span>    <span class="number">31</span>    </span><br><span class="line"></span><br><span class="line">Program ended <span class="keyword">with</span> exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>思路分析：</p><ol><li>打印日历首先要确定某个月的 1 号是星期几。</li><li>根据 1900 年 1 月 1 日至某月 1 日的总天数 %7 所得余数就得知某月 1 号是星期几。</li><li>循环当月总天数 %7 进行换行，依次打印每一天的排版。</li></ol><h4 id="找出最长的单词"><a href="#找出最长的单词" class="headerlink" title="找出最长的单词"></a>找出最长的单词</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> countWords()&#123;</span><br><span class="line">    </span><br><span class="line">    char str[<span class="number">100</span>] = <span class="string">"hello, my name is gaogaoProgramer, welcome to come here!"</span>;</span><br><span class="line">    int index;</span><br><span class="line">    long len = strlen(str);</span><br><span class="line">    int spaceIndex = <span class="number">0</span>;  <span class="comment">//从第一个下标开始算</span></span><br><span class="line">    int recordMax = <span class="number">0</span>; <span class="comment">//单词空格之间下标最大差即为最长单词</span></span><br><span class="line">    int beforeIndex = <span class="number">0</span>,afterIndex = <span class="number">0</span>; <span class="comment">//定义最长单词的前空格，后空格</span></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; len; index++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[index] == <span class="number">32</span>)&#123; <span class="comment">//判断空格</span></span><br><span class="line">            <span class="keyword">if</span>(index - spaceIndex &gt; recordMax)&#123;</span><br><span class="line">                recordMax = index - spaceIndex;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//记录前下标和后下标。</span></span><br><span class="line">                beforeIndex = spaceIndex;</span><br><span class="line">                afterIndex = index;</span><br><span class="line">            &#125;</span><br><span class="line">            spaceIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"原始单词为：%s"</span>,str);</span><br><span class="line">    printf(<span class="string">"\n单词空格之间下标最大差:%d 前下标:%d,后下标:%d"</span>,recordMax,beforeIndex,afterIndex);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出找到的单词；</span></span><br><span class="line">    printf(<span class="string">"\n\n找到的最长度单词为："</span>);</span><br><span class="line">    int charIndex;</span><br><span class="line">    <span class="keyword">for</span>(charIndex = beforeIndex; charIndex&lt; afterIndex ; charIndex++)&#123;</span><br><span class="line">        printf(<span class="string">"%c"</span>,str[charIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：首先想到的是每个单词的划分简单规定认为是空格分隔即为一个单词。所以我们统计每一个空格的下标，记录空格下标的最大差值。记录起始下标和终止下标。这样就找到了一个最长的单词。</p><h4 id="颠倒一串英文句子"><a href="#颠倒一串英文句子" class="headerlink" title="颠倒一串英文句子"></a>颠倒一串英文句子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> revertString()</span><br><span class="line">&#123;</span><br><span class="line">    int i,start=<span class="number">0</span>;</span><br><span class="line">    char str[<span class="number">4096</span>] = <span class="string">"I am a SoftWare Programer"</span>;</span><br><span class="line">    char min1 = str[<span class="number">0</span>];</span><br><span class="line">    char t;</span><br><span class="line">    printf(<span class="string">"结果：%d \n"</span>,min1);</span><br><span class="line">    </span><br><span class="line">    int len = strlen(str);</span><br><span class="line">    int end = len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;=end) <span class="comment">//颠倒整个字符串</span></span><br><span class="line">    &#123;</span><br><span class="line">        t=str[start];</span><br><span class="line">        str[start]=str[end];</span><br><span class="line">        str[end]=t;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"颠倒后的字符串是：%s"</span>,str);</span><br><span class="line">    </span><br><span class="line">    start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)  <span class="comment">//颠倒一个单词</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="number">32</span>||str[i+<span class="number">1</span>]==<span class="number">0</span>)  <span class="comment">//如果是空格 或是结尾</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==len<span class="number">-1</span>)  <span class="comment">//判断是否最后一个</span></span><br><span class="line">                end=i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                end=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(start&lt;=end)  <span class="comment">//调换空格与空格之间</span></span><br><span class="line">            &#123;</span><br><span class="line">                t=str[start];</span><br><span class="line">                str[start]=str[end];</span><br><span class="line">                str[end]=t;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            start=i+<span class="number">1</span>; <span class="comment">//起始位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"\n输出："</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"%c"</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：C 语言版本首先我们想到的是倒转整个字符串，然后再根据空格分割循环依次再倒转每一个单词，这样就实现了倒转整个句子。</p><h4 id="颠倒一串英文句子-Java版本"><a href="#颠倒一串英文句子-Java版本" class="headerlink" title="颠倒一串英文句子 Java版本"></a>颠倒一串英文句子 Java版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">reverseString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旋转字符串  如： I am a student  </span></span><br><span class="line"><span class="comment">     * 结果为： student a am I </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> reverse(<span class="built_in">String</span> arr[])</span><br><span class="line">    &#123;</span><br><span class="line">        int start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (int end = arr.length - <span class="number">1</span>; start &lt; end; end--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">String</span> temp = arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n颠倒后的结果为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">     System.out.print((<span class="keyword">new</span> StringBuilder(<span class="built_in">String</span>.valueOf(arr[i]))).append(<span class="string">" "</span>).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入一串字符"</span>);</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="built_in">String</span> str=input.nextLine();</span><br><span class="line">        <span class="built_in">String</span> arr[]=str.split(<span class="string">" "</span>);</span><br><span class="line">         reverse(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：Java 版本的倒转思路比较简单。我们可以直接利用字符窜方法根据空格分割成一个字符窜数组。然后再针对数组元素进行倒转调换位置。</p><h4 id="生成不重复的随机数"><a href="#生成不重复的随机数" class="headerlink" title="生成不重复的随机数"></a>生成不重复的随机数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标记法</span></span><br><span class="line">public <span class="keyword">void</span> randomTest2()&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    long[] arr =<span class="keyword">new</span> long[<span class="number">15</span>];</span><br><span class="line">    boolean flag[] = <span class="keyword">new</span> boolean[<span class="number">15</span>];</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(int index=<span class="number">1</span>; index&lt;flag.length; index++)&#123;</span><br><span class="line">        flag[index] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        int num = r.nextInt(<span class="number">15</span>);</span><br><span class="line">        <span class="keyword">if</span>(!flag[num])&#123; <span class="comment">//只需判断标记数组中对应的数字位置存储的状态就可以知道是否产生过该随机数</span></span><br><span class="line">            arr[i] = num;</span><br><span class="line">            flag[num] = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出15个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析： 生成不重复的小范围数字，我想到有两种方案。 </p><ul><li>第一种是每一次生成，要循环去检验已生成的随机数数组中是否包含该数字。</li><li>第二种方案是用另外一个数组布尔值来存储，当已生成随机某数时，就把对应的布尔值数组设置随机下标数值为 true。当下次再生成的时候，就可以直接命中无需查找数组元素。 这也是借鉴 map 存取数据的方式，直接根据 key 命中数据。key 则相当于那个随机数。</li></ul><h4 id="统计班级成绩排名-java版本"><a href="#统计班级成绩排名-java版本" class="headerlink" title="统计班级成绩排名 java版本"></a>统计班级成绩排名 java版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SameSCore</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计同成绩的人数</span></span><br><span class="line"><span class="comment">     * 推断过程： 第一名找出后 ，统计和第一名相等的分数有几个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">args</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        int arr[] = &#123; <span class="number">65</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">80</span> &#125;;</span><br><span class="line">        Arrays.sort(arr); <span class="comment">// 升序排列</span></span><br><span class="line">        int len = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入前多少名?"</span>);</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        int num=input.nextInt();</span><br><span class="line">        </span><br><span class="line">        int count[] = <span class="keyword">new</span> int[num+<span class="number">1</span>];  <span class="comment">//由于第1个不取，所以长度比实际的加1 ，存储第多少名的   数据 </span></span><br><span class="line">        int score[]=<span class="keyword">new</span> int[len+<span class="number">1</span>];   <span class="comment">//成绩 </span></span><br><span class="line">        <span class="comment">//第几名 多少个同学</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (int k = <span class="number">1</span>; k &lt;= count.length<span class="number">-1</span>; k++) &#123;</span><br><span class="line">            int hasCount=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                hasCount+=count[j];   <span class="comment">//已经统计的个数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (int i = len - hasCount; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">//统计第几名重复了几个</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] == arr[len - hasCount]) &#123;</span><br><span class="line">                    score[k]=arr[len - hasCount];  <span class="comment">//第几名的分数</span></span><br><span class="line">                    count[k]++;  <span class="comment">//第几名的个数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结果：</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;count.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"第"</span> + i + <span class="string">"名,成绩为"</span>+score[i]+<span class="string">"："</span> + count[i]);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"第"</span>+i+<span class="string">"名超出范围哦!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计班级成绩排名-C-版本"><a href="#统计班级成绩排名-C-版本" class="headerlink" title="统计班级成绩排名 C 版本"></a>统计班级成绩排名 C 版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> statisticsScoreDescCount ()&#123;</span><br><span class="line"></span><br><span class="line">    int arr[<span class="number">10</span>]=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">60</span>,<span class="number">76</span>,<span class="number">85</span>,<span class="number">85</span>,<span class="number">96</span>,<span class="number">96</span>&#125;;  <span class="comment">//已经升序的数组</span></span><br><span class="line">    char names[<span class="number">10</span>][<span class="number">20</span>]=&#123;<span class="string">"jack"</span>,<span class="string">"running"</span>,<span class="string">"lucy"</span>,<span class="string">"mary"</span>,<span class="string">"hong"</span>,<span class="string">"liu"</span>,<span class="string">"wike"</span>,<span class="string">"smith"</span>,<span class="string">"boss"</span>,<span class="string">"younth"</span>&#125;;</span><br><span class="line">    int hasCount=<span class="number">0</span>; <span class="comment">//已经统计了的个数</span></span><br><span class="line">    int count[ScoreSystemArrLen+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//第一个num[0]不要，记录第几名的个数。</span></span><br><span class="line">    int score[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//统计成绩  score[1]=96  score[2]=85  记录第几名的成绩</span></span><br><span class="line">    int k,j,i,c=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=ScoreSystemArrLen;k++)  <span class="comment">//处理过程</span></span><br><span class="line">    &#123;</span><br><span class="line">        hasCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            hasCount+=count[j];  <span class="comment">// 统计前面出现的总个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">9</span>-hasCount; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == arr[<span class="number">9</span> - hasCount])</span><br><span class="line">            &#123;</span><br><span class="line">                score[k]=arr[<span class="number">9</span> - hasCount];  <span class="comment">//记录具体第几名的分数</span></span><br><span class="line">                count[k]++;  <span class="comment">//记录具体第几名的个数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;ScoreSystemArrLen+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hasCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)<span class="comment">// 统计前面出现的总个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            hasCount+=count[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count[i] ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n第 %d 名,个数%d,成绩为:%d\n"</span>,i,count[i],score[i]);</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>,k=<span class="number">10</span>-hasCount;c&lt;=count[i];k++,c++)    <span class="comment">//count[i] 是 当前第几名的个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">"名字：%s\n"</span>,names[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第 <span class="number">1</span> 名,个数<span class="number">2</span>,成绩为:<span class="number">96</span></span><br><span class="line">名字：boss</span><br><span class="line">名字：younth</span><br><span class="line"></span><br><span class="line">第 <span class="number">2</span> 名,个数<span class="number">2</span>,成绩为:<span class="number">85</span></span><br><span class="line">名字：wike</span><br><span class="line">名字：smith</span><br><span class="line"></span><br><span class="line">第 <span class="number">3</span> 名,个数<span class="number">1</span>,成绩为:<span class="number">76</span></span><br><span class="line">名字：liu</span><br><span class="line"></span><br><span class="line">第 <span class="number">4</span> 名,个数<span class="number">2</span>,成绩为:<span class="number">60</span></span><br><span class="line">名字：mary</span><br><span class="line">名字：hong</span><br><span class="line"></span><br><span class="line">第 <span class="number">5</span> 名,个数<span class="number">1</span>,成绩为:<span class="number">50</span></span><br><span class="line">名字：lucy</span><br><span class="line"></span><br><span class="line">第 <span class="number">6</span> 名,个数<span class="number">1</span>,成绩为:<span class="number">30</span></span><br><span class="line">名字：running</span><br><span class="line"></span><br><span class="line">第 <span class="number">7</span> 名,个数<span class="number">1</span>,成绩为:<span class="number">20</span></span><br><span class="line">名字：jack</span><br></pre></td></tr></table></figure><p>思路分析：假设有 10 个同学，则大循环 10 次。每次检查，分别将已统计的学生个数 hasCount 计算出来，然后从剩下的同学中取得其成绩标记为下一名的分数。内循环依次判断剩下同学的分数是否和本次名数的分相等，如果相等则为重复分数，记录重复分数的个数 count[k]++ , k 变量为排名。</p><h4 id="报数123，报数3的童鞋退出，最后留下的是哪个同学。-Java-版本"><a href="#报数123，报数3的童鞋退出，最后留下的是哪个同学。-Java-版本" class="headerlink" title="报数123，报数3的童鞋退出，最后留下的是哪个同学。 Java 版本"></a>报数123，报数3的童鞋退出，最后留下的是哪个同学。 Java 版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TheLastPerson</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span> args[])</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"报数123，报3的同学退出，最后一个留下的同学"</span>);</span><br><span class="line">        System.out.println(<span class="string">"请输入总共有几个同学"</span>);</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        int num = input.nextInt();</span><br><span class="line"></span><br><span class="line">        boolean bl[] = <span class="keyword">new</span> boolean[num];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; bl.length; i++)&#123;</span><br><span class="line">            bl[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        int index = <span class="number">0</span>;</span><br><span class="line">        int lastnum = num;</span><br><span class="line">        int countNum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (lastnum &gt; <span class="number">1</span>)  <span class="comment">//最后留下来的人</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bl[index] &amp;&amp; ++countNum == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                countNum = <span class="number">0</span>; <span class="comment">//报数3后需回归</span></span><br><span class="line">                bl[index] = <span class="literal">false</span>; <span class="comment">//将报数为3的人状态标记为false</span></span><br><span class="line">                lastnum--; <span class="comment">//把队列人数减1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++index == num)  <span class="comment">//当报数到排在最后一个位置的人，第一个接着最后一个报数</span></span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (bl[i])</span><br><span class="line">                System.out.println((<span class="keyword">new</span> StringBuilder(<span class="string">"最后留下的是第"</span>)).append(i + <span class="number">1</span>).append(<span class="string">"个同学"</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：</p><ol><li>根据全队员人数定义一个标记布尔类型的数组。标记所有人为 true 都在队列的意思。</li><li>当报数 3 的人标记为 false.  人数出队，剩余人数减 1。接着紧邻下一个队员报数 1。 每一次报数到最后当前队剩余人数的最后一个人的时候，接着再从下标为 0 的队员报数。直到最后队列剩余人数为 1。</li><li>最后再从布尔类型的数组中找出标记为 true 的位置，即可找到是哪一个同学。</li></ol><h4 id="报数-123，报数-3-的童鞋退出，最后留下的是哪个同学。-C-语言版本"><a href="#报数-123，报数-3-的童鞋退出，最后留下的是哪个同学。-C-语言版本" class="headerlink" title="报数 123，报数 3 的童鞋退出，最后留下的是哪个同学。 C 语言版本"></a>报数 123，报数 3 的童鞋退出，最后留下的是哪个同学。 C 语言版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#define N 28</span><br><span class="line">#define ScoreSystemArrLen 10</span><br><span class="line">#define MaxLen 50</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> findStudentWhichAskNumber()</span><br><span class="line">&#123;</span><br><span class="line">    char S1S8[N][<span class="number">15</span>]=&#123;</span><br><span class="line">        <span class="string">"廖同学"</span>, <span class="string">"吴同学"</span>, <span class="string">"陈聪同学"</span>, <span class="string">"颜同学"</span>, <span class="string">"梅同学"</span>, <span class="string">"昌同学"</span>,</span><br><span class="line">        <span class="string">"刘同学"</span>, <span class="string">"钟同学"</span>, <span class="string">"黄同学"</span>, <span class="string">"生同学"</span>, <span class="string">"伟同学"</span>, <span class="string">"平同学"</span>,</span><br><span class="line">        <span class="string">"余广同学"</span>, <span class="string">"朱宁同学"</span>, <span class="string">"陈鸿同学"</span>, <span class="string">"王同学"</span>, <span class="string">"东同学"</span>, <span class="string">"雄同学"</span>,</span><br><span class="line">        <span class="string">"张同学"</span>, <span class="string">"林同学"</span>, <span class="string">"梁同学"</span>, <span class="string">"婷同学"</span>, <span class="string">"维同学"</span>, <span class="string">"英同学"</span>,</span><br><span class="line">        <span class="string">"黄同学1"</span>, <span class="string">"斌同学"</span>, <span class="string">"全同学"</span>, <span class="string">"戴同学"</span>&#125;;</span><br><span class="line">    printf(<span class="string">"【报数游戏】规则：一群同学排队，从规定的第几个同学开始报数1，依次2，3。报数3的同学出队。求最后剩下的人是谁？\n\n"</span>);</span><br><span class="line">    char bl[N];</span><br><span class="line">    int i,n;</span><br><span class="line">    int index;     <span class="comment">//索引，轮到第几个人了</span></span><br><span class="line">    int lastnum=N;  <span class="comment">//剩余人数</span></span><br><span class="line">    int countNum=<span class="number">0</span>; <span class="comment">//报的数字</span></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"%s\t"</span>,S1S8[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123; bl[i]=<span class="number">1</span>;  &#125; <span class="comment">//28个人都参与报数</span></span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"\r\r请输入从第几个人开始报数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    printf(<span class="string">"\n从%s开始报数,"</span>,S1S8[n<span class="number">-1</span>]);</span><br><span class="line">    index=n<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(lastnum&gt;<span class="number">1</span>)  <span class="comment">//如果剩余人数大于1 说明还要继续报数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bl[index]) <span class="comment">//表示还没报3的人。</span></span><br><span class="line">        &#123;</span><br><span class="line">            countNum++;</span><br><span class="line">            <span class="keyword">if</span>(countNum==<span class="number">3</span>)</span><br><span class="line">            &#123;   countNum=<span class="number">0</span>;</span><br><span class="line">                bl[index]=<span class="number">0</span>; <span class="comment">//标记报了3</span></span><br><span class="line">                lastnum--;  <span class="comment">//剩余人数-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index++; <span class="comment">//下一个人</span></span><br><span class="line">        <span class="keyword">if</span>(index==N)  <span class="comment">//报到最后，回来继续报数</span></span><br><span class="line">            index=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bl[i])</span><br><span class="line">            printf(<span class="string">"最后留下来的是：%s"</span>,S1S8[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【报数游戏】规则：一群同学排队，从规定的第几个同学开始报数<span class="number">1</span>，依次<span class="number">2</span>，<span class="number">3</span>。报数<span class="number">3</span>的同学出队。求最后剩下的人是谁？</span><br><span class="line"></span><br><span class="line">廖同学    吴同学    陈聪同学    颜同学    梅同学    昌同学    刘同学    钟同学    黄同学    生同学    伟同学    平同学    余广同学    朱宁同学    陈鸿同学    王同学    东同学    雄同学    张同学    林同学    梁同学    婷同学    维同学    英同学    黄同学<span class="number">1</span>    斌同学    全同学    戴同学    </span><br><span class="line"></span><br><span class="line">请输入从第几个人开始报数：<span class="number">6</span></span><br><span class="line"></span><br><span class="line">从昌同学开始报数,最后留下来的是：戴同学</span><br><span class="line"></span><br><span class="line">Program ended <span class="keyword">with</span> exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="模拟对象层级树结构"><a href="#模拟对象层级树结构" class="headerlink" title="模拟对象层级树结构"></a>模拟对象层级树结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查找树节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LookWord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private ArrayList&lt;TreeBean&gt; treeList = <span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        LookWord lw = <span class="keyword">new</span> LookWord();</span><br><span class="line">        lw.init();</span><br><span class="line"><span class="comment">//      lw.findAll(lw.treeList); //查找所有</span></span><br><span class="line">        lw.findWho(<span class="string">"111"</span>,lw.treeList); <span class="comment">//查找某一个树节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> findWho(<span class="built_in">String</span> id,ArrayList&lt;TreeBean&gt; ts) &#123;</span><br><span class="line">        <span class="keyword">for</span> (TreeBean t : ts) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t.getId().equals(id)&amp;&amp;t.getChildren()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                  findAll(t.getChildren());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(t.getChildren()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    findWho(id,t.getChildren());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> findAll(ArrayList&lt;TreeBean&gt; findList) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; findList.size(); i++) &#123;</span><br><span class="line">            TreeBean tb = findList.get(i);</span><br><span class="line">            System.out.println(tb.toString());</span><br><span class="line">            <span class="keyword">if</span> (tb.getChildren() != <span class="literal">null</span>) &#123;</span><br><span class="line">                findAll(tb.getChildren());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始数据</span></span><br><span class="line">    private <span class="keyword">void</span> init() &#123;</span><br><span class="line">        ArrayList&lt;TreeBean&gt; children111 = <span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line">        TreeBean tb111 = <span class="keyword">new</span> TreeBean(<span class="string">"1111"</span>, <span class="string">"one1111"</span>, <span class="string">"111"</span>);</span><br><span class="line">        TreeBean tb112 = <span class="keyword">new</span> TreeBean(<span class="string">"1112"</span>, <span class="string">"one1112"</span>, <span class="string">"111"</span>);</span><br><span class="line">        children111.add(tb111);</span><br><span class="line">        children111.add(tb112);</span><br><span class="line">        TreeBean tb11 = <span class="keyword">new</span> TreeBean(<span class="string">"111"</span>, <span class="string">"one111"</span>, <span class="string">"11"</span>);</span><br><span class="line">        tb11.setChildren(children111);</span><br><span class="line">        TreeBean tb12 = <span class="keyword">new</span> TreeBean(<span class="string">"112"</span>, <span class="string">"one112"</span>, <span class="string">"11"</span>);</span><br><span class="line">        TreeBean tb13 = <span class="keyword">new</span> TreeBean(<span class="string">"113"</span>, <span class="string">"one113"</span>, <span class="string">"11"</span>);</span><br><span class="line">        ArrayList&lt;TreeBean&gt; children11 = <span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line">        children11.add(tb11);</span><br><span class="line">        children11.add(tb12);</span><br><span class="line">        children11.add(tb13);</span><br><span class="line"></span><br><span class="line">        TreeBean tp11 = <span class="keyword">new</span> TreeBean(<span class="string">"11"</span>, <span class="string">"one1"</span>, <span class="string">"1"</span>);</span><br><span class="line">        tp11.setChildren(children11);</span><br><span class="line">        TreeBean tp12 = <span class="keyword">new</span> TreeBean(<span class="string">"12"</span>, <span class="string">"one2"</span>, <span class="string">"1"</span>);</span><br><span class="line">        ArrayList&lt;TreeBean&gt; children1 = <span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line">        children1.add(tp11);</span><br><span class="line">        children1.add(tp12);</span><br><span class="line"></span><br><span class="line">        TreeBean tb1 = <span class="keyword">new</span> TreeBean(<span class="string">"1"</span>, <span class="string">"one"</span>, <span class="string">"0"</span>);</span><br><span class="line">        tb1.setChildren(children1);</span><br><span class="line">        ArrayList&lt;TreeBean&gt; children2 = <span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line">        children2.add(<span class="keyword">new</span> TreeBean(<span class="string">"21"</span>, <span class="string">"two1"</span>, <span class="string">"2"</span>));</span><br><span class="line">        children2.add(<span class="keyword">new</span> TreeBean(<span class="string">"22"</span>, <span class="string">"two2"</span>, <span class="string">"2"</span>));</span><br><span class="line"></span><br><span class="line">        TreeBean tb2 = <span class="keyword">new</span> TreeBean(<span class="string">"2"</span>, <span class="string">"two"</span>, <span class="string">"0"</span>);</span><br><span class="line">        tb2.setChildren(children2);</span><br><span class="line">        treeList.add(tb1);</span><br><span class="line">        treeList.add(tb2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TreeBean 的树结构模型</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TreeBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">String</span> id;</span><br><span class="line">    private <span class="built_in">String</span> text;</span><br><span class="line">    private <span class="built_in">String</span> pid;</span><br><span class="line">    private ArrayList&lt;TreeBean&gt; children=<span class="keyword">new</span> ArrayList&lt;TreeBean&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析： 树结构最重要的一点是递归思想。无论查找全部还是查找单独某一个树节点，都需得到他的子节点。遍历子节点时候根据 children 可得到是否还有三级子节点 有则递归调用。注意父节点与子节点的绑定关系即可。</p><h3 id="基础排序"><a href="#基础排序" class="headerlink" title="基础排序"></a>基础排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">* 插入排序，效率大于选择排序。</span><br><span class="line">* 方法：将一个记录插入到已排好序的有序表（有可能是空表）中</span><br><span class="line">*  每次和最后一个比较，若比前面小则再换位置，直到不比前面小。</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">public static void insert(int arr[])</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    int count=0;</span></span><br><span class="line"><span class="regexp">    int pos ;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    for ( int i = 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">        pos=count; /</span><span class="regexp">/一开始进来就是和最后一个数比</span></span><br><span class="line"><span class="regexp">        int index=i;</span></span><br><span class="line"><span class="regexp">        while( arr[index]&lt;arr[pos ]&amp;&amp;pos&gt;=0)&#123; /</span><span class="regexp">/排序数 如果比已经排好的最后一个数小则，和前一个比较</span></span><br><span class="line"><span class="regexp">            int t=arr [pos];</span></span><br><span class="line"><span class="regexp">            arr[pos ]=arr[index];</span></span><br><span class="line"><span class="regexp">            arr[index]=t;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            index-=1;  /</span><span class="regexp">/注意：这是个换了位置的数</span></span><br><span class="line"><span class="regexp">            pos--; /</span><span class="regexp">/准备和前一个比较</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        count++;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>思路分析：将一个记录插入到已排好序的有序表（有可能是空表）中<br>每次和最后一个比较，若比前面小则再换位置，直到不比前面小。</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 直接选择排序</span></span><br><span class="line"><span class="comment">* 方法：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，</span></span><br><span class="line"><span class="comment">* 顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> directChoose(int[] arr) &#123;</span><br><span class="line">    int index;</span><br><span class="line">    int temp;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">1</span>;j&lt;=arr.length-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[index])&#123;</span><br><span class="line">                index=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=arr[arr.length-i];</span><br><span class="line">        arr[arr.length-i]=arr[index];</span><br><span class="line">        arr[index]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：每一趟从待排序的数据元素中选出最小（或最大）的一个元素，<br>顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完。</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每一趟排序 都可以找出最大或最小值，下一趟排序的时候，就可以排除最后已筛选出的数，和剩下的数比较。冒泡排序每一轮都是相邻的两数在比较。</span></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> maopao(int arr[])</span><br><span class="line">&#123;</span><br><span class="line">    int temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (int j = i + <span class="number">1</span>; j &lt; arr.length; j++) <span class="comment">//n个数  比较n-1轮   第n轮 比较n-1次， 第一轮可找出最大值。</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：每一趟排序 都可以找出最大或最小值，下一趟排序的时候，就可以排除最后已筛选出的数，和剩下的数比较。冒泡排序每一轮都是相邻的两数在比较。</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        long start=System.currentTimeMillis();</span><br><span class="line">        int arr[] =&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">11</span>,<span class="number">99</span>,<span class="number">54</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        QuickSort t=<span class="keyword">new</span> QuickSort();</span><br><span class="line">        t.quicksort(arr,<span class="number">0</span>,arr.length<span class="number">-1</span>);</span><br><span class="line">        t.print(arr);</span><br><span class="line">        System.out.println(<span class="string">"快速排序:"</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">void</span> quicksort(int arr[], int left, int right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            int key = arr[left];</span><br><span class="line">            int low = left;</span><br><span class="line">            int high = right;</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt; key)&#123;</span><br><span class="line">                            high--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[low] = arr[high];</span><br><span class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt; key)&#123;</span><br><span class="line">                            low++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[high] = arr[low];</span><br><span class="line">             &#125;</span><br><span class="line">              arr[low] = key;</span><br><span class="line">              quicksort(arr,left,low<span class="number">-1</span>);</span><br><span class="line">              quicksort(arr,low+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> print(int arr[]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：<br>每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，将大于等于基准点的数全部放到基准点的右边。巧妙运用分治思想。</p><h4 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HalfSelect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分法查找</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment">     *            数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment">     *            要查找的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>返回位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private <span class="keyword">static</span> int halfLook(int[] arr, int num) &#123;<span class="comment">// 二分法查找</span></span><br><span class="line">        int middle;</span><br><span class="line">        int start = <span class="number">0</span>, last = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; arr[start] || num &gt; arr[last])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            middle = (last + start) / <span class="number">2</span>; <span class="comment">// 求中间位置</span></span><br><span class="line">            <span class="keyword">if</span> (start &gt; last) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; arr[middle]) &#123;</span><br><span class="line">                start = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; arr[middle]) &#123;</span><br><span class="line">                last = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 相等则返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> halfShow(int arr[]) &#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入你要查找的数:"</span>);</span><br><span class="line">        int n = input.nextInt();</span><br><span class="line">        int w = halfLook(arr, n);</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="number">0</span>)</span><br><span class="line">            System.out.println((<span class="keyword">new</span> StringBuilder(<span class="string">"位置："</span>)).append(w).toString());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"没有该数！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：二分法查找前提是数据要先排好序，然后才能折半查找。不断取得中间位置的数字进行比较查询出目标数。</p><h3 id="Json-格式的校验"><a href="#Json-格式的校验" class="headerlink" title="Json 格式的校验"></a>Json 格式的校验</h3><p>在讲解之前，我们先熟悉一下 Promise.all()方法的用法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> testPromiseAll() &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">washFood</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第一步：洗菜'</span>);</span><br><span class="line">        <span class="keyword">let</span> hasError = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(hasError)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"发现了一只虫子！洗掉它。"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'菜洗干净了。'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cutFood</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第二步：切菜'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">//做一些异步操作</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> cutFoodHasError = <span class="literal">true</span>;  <span class="comment">//控制默契切菜时 是否发生异常</span></span><br><span class="line">                <span class="keyword">if</span>(cutFoodHasError)&#123;</span><br><span class="line">                    reject(<span class="string">"呜呜~ 割到手了，流血！"</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    resolve(<span class="string">'切好了菜。'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* 试试打开这里的注释</span></span><br><span class="line"><span class="comment">        .catch(error=&gt;&#123;</span></span><br><span class="line"><span class="comment">            console.log("切菜异常:"+error); //异常本身就是返回resolve状态，值是null</span></span><br><span class="line"><span class="comment">            console.log("用创口贴止血，继续做菜。");</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cooking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'做饭第三步：炒菜'</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">//做一些异步操作</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve(<span class="string">'菜已做好!'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组里，如果放Promise 一定要返回状态。 </span></span><br><span class="line">    <span class="built_in">Promise</span>.all([washFood(), cutFood(),cooking()])</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上桌，吃饭了：'</span>+result);</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"菜没做成，出现了小事故:"</span>+error);</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     结果：</span></span><br><span class="line"><span class="comment">     1. 当cutFoodHasError = true；打印如下结果：</span></span><br><span class="line"><span class="comment">        菜没做成，出现了小事故:呜呜~ 割到手了，流血！</span></span><br><span class="line"><span class="comment">     2. 当cutFoodHasError = true 且 cutFood方法里的Promise有异常捕捉时： </span></span><br><span class="line"><span class="comment">        切菜异常:呜呜~ 割到手了，流血！</span></span><br><span class="line"><span class="comment">        上桌，吃饭了：菜洗干净了！,,菜已做好</span></span><br><span class="line"><span class="comment">     3. 当cutFoodHasError = false </span></span><br><span class="line"><span class="comment">        上桌，吃饭了：菜洗好了。切好了菜。菜已做好！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    Promise.all使用总结：</span></span><br><span class="line"><span class="comment">    数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变</span></span><br><span class="line"><span class="comment">    当所有的子Promise都完成，该Promise完成，返回值是全部值得数组</span></span><br><span class="line"><span class="comment">    有任何一个失败，该Promise失败，返回值是第一个先失败的子Promise结果 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong> 服务返回 json 字符串 result </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下注释很重要：采用分治和递归的思想。另外结合Promise.all方法 做一个异步队列控制。</span></span><br><span class="line">boolean isJsonFlag =  checkJsonObject(result);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkJsonObject</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jsonFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>思路分析：</p><ol><li>获取每一个 key, 和对应 value 。</li><li>对 value 进行类型判断,如果是 [ ] 数组类型，foreach 每一项判断是否为 { }  对象 ，如果是 递归调用 checkObject(itemObject)  方法；对于 value 为普通类型时，只需更具正则或算法匹配是否符合 key: value 格式。</li><li>根据服务端返回的 result 字符窜分割后依据 第一层级的 value类型为 [] 数组类型的个数的多少，分批用类似 Promise.all 方法 异步执行多个 Promise，一旦有一个校验返回 reject，则立即是返回 false。判断不匹配。无需等待所有的 Promise 任务执行完成。而全部 Promise 校验正确才会返回 true;</li></ol><p>总结：通过本 chat 的学习和手动敲码实践，你将收获到对分治和递归的思想的理解。对状态的标记思想，以及对图形的观察分析思路。重点是你的思维逻辑得到了提升！ 如果本 chat 对你有用，那我就太高兴了。最后，感谢大伙的支持！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime 到底是个什么鬼</title>
      <link href="/2020/01/07/iOSRuntime/"/>
      <url>/2020/01/07/iOSRuntime/</url>
      
        <content type="html"><![CDATA[<h3 id="Runtime-到底是个什么鬼？"><a href="#Runtime-到底是个什么鬼？" class="headerlink" title="Runtime 到底是个什么鬼？"></a>Runtime 到底是个什么鬼？</h3><p>Runtime是Objective-C中底层的一套C语言API，是一个将C语言转化为面向对象语言的拓展。Runtime的一切都围绕两个中心：<strong>类的动态配置</strong> 和 <strong>消息传递</strong></p><h4 id="能干啥？"><a href="#能干啥？" class="headerlink" title="能干啥？"></a>能干啥？</h4><ul><li>动态的在内存中创建一个类</li><li>给类增加一个属性</li><li>给类增加一个协议实现</li><li>给类增加一个方法实现IMP</li><li>遍历一个类的所有成员变量、属性和方法等</li></ul><ul><li>拦截系统自带的方法调用（Method Swizzling黑魔法）</li><li>将某些OC代码转化为Runtime代码，探究底层。如block的实现原理</li><li>实现给分类增加属性</li><li>实现NSCoding的自动归档和接档</li><li>实现字典的模型和自动转换</li></ul><a id="more"></a><h6 id="基本元素的认识"><a href="#基本元素的认识" class="headerlink" title="基本元素的认识"></a>基本元素的认识</h6><ol><li>class 和 id  都被称为类对象。</li><li>selector 可以理解为方法的ID, 通过 @selector 可以找到方法的地址。</li><li>IMP是implementation  被称为 函数指针。</li><li>Method 代表类中的某个方法类型。</li><li>lvar 代表 实例变量类型。</li><li>objc_property_t 是属性。 定义一个属性：typedef struct objc_property *objc_property_t;</li><li>Category 分类。 可动态为已知类添加新的方法。</li></ol><h5 id="消息的传递过程"><a href="#消息的传递过程" class="headerlink" title="消息的传递过程"></a>消息的传递过程</h5><p>调用实例方法时，它会首先在自身isa指针指向的类（class）methodLists中查找该方法，如果找不到则会通过class的super_class指针找到父类的类对象结构体，然后从methodLists中查找该方法，如果仍找不到则继续通过super_class向上查找知道metaclass</p><h5 id="实现例子"><a href="#实现例子" class="headerlink" title="实现例子"></a>实现例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 遍历类中所有的变量</span><br><span class="line">-(void) getALLVariable&#123; </span><br><span class="line"></span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Ivar *allVariables &#x3D; class_copyIvarList([Student class], &amp;count);</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0 ; i&lt; count; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F;遍历每一个变量,包括名称和类型</span><br><span class="line">        Ivar ivar &#x3D; allVariables[i];</span><br><span class="line">        const char *VariableName &#x3D; ivar_getName(ivar);</span><br><span class="line">        const char *VariableType &#x3D; ivar_getTypeEncoding(ivar);</span><br><span class="line">        NSLog(@&quot;(Name:%s)-------(Type:%s)&quot;,VariableName,VariableType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是想遍历属性列表可以将<code>class_copyIvarList</code>替换为<code>class_copyPropertyList</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;遍历类的方法</span><br><span class="line">-(void) getAllMethod&#123;</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Method *AllMethods &#x3D; class_copyMethodList([Student class], &amp;count);</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0 ; i&lt;count; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Method method &#x3D; AllMethods[i];</span><br><span class="line">        &#x2F;&#x2F;获取SEL：SEL类型,即获取方法选择器@selector()</span><br><span class="line">        SEL sel &#x3D; method_getName(method);</span><br><span class="line">        &#x2F;&#x2F;得到sel的方法名：以字符串格式获取sel的name，也即@selector()中的方法名称</span><br><span class="line">        const char *methodName &#x3D; sel_getName(sel);</span><br><span class="line">        NSLog(@&quot;-------the method :%s&quot;,methodName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态改变一个类变量的数值"><a href="#动态改变一个类变量的数值" class="headerlink" title="动态改变一个类变量的数值"></a>动态改变一个类变量的数值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;改变Person变量的数值</span><br><span class="line">-(void) changeVariable&#123;</span><br><span class="line">    NSLog(@&quot;before change person : %@ -------&quot;,_person);</span><br><span class="line"></span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Ivar *allList &#x3D; class_copyIvarList([Person class], &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i&lt; count; i++) &#123;</span><br><span class="line">        Ivar var &#x3D; allList[i];</span><br><span class="line">        const char *varName &#x3D; ivar_getName(var);</span><br><span class="line">        NSString *name &#x3D; [NSString stringWithUTF8String:varName];</span><br><span class="line"></span><br><span class="line">        if ([name isEqualToString:@&quot;_name&quot;]) &#123;</span><br><span class="line">            object_setIvar(_person, var, @&quot;lannis&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;after change person : %@ -------&quot;,_person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(void) addMethod&#123;</span><br><span class="line">    class_addMethod([self class], @selector(addfunc3), (IMP)func3, &quot;v@:&quot;);</span><br><span class="line"></span><br><span class="line">    if ([self respondsToSelector:@selector(addfunc3)]) &#123;</span><br><span class="line">        [self performSelector:@selector(addfunc3)];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;add method error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func3(id self,SEL _cmd)&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>class_addMethod(__unsafe_unretained Class cls, SEL name, IMP imp, const char *types)</code>方法给指定类添加方法。<br>imp参数：实现被添加方法的函数，在本例中func3是指func3的地址指针；<br>types参数：一个定义该函数返回值类型和参数类型的字符串。本例中”v@:”意思是v代表无返回值void，@代表id sel；：代表SEL _cmd；<br>要注意的是：func3方法前的void不加+、-号，因为这是C的代码；必须有指定两个参数（id self，SEL _cmd）；</p><h4 id="动态交换方法"><a href="#动态交换方法" class="headerlink" title="动态交换方法"></a>动态交换方法</h4><p>将存在的两个方法的实现进行交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(void) exchangeImplementations&#123;</span><br><span class="line">    Method m1 &#x3D; class_getInstanceMethod([Person class], @selector(func1));</span><br><span class="line">    Method m2 &#x3D; class_getInstanceMethod([Person class], @selector(func2));</span><br><span class="line"></span><br><span class="line">    method_exchangeImplementations(m1, m2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TextView富文本插入图片</title>
      <link href="/2020/01/07/textViewPicture/"/>
      <url>/2020/01/07/textViewPicture/</url>
      
        <content type="html"><![CDATA[<p>welcome look this NoteTextView Small Demo l., you can use NoteTextView insertPicture that you can process the data to your server.  also, it will not be hide TextView ‘s point position  by keyboard . ok , just try . you can find it on my github.com/gaoyingqiu.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="图片插入textView中，对数据进行分割。解决textView在tableView-中键盘遮挡问题。"><a href="#图片插入textView中，对数据进行分割。解决textView在tableView-中键盘遮挡问题。" class="headerlink" title="图片插入textView中，对数据进行分割。解决textView在tableView 中键盘遮挡问题。"></a>图片插入textView中，对数据进行分割。解决textView在tableView 中键盘遮挡问题。</h3><p> show you screen photos . </p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/IMG_1032.jpg" alt="图片1"></p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/IMG_1031.jpg" alt="图片1"></p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/IMG_1030.jpg" alt="图片1"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS中高级阶段路线图</title>
      <link href="/2020/01/07/iOSAdvancedRoute/"/>
      <url>/2020/01/07/iOSAdvancedRoute/</url>
      
        <content type="html"><![CDATA[<p>1、iOS 11之前的导航栏的高度是64px（状态条+导航栏），iOS11之后如果设置了prefersLargeTitles = YES（默认NO）则为96pt。所以一般不用管。</p><p>2、在iOS 11上运行tableView向下偏移64px或者20px，因为iOS 11废弃了automaticallyAdjustsScrollViewInsets，而是给UIScrollView增加了contentInsetAdjustmentBehavior属性。避免这个坑的方法是要判断</p><p>3、tableView的sectionHeader、sectionFooter高度与设置不符，因为tableView的estimatedRowHeight、estimatedSectionHeaderHeight、 estimatedSectionFooterHeight三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。最简单的方法就是直接设置为0。</p><p>4、iPhone X状态条由20px变成了44px，UITabBar由49px变成了83px。设置布局时y直接写成64的就要根据机型设置。可以设置宏</p><p>#define Device_Is_iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)，</p><p> 推送模块，推送消息存储</p><p>H5 的webView 跳转 与原生交互。</p><p>图片压缩缓存。 发表话题。</p><a id="more"></a><hr><p>（自定义控件）</p><p>1）图片编辑， 富文本操作</p><p>3）话题处理； (正则表达式)</p><hr><p>（媒体库操作） </p><p>2）音频，直播 ,相机美颜等技术</p><p>3)   蓝牙 操作</p><p>4）设计模式</p><p>阅读<a href="https://github.com/ChenYilong/CYLTabBarController" target="_blank" rel="noopener">CYLTabBarController</a></p><p>YYCache</p><hr><p>中级知识点</p><ul><li><p>设计模式</p></li><li><p>UIScrollView/UITableView/UICollectionView 的嵌套</p></li><li><p>动态行高</p></li><li><p>通知/代理/block</p></li><li><p>程序启动原理</p></li><li><p>触摸事件/手势</p></li><li><p>图文混编</p></li><li><p>Runtime</p></li><li><p>NSRunLoop</p></li><li><p>GCD</p></li><li><p>ReactiveCocoa开发</p></li><li><p>3DTouch</p></li><li><p>界面渲染</p></li><li><p>Charles花瓶抓包</p></li><li><p>区分模拟器/真机项目</p></li><li><p>常用知识</p><ul><li>多线程 ，网络请求；；推送/远程推送</li><li>源代码管理Git</li><li>苹果内购/广告</li><li>音频/视频/二维码</li><li>蓝牙/传感器</li><li>物理仿真器UIDynamic</li></ul></li></ul><p><strong>iOS</strong>高级知识点</p><ul><li><p>iOS高级知识点</p></li><li><ul><li><p>Socket</p></li><li><p>XMPP</p></li><li><p>加密</p></li><li><ul><li>MD5详解</li><li>Base64加密解密</li><li>RSA非对称加密</li><li>AES对称加密</li></ul></li><li><p>音频</p></li><li><ul><li>基础</li><li>Core Audio</li><li>Audio Toolbox</li><li>OpenAL</li><li>AVFoundation</li><li>Speex语音聊天</li><li>AudioQueue/AudioSession</li><li>Speex简介</li></ul></li><li><p>视频</p></li><li><ul><li>AAC视频.H264推流</li><li>P2P传输</li></ul></li><li><p>直播</p></li><li><ul><li>直播的技术分析与实现</li><li>RTMP协议</li><li>RTMP直播应用与延时分析</li><li>如果做一款inke版的App</li><li>推流发布和播放RTMP</li><li>FFmpeg</li><li>基于FFmpeg的推流器</li><li>HLS流媒体传输协议(HTTP Live Streaming)</li><li>FFmpeg</li><li>ijkPlayer</li></ul></li><li><p>算法</p></li><li><ul><li>简介</li><li>冒泡排序</li><li>快速排序</li><li>插入排序</li><li>归并排序</li><li>二分查找</li><li>希尔排序</li><li>动态规划</li><li>堆排序</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议详解</title>
      <link href="/2020/01/07/http/"/>
      <url>/2020/01/07/http/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>请求头</strong> </p><blockquote><p>请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息，如<strong>Host</strong>: 主机名， <strong>Use-Agent</strong>: 浏览器基本资料， <strong>Accept</strong>: 浏览器能够识别的响应类型， <strong>Accept-Language</strong>: 浏览器默认语言， <strong>Accept-Encoding</strong>: 浏览器能够识别的压缩方式， <strong>Referer</strong>: 来路页面，<strong> Connecton</strong>：是否保持连接。</p></blockquote></li><li><p>GET</p><blockquote><p>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），如果数据是英文字母/数字，原样发送；如果是空格，转换为+；如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p></blockquote></li></ul><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>GET:特定浏览器和服务器对URL长度有限制.</p><p>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置</p><h3 id="http请求content-Type"><a href="#http请求content-Type" class="headerlink" title="http请求content-Type"></a>http请求content-Type</h3><p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式。这种方式用的比较多。</p><p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分。一般上传文件才会使用这种方式。</p><p>text/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。一般向服务端发送json数据会使用这种方式。</p><h3 id="HTTPS数据加密"><a href="#HTTPS数据加密" class="headerlink" title="HTTPS数据加密"></a>HTTPS数据加密</h3><p> HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS初级阶段</title>
      <link href="/2020/01/07/iOSPrimaryRoute/"/>
      <url>/2020/01/07/iOSPrimaryRoute/</url>
      
        <content type="html"><![CDATA[<ul><li>苹果自带框架</li><li><p>第三方框架</p><ul><li>AFNetworking</li><li>SDAutoLayout</li><li>YYKit</li><li>SDWebImage</li><li>MJRefresh</li><li>MJExtension</li><li>Bugly</li><li></li><li>Qiniu</li><li>Masonry</li><li>TZImagePickerController</li><li>Hyphenate_CN<a id="more"></a>基础UI控件</li></ul></li><li><p>UILabel  标题栏</p></li><li>UIButton  按钮</li><li>UIImageView  图片视图</li><li>UITextField  文本输入框</li><li>UITextView  文本展示视图</li><li>UIProgressView  进度条</li><li>UISlider  滑动开关</li><li>UIGesture 手势</li><li>UIActivityIndicator  菊花控件</li><li>UIAlertView(iOS8废除) 警告框</li><li>UIActionSheet(iOS8废除) 操作表单</li><li>UIAlertController(iOS8出现) 警告视图控制器</li><li>UIScrollView 滚动视图</li><li>UIPageControl 页面控制器</li><li>UISearchBar 搜索框</li><li>UITableView 表视图</li><li>UICollectionView集合视图</li><li>UIWebView网页浏览器</li><li>UISwitch开关</li><li>UISegmentControl选择按钮</li><li>UIPickerView选择器</li><li>UIDatePicker日期选择器</li><li>UIToolbar工具栏</li><li>UINavigationBar通知栏</li><li>UINavigationController通知视图控制器</li><li>UITabbarController选择视图控制器</li><li>UIImagePickerController相册</li><li><p>UIImage图片</p><p>Xcode的使用</p></li><li><p>基础操作 状态栏</p></li><li>偏好设置</li><li>Xcode Source Control 源代码管理器</li><li>Xcode workSpace工作组</li><li>Xcode Scheme 计划</li><li>Xcode AutoLayout 约束</li><li>Xcode CoreData数据库</li><li>LLDB 断点调试</li><li>StoryBoard</li><li>界面预览</li><li>界面适配</li><li>内存监测</li><li>全局断点</li><li><p>全局搜索替换</p><p>数据存储</p></li><li><p>plist</p></li><li>NSKeyedArchiver</li><li>SQLite</li><li>FMDB</li><li>CoreData</li><li>NSUserDefault</li><li>沙盒存储</li><li><p>NSDictionary归档</p><p>App生命周期</p></li><li><p>应用生命周期</p></li><li>控制器生命周期<ul><li>alloc</li><li>init</li><li>创建View</li><li>ViewDidLoad</li><li>ViewWillAppear</li><li>ViewDidAppear</li><li>ViewWillDisappear<ul><li>视图将要消失 (做一些视图将要消失时的UI的处理)</li></ul></li><li>ViewDidDisappear<ul><li>视图已经消失 (做一些视图消失之后数据的处理)</li><li>viewDidDisappear销毁定时器</li></ul></li><li>dealloc</li><li>didReceiveMemoryWarning</li></ul></li></ul><ul><li>通信</li><li>NS系列</li><li>宏定义</li><li>视图层次</li><li>切换视图</li><li>深浅拷贝</li><li>对象序列化</li><li>写入文件</li><li>获取沙盒路径</li><li>翻转视图</li><li>延伸视图</li><li>九大基本数据类型</li><li>九宫格</li><li>坐标比较</li><li>UIColor 、CIColor和CGColor 之间的关系</li><li>画图</li><li>静态变量</li><li>tag值</li><li>延时执行方法</li><li>界面旋转+状态栏隐藏</li><li>plist文件</li><li>KVC/KVO</li><li>谓词NSPredicate</li><li>帧动画</li><li>AutoLayout</li><li>isKindOfClass 与 isMemberOfClass</li><li>Return/Break/Continue</li><li>Core Animation</li><li>CALayer</li><li>Quartz2D</li><li>真机调试</li><li>静态库</li><li>内存管理</li><li>iPad与iPhone的区别</li><li>响应链</li><li>异常捕捉</li><li>国际化</li><li>代码模块化</li><li>类别/扩展</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>找出字符串最长单词</title>
      <link href="/2019/12/10/longWord/"/>
      <url>/2019/12/10/longWord/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countWords</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">"hello, my name is gaogaoProgramer, welcome to come here!"</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">long</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> spaceIndex = <span class="number">0</span>;  <span class="comment">//从第一个下标开始算</span></span><br><span class="line">    <span class="keyword">int</span> recordMax = <span class="number">0</span>; <span class="comment">//单词空格之间下标最大差即为最长单词</span></span><br><span class="line">    <span class="keyword">int</span> beforeIndex = <span class="number">0</span>,afterIndex = <span class="number">0</span>; <span class="comment">//定义最长单词的前空格，后空格</span></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; len; index++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[index] == <span class="number">32</span>)&#123; <span class="comment">//判断空格</span></span><br><span class="line">            <span class="keyword">if</span>(index - spaceIndex &gt; recordMax)&#123;</span><br><span class="line">                recordMax = index - spaceIndex;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//记录前下标和后下标。</span></span><br><span class="line">                beforeIndex = spaceIndex;</span><br><span class="line">                afterIndex = index;</span><br><span class="line">            &#125;</span><br><span class="line">            spaceIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"原始单词为：%s"</span>,str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n单词空格之间下标最大差:%d 前下标:%d,后下标:%d"</span>,recordMax,beforeIndex,afterIndex);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出找到的单词；</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n找到的最长度单词为："</span>);</span><br><span class="line">    <span class="keyword">int</span> charIndex;</span><br><span class="line">    <span class="keyword">for</span>(charIndex = beforeIndex; charIndex&lt; afterIndex ; charIndex++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,str[charIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>促销方式</title>
      <link href="/2019/12/10/promotionMethod/"/>
      <url>/2019/12/10/promotionMethod/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sale_style1.jpeg" alt="图片"><br><a id="more"></a><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sale_style2.jpeg" alt="图片"><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sale_style3.jpeg" alt="图片"><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sale_style4.jpeg" alt="图片"><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sale_style5.jpeg" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>职场硬核与软实力</title>
      <link href="/2019/12/09/softPower/"/>
      <url>/2019/12/09/softPower/</url>
      
        <content type="html"><![CDATA[<p>我们的从事的大多数都是平凡工作。没有科学家在实验室科研的高科技创新，没有宇宙航天科技探索的奥秘。或许每天都做着重复单一的工作，或许很多岗位都被智能自动化机器给替代。14年之后，很多企业都转型成移动互联网企业，很多线下店铺都实现了线上支付功能。我们不断接触着新事物和被新事物洗礼。 那些不愿意改变，不愿意学习新事物的企业和个人 都慢慢退出了历史舞台。</p><a id="more"></a><p>尤其是IT行业从业人员，基本每年都有一次技术革新。新产物，新工种也逐渐生存在这个市场中。我们每天都要不断地学习新知识，为提升技术，为升职加薪垫定基础；如果不学习，我们将和新时代技术拖轨，被时代抛弃。  </p><p>除了在专业技术过硬以外，在软技能方面我们通过这节Chat谈一谈。</p><h3 id="信赖度"><a href="#信赖度" class="headerlink" title="信赖度"></a>信赖度</h3><p>依据：要求任何人做事，不论对上/对下还是平行，在没有卓越的表现可以预期的时候，我们就只能希望他/她“可靠”</p><p>1、可以严格要求自己按照指令或需求，完成他人交付的任务或工作。用心把事情做到完美。<br>2、在执行任务或工作的过程中，多注意细节，能主动发现并报告“偏差”。<br>3、在任务或工作没有完全结束以前，能始终保持注意力，不会松懈。<br>4、任务或工作结束时，尽快告知对方并征询意见，如果有疏忽或差错，先道歉，并说明以后的防范方法。<br>5、对所有不足或不懂的地方，会不断地问，不断地学。</p><h3 id="洁净度"><a href="#洁净度" class="headerlink" title="洁净度"></a>洁净度</h3><p>美和整洁确实可以给自己个人形象加分。但我们在工作的洁净度上也可以给自己带来加分。</p><p>1、交付出去的文件/档案/物品/工作内容，一定要清清楚楚，一定要有条理，一定要仔细。<br>2、不论任何东西，只要从我手中出去，自己先检查，先校对，先确认。<br>3、每月，每周，每天做了什么，有什么结果，自己怎么想的，任何工作项自己都要有数据记录。</p><h3 id="诚信度"><a href="#诚信度" class="headerlink" title="诚信度"></a>诚信度</h3><p>专业和高效可以提升我们的业绩。真诚信任可以给我们带来更多的用户和伙伴。通过信任的维持，我们可以把产品做得更好。管理层人员的筛选基本也是从最亲临的下属来进行提拔。因为基于信任，基于了解。</p><p>1、随时注意自己应该负责的工作，定期让部门主管知道。<br>2、对与自己有关的一切工作，经常思考如何能把它做得更好。<br>3、不要养成不好的工作习惯，以免他人怀疑你的专业性。<br>4、不要总在背后议论，有话心平气和并大胆的说，眼睛没有看到的东西议论久了把自己容易把自己都骗了。</p><h3 id="多面手"><a href="#多面手" class="headerlink" title="多面手"></a>多面手</h3><p>1、除了应有的专业知识，还要广泛地涉猎一些和工作、有关的各种信息，并建立自己的知识库。<br>2、在适当的时机，对工作相关的市场，产品、技术等问题，提出多元化的反思。<br>3、工作之余培养其他的兴趣和能力，比如影视，动漫，运行，工艺，写作等。完全没有爱好的人，很难有突破性的创造力。<br>4、尽量让人觉得不庸俗，不市侩，不短视，不肤浅（不要随随便便的提问，随随便便的讨论，多做功课，多了解清楚）。</p><h3 id="身边典范"><a href="#身边典范" class="headerlink" title="身边典范"></a>身边典范</h3><p>少看成功学，多去了解你身边成功的人成功的事是怎么一点一点起来的。他们都不是单纯靠运气，仔细的找总会找到一两个特质，是你没有的。有一些你不去看，不去找，是无知。有一些你找到了，你做不到，是无能。你不做，永远是0，你做了至少能成为1，没有很多的1，永远不可能到10。</p><p>人才是什么？你给他一件事，他把它干好了；你又给他一件事他又把他干好了…… </p><h4 id="学会承担个人责任"><a href="#学会承担个人责任" class="headerlink" title="学会承担个人责任"></a>学会承担个人责任</h4><p>为事情的结果负责，属于自己管辖区域的工作任务要能够数据追踪，对成功的结果要总结，对失败的结果要反思。在职场不要”努力地表现”，假装很努力；不要去辩解或甩锅。要认识到自己的错误，多观察别人的优点。</p><h4 id="让自己成长"><a href="#让自己成长" class="headerlink" title="让自己成长"></a>让自己成长</h4><p>总是说自己没有 条件(时间\环境\机会)去提高。这些都是给自己懒惰找的借口。<br>不断挤出时间去学习。“努力地请教”，不断的逼自己去与人交流学习。<br>结构化自己的知识体系，离目标还差多少。量化到每一天，每一周，每一月的计划中去。<br>锻炼自己各方面的能力：包括学习能力，交流能力，组织能力，执行能力。</p><h4 id="注重过程，关注结果"><a href="#注重过程，关注结果" class="headerlink" title="注重过程，关注结果"></a>注重过程，关注结果</h4><p>平庸混日子的人总认为自己牛逼，想要高收入，想要高职位，想要高地位。<br>实干的人总是在不断思考，不断收集情报，不断的学习，不断计划，不断实践，不断用结果向所有人证明自己的能力。<br>你的想法决定了你的行动；你的行动 取决于你的习惯；你的习惯来源于你的性格；</p><h4 id="学着用不同的方法去处理事情："><a href="#学着用不同的方法去处理事情：" class="headerlink" title="学着用不同的方法去处理事情："></a>学着用不同的方法去处理事情：</h4><p>对事不对人 或许80% 都是对的，但有时候的确需要对人对事去处理；<br>当你是职场管理者时，管理不同性格的人可以采用不同的沟通方法。有的人心理比较脆弱，多次批评甚至都会离职走人。 每件事（人）都不一样，不要用同一种方式去处理所有的事（人）</p><h4 id="创造价值"><a href="#创造价值" class="headerlink" title="创造价值"></a>创造价值</h4><p>不以工作时长为价值计算，以产出结果为价值计算。<br>形成自我管理，主动学习，让之前的做事方法更加高效，创造更多的价值。<br>不要总认为自己只能干一件事情，这个时代要的是多元化复合型人才。要好好学习，坚持充电补充自己的短板。</p><h4 id="紧看目标，解决问题"><a href="#紧看目标，解决问题" class="headerlink" title="紧看目标，解决问题"></a>紧看目标，解决问题</h4><p>不要总描述困难，然后最后被困难给吓趴了而放弃自己的目标。<br>要去克服困难，然后把事情干好。<br>勿忘自己短、中、长期目标，并时刻询问自己。（你的长期目标是什么？中期目标是什么？短期目标是什么？）<br>华为在中美贸易战的时候没有天天强调困难，而是自己制造芯片。利用这次机会扭转全球竞争的格局并真的取得成功。如果没有这次贸易战，可能还要落后业界大腕更多年份。</p><h4 id="立场鲜明"><a href="#立场鲜明" class="headerlink" title="立场鲜明"></a>立场鲜明</h4><p> 立场鲜明，以事实结果为导向。<br> 在工作上要有立场，工作与生活要分开，否则谁为目标负责？工作的时候展现出你的专业度，对工作负责，对客户负责。 </p><h4 id="不要纵容自己能力不足"><a href="#不要纵容自己能力不足" class="headerlink" title="不要纵容自己能力不足"></a>不要纵容自己能力不足</h4><p>不是要去比谁最受欢迎，谁资历老，是要比谁能创造更大的价值。<br>拒绝学习的人站在重要的位置上，对组织有欠公平。<br>对自己要求低，社会对你的回馈会体现到你的收入低，地位低，职位低。就算你走了狗屎运，也难以服众。</p><h4 id="什么时候求助大神？"><a href="#什么时候求助大神？" class="headerlink" title="什么时候求助大神？"></a>什么时候求助大神？</h4><p>遇到难一点的工作任务，如果总是等待上司来指导。那就相当于放弃了成长。如果不想让别人的思想主动你的思维，那你只有不断努力训练自己的思维，用结果去证明自己。</p><p>思考的过程：<br>1 、自己思考，分模块 要解决什么问题。<br>2、 不懂的问题查找资料，再手动实践。<br>3、查找网上别人做过的，参考。<br>4、总结。 归类，整理。  记录（笔记，大脑），输出（文章，博客）。</p><p>只要你不断的努力的思考，努力的学习，努力的创造价值，终有一天你会把所有人甩出几条街，你自然成了企业的优秀人才。</p><p>成功是不断的努力加上机会，机会来了你是不是把握得住。而把握机会的实力你是否储存足够？<br>你愿意努力多久，3年？5年？10年？一辈子？</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软实力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵</title>
      <link href="/2019/12/08/spiralMatrix/"/>
      <url>/2019/12/08/spiralMatrix/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/luoxunmap.jpeg" alt="图片"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> len 9</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luoxuan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[len][len];</span><br><span class="line">    <span class="comment">//开始初始化，给数组赋值0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            arr[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//顶角确定了，我们可以算出第一行右边的数字</span></span><br><span class="line">    <span class="keyword">int</span> circleTimes = len/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> circelIndex = <span class="number">0</span>; <span class="comment">//圈的数量</span></span><br><span class="line">    <span class="comment">//赋值过程</span></span><br><span class="line">    <span class="keyword">while</span>(circleTimes&gt;<span class="number">0</span>)&#123;  <span class="comment">//测试时候，每一圈结束可以打印出看一下：&amp;&amp; circelIndex &lt;1</span></span><br><span class="line">        circelIndex ++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d圈\n"</span>,circelIndex);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> column = <span class="number">1</span>;column &lt;= len-circelIndex; column++)&#123;  <span class="comment">//往右排列</span></span><br><span class="line">            <span class="keyword">if</span>(column &gt;= circelIndex<span class="number">-1</span>)&#123;</span><br><span class="line">                arr[circelIndex<span class="number">-1</span>][column] = arr[circelIndex <span class="number">-1</span>][column<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row = circelIndex; row&lt;= len-circelIndex; row++)&#123; <span class="comment">//往下排列，从第二行，第X-i 列开始</span></span><br><span class="line">            arr[row][len-circelIndex] = arr[row<span class="number">-1</span>][len-circelIndex] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> column = len-circelIndex<span class="number">-1</span>; column &gt;= circelIndex<span class="number">-1</span>; column--)&#123; <span class="comment">//往左排，下标递减1，值为后一个 + 1</span></span><br><span class="line">            arr[len-circelIndex][column] = arr[len-circelIndex][column+<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row =len-circelIndex<span class="number">-1</span>; row &gt; circelIndex<span class="number">-1</span>; row--)&#123; <span class="comment">//往上排列</span></span><br><span class="line">            arr[row][circelIndex<span class="number">-1</span>] = arr[row+<span class="number">1</span>][circelIndex<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        circleTimes--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出二维数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沪江-C语言课程精选32讲</title>
      <link href="/2019/12/06/hujiang_classC/"/>
      <url>/2019/12/06/hujiang_classC/</url>
      
        <content type="html"><![CDATA[<h3 id="编程逻辑精选32讲"><a href="#编程逻辑精选32讲" class="headerlink" title="编程逻辑精选32讲"></a>编程逻辑精选32讲</h3><p>沪江课程：<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/cctalk_classC.jpeg" alt="图片1"></p><p>打卡鸭：<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/dakaya.png" alt="图片1"></p><p>公众号： 高高编程小屋<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/gagao_gongzhonghao.jpeg" alt="图片1"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发商品规格设置模块</title>
      <link href="/2019/12/06/iOSSku/"/>
      <url>/2019/12/06/iOSSku/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SKU百度百科为 库存保有单位 （Stock keeping Unit 或者SKU）是对每一个产品和服务的唯一标示符。  也就是说sku 为商品对应的很多种类规格情况下的 库存，价格  各有不同。需要通过sku 这样一种组合结构存储这些计量值。<br>在移动电商时代，网购已然成为潮流。更是全民参与。每一年都有购物节 ： 京东618 , 淘宝天猫双11, 双12 。 一个淘宝店家月销售额30万背后 ，他的商品sku有上千种。  一个卖橱柜的，小到抽屉，拉篮，五金 ，把手，螺丝钉 都可以细分成很小的SKU。移动电商商品背后的SKU种类的复杂性。可正是因为商品SKU的多样化，才能商家带来巨量的销售额。</p><h3 id="从详情页认识SKU"><a href="#从详情页认识SKU" class="headerlink" title="从详情页认识SKU"></a>从详情页认识SKU</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/chat_sku2.PNG" alt="C端sku选择"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">这个商品包含的SKU信息:&#123;</span><br><span class="line">    规格类型:[&#123;</span><br><span class="line">            尺寸:[XS, S， M, L，XL， XXL]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            颜色: [白色，珊瑚粉，草木绿]</span><br><span class="line">        &#125;],</span><br><span class="line">    规格明细组合描述: &#123;</span><br><span class="line">        XS-白色:&#123;</span><br><span class="line">            图片: 图片url,</span><br><span class="line">            价格: ￥328,</span><br><span class="line">            库存: 188件,</span><br><span class="line">            扩展..字段: 值</span><br><span class="line">        &#125;,</span><br><span class="line">        其他规格组合:&#123; </span><br><span class="line">            图片: 图片url,</span><br><span class="line">            价格: 价格..,</span><br><span class="line">            库存: 库存数量..,</span><br><span class="line">            扩展..字段: 值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="SKU功能操作流程图"><a href="#SKU功能操作流程图" class="headerlink" title="SKU功能操作流程图"></a>SKU功能操作流程图</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/chat_sku_intro.png" alt="图片1"><br><span style="color:purple">说明</span></p><h4 id="新增商品SKU"><a href="#新增商品SKU" class="headerlink" title="新增商品SKU"></a>新增商品SKU</h4><p>1) 从规格容器中选择需要的规格。已选择的规格类型也可移除。<br>2) 在已选规格类型下 可新增规格属性。已新增的规格属性可选中或取消。<br>3) 规格属性的选择或取消 触发自有组合排列。生成规格明细的表单。<br>4) 填写规格明细</p><ul><li>单项填写： 挨个填写，过滤条件填写。</li><li>批量填写。<br>5) 提交sku明细项数据。</li></ul><h4 id="修改商品SKU"><a href="#修改商品SKU" class="headerlink" title="修改商品SKU"></a>修改商品SKU</h4><p>1)  加载已选择的规格类型属性；</p><p><span style="color:red;">注意：根据业务控制已选规格类型 是否可新增 ，是否可删除的条件，因为直接涉及到规格明细的排列组合结构。 当商品库的某商品已经在店铺上线了，如果再新增规格类型的话，排列组合将改变，之前设置的价格和库存都会跟着改变。所以不可以再新增或删减规格类型。</span></p><p>2)  自由排列组合 ，把各项值 赋值到规格明细表中。<br>3) 修改数据后，重新提交SKU 的明细表单。</p><p><span style="color:purple;">修改SKU的场景</span><br>1) 以衣服为例：白色 + M   卖完的时候，在规格sku 修改的时候，可以把已选的颜色为白色去掉。<br>2) 以手机 为例：由于热销，厂家又上了 升级版本玫瑰金色。可新增一个玫瑰金色再设置相应的价格。</p><h2 id="1、技术讲解"><a href="#1、技术讲解" class="headerlink" title="1、技术讲解"></a>1、技术讲解</h2><h3 id="1-1-服务器下发的Json数据结构"><a href="#1-1-服务器下发的Json数据结构" class="headerlink" title="1.1  服务器下发的Json数据结构"></a>1.1  服务器下发的Json数据结构</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释： 服务器返回的商品规格类型属性。用于页面头部显示已选的规格类型，和其属性。</span></span><br><span class="line">&#123;</span><br><span class="line">    type : 101, //规格类型id值。</span><br><span class="line">    name : 颜色,</span><br><span class="line">    types : [</span><br><span class="line">    &#123;</span><br><span class="line">        propertyId : 123255,  //属性值唯一Id值</span><br><span class="line">        propertyCatId : 101,</span><br><span class="line">        state : 1,  //记录是否被选中该颜色</span><br><span class="line">        name : 绿色</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        propertyId : 123254,</span><br><span class="line">        propertyCatId : 101,</span><br><span class="line">        state : 1,</span><br><span class="line">        name : 白色</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//规格明细描述 结构,用于SKU 编辑的时候，把规格明细各项组合数据 填充到表单。</span></span><br><span class="line"></span><br><span class="line">skuDesc : [</span><br><span class="line">&#123;</span><br><span class="line">    skuId : 167977,  //sku项 id</span><br><span class="line">    productId : 166224, //商品id</span><br><span class="line">    price : 334,  //普通售价</span><br><span class="line">    groupPrice :300, //拼团售价</span><br><span class="line">    image : https://cdn.gaogao.com/image/e0ecd00c2sw2f23f29df6d504987d60d.png, //图片</span><br><span class="line">    properties : 101:123253-102:123257  //规格属性 自由组合排列值</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    skuId : 167971,</span><br><span class="line">    productId : 166224,</span><br><span class="line">    price : 200,</span><br><span class="line">    groupPrice : 188,</span><br><span class="line">    image : https://cdn.gaogao.com/image/e0ecd00c2d5f442c49df6d504987d60d.png,</span><br><span class="line">    properties : 101:123253-102:123258</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//向服务器提交某商品的SKU 规格明细数据:</span></span><br><span class="line"></span><br><span class="line">product_id : 176294;  //商品id</span><br><span class="line">properties : [  //规格属性排列组合项</span><br><span class="line">&#123;"price":100,"groupPrice":88,"properties":"11:167918-101:123253-102:123259"&#125;,</span><br><span class="line">&#123;"price":100,"groupPrice":88,"properties":"11:172957-101:123253-102:123259"&#125;,</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">100</span>,<span class="attr">"groupPrice"</span>:<span class="number">88</span>,<span class="attr">"properties"</span>:<span class="string">"11:167918-101:123253-102:123258"</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><span style="color:purple">说明:</span><br>先根据已选的 规格大类型propertyCatId 值排序。 这样做的原因是：无论 A+B+C ，B+A+C 或 C+A+B  都是表示同一种SKU组合。以 “11:167918-101:123253-102:123259” 为列，根据规格大类型id值排序。 最终都以 A：aa+B:bb+C:cc 组合提交给服务器, 以此来维护该组合对应的价格和库存； </p><h2 id="2、页面组成"><a href="#2、页面组成" class="headerlink" title="2、页面组成"></a>2、页面组成</h2><h3 id="2-1-页面全局变量"><a href="#2-1-页面全局变量" class="headerlink" title="2.1 页面全局变量"></a>2.1 页面全局变量</h3><p>NSMutableArray <em>datas; //规格明细列表：排列组合的数据源<br>NSMutableArray </em>sectionMenuArr;  //记录选中的大类型；<br>NSMutableDictionary <em> itemArrDic; //map 存放key:为id , 值为已选的规格类型对象<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/chat_itemArrDic.png" alt="itemSelectedArrDic"><br>NSMutableDictionary </em> itemSelectedArrDic;  //已选的规格类型下的规格属性数组。<br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/itemSelectedArrDic.png" alt="itemSelectedArrDic"></p><h3 id="2-2-构建一个树结构"><a href="#2-2-构建一个树结构" class="headerlink" title="2.2 构建一个树结构"></a>2.2 构建一个树结构</h3><p>根据提交给服务器的组合字符窜如 “11:167918-101:123253-102:123258”, 这个是一个有三个层级表示的SKU 组合。<br>举例：天猫购买手机，加入购物车的时候选择   内存：64g  + 颜色：白色 +  套餐类型： 官方标配<br>其中包含内容：1）规格大类型要先排好序 ，属性要一一对应类型。 三个层级的SKU组合应该比较常见。通过这里，我们构件一个model实体。结构如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ConditionFilter</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>,<span class="title">NSMutableCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">NSInteger</span> value; <span class="comment">// id值</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> *name; <span class="comment">//名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;ConditionFilter&gt; *statusItem; <span class="comment">//子级</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">NSInteger</span> state; <span class="comment">//选中状态： 1已选择 0未选择</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> * propertyCatId; <span class="comment">//规格类型： 一级分类的id</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> * propertyId; <span class="comment">//规格属性： 二级分类id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> * pid; <span class="comment">//父节点编号(随机生成)</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> * nodeId; <span class="comment">//节点编号(随机生成)</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) ConditionFilter *parent; <span class="comment">//父节点（父只有一个）</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">BOOL</span> extend; <span class="comment">//是否展开</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">NSInteger</span>  level;<span class="comment">//当前层级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><h3 id="2-3-根据已选的规格类型-自由排列组合-出明细列表各项组合数据"><a href="#2-3-根据已选的规格类型-自由排列组合-出明细列表各项组合数据" class="headerlink" title="2.3 根据已选的规格类型 自由排列组合 出明细列表各项组合数据"></a>2.3 根据已选的规格类型 自由排列组合 出明细列表各项组合数据</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 从最后一个层级算起；往父类赋值；(核心: 给statusItem赋值)</span></span><br><span class="line">-(<span class="keyword">void</span>)configDataSectionReload</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先把已选择的大类，过滤出已选择的属性项的大类</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *hasChooseSectionMenuArr = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    <span class="keyword">for</span>(ConditionFilter *sectionMenu <span class="keyword">in</span> <span class="keyword">self</span>.sectionMenuArr)&#123;</span><br><span class="line">        <span class="built_in">NSArray</span> * itemChooseArr = [<span class="keyword">self</span>.itemSelectedArrDic objectForKey:@(sectionMenu.value)];</span><br><span class="line">        <span class="keyword">if</span>(itemChooseArr.count)&#123;</span><br><span class="line">            [hasChooseSectionMenuArr addObject:@(sectionMenu.value)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//确定树的层级：为选择的已选大类型个数。并绑定子节点集合statusItem</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *childArr = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> level = hasChooseSectionMenuArr.count; level&gt;<span class="number">0</span>; level -- ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSNumber</span> *cellSectionTag = [hasChooseSectionMenuArr objectAtIndex:level<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//可变集合的copy 和 mutableCopy 是一样；深拷贝，地址不一样；如果不用copy会造成多个地方引用地址对象；值会随着关联；</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span> *itemSelectArr = [[<span class="keyword">self</span>.itemSelectedArrDic objectForKey:cellSectionTag] mutableCopy];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt; itemSelectArr.count; i++)&#123;</span><br><span class="line">            ConditionFilter *item = [itemSelectArr objectAtIndex:i];</span><br><span class="line">            item.level = level; <span class="comment">//标记等级</span></span><br><span class="line">            item.extend = <span class="literal">NO</span>;</span><br><span class="line">            item.nodeId = <span class="literal">nil</span>;</span><br><span class="line">            item.pid = <span class="literal">nil</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//（这里使用拷贝），为子节点赋值。</span></span><br><span class="line">            item.statusItem = [[<span class="built_in">NSMutableArray</span> alloc] initWithArray:childArr copyItems:<span class="literal">YES</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        childArr = [itemSelectArr mutableCopy]; <span class="comment">//（防止对childArr的来源数据源污染,这里使用拷贝）（fillParentNodeId 会对数据源childArr 进行污染；如改变对象的name等设置）</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">    [<span class="keyword">self</span>.datas removeAllObjects];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//填充子节点绑定父节点pid; childArr是形成的一颗树结构。</span></span><br><span class="line">    [<span class="keyword">self</span> fillParentNodeId:childArr parentNode:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 从前往后赋值（ 给子节点绑定标识父类parent）,用于拼装properties 组合的id字符窜</span></span><br><span class="line">-(<span class="keyword">void</span>)fillParentNodeId:(<span class="built_in">NSArray</span> *)itemArr parentNode:(ConditionFilter *)parent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i =<span class="number">0</span> ;i &lt; itemArr.count; i++)&#123;</span><br><span class="line">        ConditionFilter *filter = [itemArr objectAtIndex:i];</span><br><span class="line">        filter.pid = parent.nodeId;</span><br><span class="line">        filter.parent = parent; <span class="comment">//绑定父级节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *nodeStr = [<span class="built_in">NSString</span> uniqueStringForMessage];</span><br><span class="line">        filter.nodeId = nodeStr;</span><br><span class="line">        filter.extend = filter.statusItem.count;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>.dataShowLayoutStyle == LayoutComposeStyle)&#123; <span class="comment">//排列组合样式；</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(filter.statusItem.count == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//根据statusItem等于0 设置层级为1级的时候name值 组合成: 白色+XL , 白色+L 格式；赋值给最后一个层级models的name属性</span></span><br><span class="line">                <span class="built_in">NSMutableArray</span>  *allJoinNamesArr = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">                [allJoinNamesArr addObject:filter.name];</span><br><span class="line">                ConditionFilter *parent = filter.parent;</span><br><span class="line">                <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">                    [allJoinNamesArr insertObject:parent.name atIndex:<span class="number">0</span>];</span><br><span class="line">                    parent = parent.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">NSString</span> *allJoinName = [allJoinNamesArr componentsJoinedByString:<span class="string">@"+"</span>];</span><br><span class="line">                filter.name = allJoinName; <span class="comment">//拼接UI显示的name</span></span><br><span class="line">                filter.level = <span class="number">1</span>; <span class="comment">//排列组合样式都为1级UI显示的间距.（label显示时候的左边距）</span></span><br><span class="line">                [<span class="keyword">self</span>.datas addObject:filter]; <span class="comment">//只添加最后一个层级；</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//树层级 样式（全部添加）</span></span><br><span class="line">            </span><br><span class="line">            [<span class="keyword">self</span>.datas addObject:filter];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        [<span class="keyword">self</span> fillParentNodeId:filter.statusItem  parentNode:filter];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-自由排列组合-，把各项值-赋值到规格明细表中"><a href="#2-4-自由排列组合-，把各项值-赋值到规格明细表中" class="headerlink" title="2.4 自由排列组合 ，把各项值 赋值到规格明细表中"></a>2.4 自由排列组合 ，把各项值 赋值到规格明细表中</h3><h4 id="先把各项值赋值给SKUModel-，存到根据排列组合字符窜为key-，存放到map中。"><a href="#先把各项值赋值给SKUModel-，存到根据排列组合字符窜为key-，存放到map中。" class="headerlink" title="先把各项值赋值给SKUModel ，存到根据排列组合字符窜为key ，存放到map中。"></a>先把各项值赋值给SKUModel ，存到根据排列组合字符窜为key ，存放到map中。</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置SKU值</span></span><br><span class="line"><span class="built_in">NSArray</span> *skuArr = [response.responseObject objectForKey:<span class="string">@"sku"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">NSInteger</span> i=<span class="number">0</span> ;i &lt;<span class="keyword">self</span>.datas.count; i++)&#123;</span><br><span class="line">    ConditionFilter *filter = [<span class="keyword">self</span>.datas objectAtIndex:i];</span><br><span class="line">    <span class="built_in">NSString</span> *storeCellKey = filter.name;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *properties = [<span class="keyword">self</span> processPropertiesByFilter:filter];</span><br><span class="line">    <span class="comment">//找到sku 设置信息；</span></span><br><span class="line">    <span class="keyword">for</span>(SkuDetailModel *sku <span class="keyword">in</span> skuArr)&#123;</span><br><span class="line">        <span class="keyword">if</span>([sku.properties isEqualToString:properties])&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">SKUModel</span> *writeSku = [[<span class="built_in">SKUModel</span> alloc] init];</span><br><span class="line">            writeSku.properties = sku.properties;</span><br><span class="line">            writeSku.groupPrice = sku.groupPrice;</span><br><span class="line">            writeSku.price = sku.price;</span><br><span class="line">            writeSku.image = sku.image;</span><br><span class="line">            [<span class="keyword">self</span>.writeFieldBoxDic setObject:writeSku forKey:storeCellKey];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-properties的自由组合id值拼接"><a href="#2-5-properties的自由组合id值拼接" class="headerlink" title="2.5 properties的自由组合id值拼接"></a>2.5 properties的自由组合id值拼接</h3><p>循环取出其父节点. 记录大类型：属性 格式。 根据key 排序，拼接成 A:aa - B:bb - C:cc 格式<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 处理每行规格填写的 普通价和拼团价 返回 sku的组合properties值</span></span><br><span class="line">-(<span class="built_in">NSString</span> *)processPropertiesByFilter:(ConditionFilter *)filter</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mDic = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</span><br><span class="line">    [mDic setObject:filter.propertyId forKey:filter.propertyCatId];</span><br><span class="line">    </span><br><span class="line">    ConditionFilter *parent = filter.parent;</span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">        [mDic setObject:parent.propertyId forKey:parent.propertyCatId];</span><br><span class="line">        parent = parent.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="built_in">NSArray</span> *keyArr = [mDic.allKeys sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span>  _Nonnull obj1, <span class="keyword">id</span>  _Nonnull obj2) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSNumber</span> *num1 = [<span class="built_in">NSNumber</span> numberWithInteger:[obj1 integerValue]];</span><br><span class="line">        <span class="built_in">NSNumber</span> *num2 = [<span class="built_in">NSNumber</span> numberWithInteger:[obj2 integerValue]];</span><br><span class="line">        <span class="built_in">NSComparisonResult</span> result = [num1 compare:num2];</span><br><span class="line">        <span class="keyword">return</span> result == <span class="built_in">NSOrderedDescending</span>; <span class="comment">// 升序</span></span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *joinStrArr = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSString</span> *key <span class="keyword">in</span> keyArr)&#123;</span><br><span class="line">        <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%@"</span>,key,[mDic objectForKey:key]];</span><br><span class="line">        [joinStrArr addObject:str];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *properties = [joinStrArr componentsJoinedByString:<span class="string">@"-"</span>];</span><br><span class="line">    <span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-6-列表的UI显示：-tableView相关委托"><a href="#2-6-列表的UI显示：-tableView相关委托" class="headerlink" title="2.6 列表的UI显示： tableView相关委托"></a>2.6 列表的UI显示： tableView相关委托</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//共两个分组。第一个分组展示选择的规格类型。 第二个分组是规格明细表单项</span></span><br><span class="line">-(<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>.sectionMenuArr.count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当为第二个分组时,显示的行数为排列组合数</span></span><br><span class="line">-(<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(section == <span class="keyword">self</span>.sectionMenuArr.count)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.datas.count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(indexPath.section == <span class="keyword">self</span>.sectionMenuArr.count)&#123;</span><br><span class="line">        <span class="comment">//排列组合的Cell显示</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//排列组合的名字</span></span><br><span class="line">        ConditionFilter *filter = [<span class="keyword">self</span>.datas objectAtIndex:indexPath.row];</span><br><span class="line">        cell.nameLabel.text = filter.name;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//某一排列组合名称对应的 skuModel 记录的表单值和properties值</span></span><br><span class="line">        <span class="built_in">SKUModel</span> *sku = [<span class="keyword">self</span>.writeFieldBoxDic objectForKey:filter.name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-修改规格明细-的表单值"><a href="#2-7-修改规格明细-的表单值" class="headerlink" title="2.7 修改规格明细 的表单值"></a>2.7 修改规格明细 的表单值</h3><p>修改每一个明细项的时候，可对应根据TextFieldValueChange 事件变化，把值赋值给每一项排列组合的key对应的skuModel中。<br>skuModel对象: {“price”:100,”groupPrice”:88,”properties”:”11:167918-101:123253-102:123259”}<br>准备一个字典或map：writeFieldBoxDic 根据排列组合的字符窜 “A+B+C”作为key,  skuModel作为value 存储；<br>writeFieldBoxDic {<br>“A+B+C”:  skuModel<br>…<br>}<br>cell 取值显示的时候，根据key 取得 skuModel 的值；field值改变得时候，根据key取得skuModel. 存在直接修改model的属性，不存在则创建一个新的skuModel 存到writeFieldBoxDic中；</p><h3 id="2-8-提交的表单条件判断"><a href="#2-8-提交的表单条件判断" class="headerlink" title="2.8  提交的表单条件判断"></a>2.8  提交的表单条件判断</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)submitAction</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> needReturnFlag = <span class="literal">NO</span>; <span class="comment">//是否需要阻止提醒；</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *skuArr = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.datas.count; i++)&#123;</span><br><span class="line">        ConditionFilter *filter = [<span class="keyword">self</span>.datas objectAtIndex:i];</span><br><span class="line">        <span class="built_in">SKUModel</span> *sku = [<span class="keyword">self</span>.writeFieldBoxDic objectForKey:filter.name];</span><br><span class="line">        <span class="keyword">if</span>(sku)&#123;</span><br><span class="line">            [skuArr addObject:[sku mj_JSONObject]];</span><br><span class="line">            <span class="keyword">if</span>(sku.price == <span class="literal">nil</span> || sku.groupPrice == <span class="literal">nil</span>)&#123;</span><br><span class="line">                needReturnFlag = <span class="literal">YES</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            needReturnFlag = <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(needReturnFlag || skuArr.count == <span class="number">0</span>)&#123;</span><br><span class="line">        [MBProgressHUD showMessage:<span class="string">@"所有规格普通价需填写完整！"</span>];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...保存到服务器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、业务：店铺商品和产品库关系图"><a href="#3、业务：店铺商品和产品库关系图" class="headerlink" title="3、业务：店铺商品和产品库关系图"></a>3、业务：店铺商品和产品库关系图</h2><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/chat_store_product.png" alt="B端店铺商品和素材库"></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>产品库：只负责管理产品的价格：无论拼团价 还 是秒杀价，活动价 或普通价 都可统一在库中管理该规格明细信息。 这样做的目的是提供商品信息的复用。当在店铺上架一个商品时，不用每次都去创建一个全新的商品，可通过产品库进行选择添加。<br><span style="color:purple">从商户角色进行区分：</span></p><ul><li>个人开淘宝店模式：店铺需单独管理商品的库存,  运费的设置 是否包邮等信息。</li><li>厂家和连锁店模式：连锁店去库存只负责代销，无需管理库存和发货。当用户下单，统一指向厂家来发货。 厂家统计设置产品信息 ， 价格， 库存。</li><li>联盟的概念： 联盟设置好了商品。已加入联盟的商家可直接代销联盟总店的商品进行售卖，取得分佣。类似多多进宝，可售卖平台已存在的可分成的商品。</li></ul><h2 id="4、-技术总结"><a href="#4、-技术总结" class="headerlink" title="4、 技术总结"></a>4、 技术总结</h2><ol><li>所有的重点在于建立树层级结构，根据已选的规格大类型循环其已选择的规格属性数组。通过ConditionFilter实体的属性statusItem 可以取到子节点ConditionFilter 的数组。</li><li>从最后一个层级一次往上一层级的节点赋值子节点数组statusItem。为防止对数据来源的污染，一定要使用深拷贝。深拷贝model 要实现NSCopying,NSMutableCopying 相关协议方法。</li><li>从向服务器提交每一项规格明细的组合项来看，我们对ConditionFilter 的属性parent 进行遍历，依次取得上一节点的相关属性，直到最上一级节点的parent 属性为null 的时候便停止拼接。properties的拼接就完成了。</li><li>在表单填写的时候，采取对存储的模型skuModel属性作更改。而每一项skuModel 所存储的map 字典的key 是由排列组合得到的UI显示的拼接字符窜。如商品手机：  64G+黑色+标准版。 方便在cell显示的时候直接读取。</li><li>UI交互上提供批量和条件过滤快速筛选 进行填写每一项明细的表单值。有利于商户高效填写设置sku 组合。</li></ol><h3 id="以下几个UI页面，仅供参考"><a href="#以下几个UI页面，仅供参考" class="headerlink" title="以下几个UI页面，仅供参考"></a>以下几个UI页面，仅供参考</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/chat_sku_type2.png" alt="图片"><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/sku_dataFill2.png" alt="图片"><br><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/youzan_filterType.png" alt="图片"><br>百度脑图：<a href="http://naotu.baidu.com/file/48e5a2c0af5d6fedda96e619496fce1e?token=e8f378cc6af83daf" target="_blank" rel="noopener">店铺商品 与 产品库 功能操作关系图</a></p><p>文章代码片段较多，但也都是技术核心部分。里面逻辑性较强，需要慢慢理解透彻。希望能对再看的你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SKU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SKU商品属性多级动态树</title>
      <link href="/2019/04/25/skuTree/"/>
      <url>/2019/04/25/skuTree/</url>
      
        <content type="html"><![CDATA[<h1 id="GYLevelTree"><a href="#GYLevelTree" class="headerlink" title="GYLevelTree"></a>GYLevelTree</h1><p>SKU 商品属性 价格或库存 设置； 动态多层级树，自由排列组合，递归，深拷贝,浅拷贝;  </p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/sku_2.PNG" alt="图片2"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/sku_3.PNG" alt="图片3"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/sku_5.PNG" alt="图片5"></p><p><a href="https://github.com/GaoYingQiu/GYLevelTree" target="_blank" rel="noopener">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SKU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义双向Slider选范围</title>
      <link href="/2019/04/20/doubleSliderRange/"/>
      <url>/2019/04/20/doubleSliderRange/</url>
      
        <content type="html"><![CDATA[<h1 id="GYSliderBar"><a href="#GYSliderBar" class="headerlink" title="GYSliderBar"></a>GYSliderBar</h1><p>双向Slider, 选择范围控件；支持阶梯值滑动； 可用于筛选界面，筛选价格，其他业务等；</p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/gySliderBar.PNG" alt="图片"></p><p><a href="https://github.com/GaoYingQiu/GYSliderBar" target="_blank" rel="noopener">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Slider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年四月</title>
      <link href="/2019/04/16/2019_April/"/>
      <url>/2019/04/16/2019_April/</url>
      
        <content type="html"><![CDATA[<p>时间在快马加鞭地前行，身边的人，在做的事，也都发生了变化；回顾过去一年，做过的项目不少，也经历了生命周期销毁的企业；那些盲目迭代没有思考力地堆砌功能对于用户来说是多余无用的，对于整个产品战略来说似乎渐渐步入深渊；过去一年的开发中，自己也变得被动，整个思考力和行为都被牵着走； “安分守己”一词 形容自己成了一个”标准“的职业码农，时间之河上，有一刻 似乎意识到脑洞齿轮已经生锈 转动缓慢，对，需要着手动起来了，起身，去做！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决ScrollView嵌套多手势冲突问题</title>
      <link href="/2019/02/14/scrollViewNested/"/>
      <url>/2019/02/14/scrollViewNested/</url>
      
        <content type="html"><![CDATA[<p>嵌套ScrollView, ScrollView嵌套CollectView, Tab随内容固定滑动到顶部，解决UIScrollView 多手势冲突；</p><h3 id="ScrollView-嵌套ScrollView"><a href="#ScrollView-嵌套ScrollView" class="headerlink" title="ScrollView 嵌套ScrollView"></a>ScrollView 嵌套ScrollView</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/scrollview_pan.PNG" alt="图片"></p><h3 id="ScrollView-嵌套CollectionView"><a href="#ScrollView-嵌套CollectionView" class="headerlink" title="ScrollView 嵌套CollectionView"></a>ScrollView 嵌套CollectionView</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/scrollview_pan1.PNG" alt="图片1"></p><h3 id="Demo-源码"><a href="#Demo-源码" class="headerlink" title="Demo 源码"></a>Demo 源码</h3><p><a href="https://github.com/GaoYingQiu/GYNestedScrollview" target="_blank" rel="noopener">Demo源码</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义日期选择视图</title>
      <link href="/2019/02/11/customerDatePicker/"/>
      <url>/2019/02/11/customerDatePicker/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义日期选择视图"><a href="#自定义日期选择视图" class="headerlink" title="自定义日期选择视图"></a>自定义日期选择视图</h3><p><img src="https://qyanblog.oss-cn-shenzhen.aliyuncs.com/datePicker1.PNG" alt="图片1"></p><h3 id="Demo-源码"><a href="#Demo-源码" class="headerlink" title="Demo 源码"></a>Demo 源码</h3><p><a href="https://github.com/GaoYingQiu/GYDatePicker" target="_blank" rel="noopener">Demo源码</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DatePicker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转盘抽奖小功能</title>
      <link href="/2019/02/09/sweepstakes/"/>
      <url>/2019/02/09/sweepstakes/</url>
      
        <content type="html"><![CDATA[<p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/WechatIMG8.jpeg" alt="图片"></p><p><a href="https://github.com/GaoYingQiu/Rotary-Draw" target="_blank" rel="noopener">抽奖功能模块源码</a><br><strong><em>产品出发点</em></strong><br>1、通过动态抽奖数据和排行激发用户抽奖消费；<br>2、通过技能和宝石等以及转盘的燃爆值，中奖率翻倍等等吸引用户；<br>3、根本上是为了激发用户活跃性以及刺激消费</p><p><strong><em>技术难点</em></strong><br>1、抽奖转盘分为两种转盘，业务逻辑分一个parentVC 管理两个 子 VC；<br>2、抽奖奖品服务端返回，显示在每一个扇形区域的中间，金额同似；<br>3、点击抽奖，拿到奖品id,  找出是在转盘中的哪个区域，让转盘指针停止在那一区域；<br>4、抽奖动态弹幕；<br>5、燃烧值 和 倒计时的控制；</p><p><strong><em>业务操作说明</em></strong><br>1、两个转盘，某个转盘点击开始抽奖 互不影响； 黄金转盘具有宝箱和技能；<br>2、每抽取一次，扣除相应的金额，如有中奖，则弹出中奖奖品；抽奖分为单次，十连抽，三十连抽等；<br>3、抽奖后产生记录；在记录中可看到每次抽奖消费情况；<br>4、转盘有燃烧值，当满时候，触发倒计时3分钟，倒计时内 中奖率将翻倍；<br>5、燃烧值每3秒刷新一次，当中途离开再次打开，则拿到最新倒计时显示；<br>6、弹幕从最新100条记录 每隔2秒随机生成一条记录；</p><p><strong><em>模块设计</em></strong><br>1、整个框架布局在一个  MainVC中控制转盘类型，请求余额，通知等刷新金额； 管理childVC ；<br>2、childVC 中 处理抽奖业务逻辑；UI 布局，抽奖请求，  燃烧值处理，弹幕处理；<br>3、其他功能性子View 单独自定义视图；   转盘视图，燃烧值进度视图，倒计时进度视图， 弹窗类视图；弹幕视图；<br>4、弹窗类视图 以一个ParentView公共视图容器 ，其中子视图由枚举参数值控制自定义；有玩法视图，记录视图，保险视图，技能视图，排行榜视图；<br><a id="more"></a></p><p><strong><em>弹幕处理</em></strong><br>NSTimer 每2秒中往弹幕父视图中添加一条弹幕view;<br>CADisplayLink  调动 setNeedsDisplay 方法 触发 系统drawRect 方法；<br>drawRect 方法中 ，把弹幕父视图所有的弹幕都每次移动x值，再 移除屏幕中的弹幕 x值 小于0 的弹幕（判断 每条弹幕view  有自己的位置）；</p><p><strong><em>倒计时处理</em></strong><br>在自定义视图中 ，drawRect 方法中 贝塞尔曲线 绘制 两个曲线园；clockwise 逆方向；  每次通过设置剩余时间 调用setNeedLayout 会触发drawRect ; 倒计时启动timer，每0.05秒 重复一次，改变剩余时间；剩余时间 小于 或 为0 时候，则倒计时走完，停止timer;</p><p><strong><em>转盘处理</em></strong><br>一个点围绕 某个起点 旋转 n 度 后 的转标  通过这个公式计算 ： #define pointRotatedAroundAnchorPoint(point,anchorPoint,angle) CGPointMake((point.x-anchorPoint.x)<em>cos(angle) - (point.y-anchorPoint.y)</em>sin(angle) + anchorPoint.x, (point.x-anchorPoint.x)<em>sin(angle) + (point.y-anchorPoint.y)</em>cos(angle)+anchorPoint.y)</p><p>拿到奖品后，根据扇形个数 计算每个扇形的角度，正起点方向  为原点 旋转角度以便设置每个奖品的中心位置point ； 和transform; </p><p>转盘指针停在的位置： 指针不动，实际是转动底盘； 需将底盘视图 旋转到固定角度即可；顺时针是 360度 -  固定角度； 每次转动前，需将上一次转动角度归位；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *layer &#x3D; [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 顺时针(所有这里需要用360-对应的角度) 逆时针不需要</span><br><span class="line">layer.toValue &#x3D; @((M_PI*2 - (_perSection*index +_perSection*0.5)) + M_PI*2*4); &#x2F;&#x2F;先转4圈</span><br><span class="line">layer.duration &#x3D; 4;</span><br><span class="line">layer.removedOnCompletion &#x3D; NO;</span><br><span class="line">layer.fillMode &#x3D; kCAFillModeForwards;</span><br><span class="line">layer.timingFunction &#x3D; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];</span><br><span class="line">layer.delegate &#x3D; self;</span><br><span class="line"></span><br><span class="line">[self.gameBgView.layer addAnimation:layer forKey:nil];</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(void)backToStartPosition&#123;</span><br><span class="line">    &#x2F;&#x2F;归位</span><br><span class="line">    CABasicAnimation *layer &#x3D; [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation&quot;];</span><br><span class="line">    layer.toValue &#x3D; @(0);</span><br><span class="line">    layer.duration &#x3D; 0.001;</span><br><span class="line">    layer.removedOnCompletion &#x3D; NO;</span><br><span class="line">    layer.fillMode &#x3D; kCAFillModeForwards;</span><br><span class="line">    [self.gameBgView.layer addAnimation:layer forKey:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>弹出视图</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line">#import &quot;PrizeRecord.h&quot;</span><br><span class="line"></span><br><span class="line">typedef void(^GYActionDateDoneBlock)(id selectedDate);</span><br><span class="line"></span><br><span class="line">typedef enum : NSInteger &#123;</span><br><span class="line">Prize_Ranking, &#x2F;&#x2F;抽奖</span><br><span class="line">Prize_Gift, &#x2F;&#x2F;奖品</span><br><span class="line">Prize_SkillDesc, &#x2F;&#x2F;描述</span><br><span class="line">Prize_PlayDesc, &#x2F;&#x2F;描述</span><br><span class="line">Prize_Record, &#x2F;&#x2F;中奖记录</span><br><span class="line">Prize_RecordDetail &#x2F;&#x2F;中奖详情</span><br><span class="line">&#125; PrizeStyle;</span><br><span class="line"></span><br><span class="line">@interface GYPrizeContairView : UIView</span><br><span class="line"></span><br><span class="line">- (instancetype)initSheetStyle:(PrizeStyle)prizeStyle actionBlock:(GYActionDateDoneBlock)actionDateDoneBlock;</span><br><span class="line"></span><br><span class="line">-(void)showInView;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;中奖奖品；</span><br><span class="line">-(void)fetch_Prize_Gift:(NSArray *)datas;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认选中查询的转盘</span><br><span class="line">-(void)fetch_Record_DefaultChooseSelect:(DrawPrizeType)drawType;</span><br><span class="line">-(void)fetch_Record_Detail:(PrizeRecord *)record;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排行榜</span><br><span class="line">-(void)fetch_Ranking_DrawType:(DrawPrizeType)drawType;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if(_sheetCellStyle &#x3D;&#x3D; Prize_Ranking)&#123;</span><br><span class="line">    [self createRankingView]; &#x2F;&#x2F;排行榜；</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;排行榜&quot;;</span><br><span class="line">&#125;else if(_sheetCellStyle &#x3D;&#x3D; Prize_Gift)&#123;</span><br><span class="line">    [self createPrizeGiftView]; &#x2F;&#x2F;奖品</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;恭喜您获得以下奖品&quot;;</span><br><span class="line">&#125;else if(_sheetCellStyle &#x3D;&#x3D; Prize_SkillDesc)&#123;</span><br><span class="line">    [self createSkillDescView]; &#x2F;&#x2F;技能描述</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;技能&quot;;</span><br><span class="line">&#125;else if(_sheetCellStyle &#x3D;&#x3D; Prize_PlayDesc)&#123;</span><br><span class="line">    [self createPlayPrizeDescView]; &#x2F;&#x2F;技能描述</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;玩法说明&quot;;</span><br><span class="line">&#125;else if(_sheetCellStyle &#x3D;&#x3D; Prize_Record)&#123;</span><br><span class="line">    [self createPlayPrizeRecordView]; &#x2F;&#x2F;技能记录描述</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;抽奖记录&quot;;</span><br><span class="line">&#125;else if(_sheetCellStyle &#x3D;&#x3D; Prize_RecordDetail)&#123;</span><br><span class="line">    [self createPlayPrizeDetailRecordView]; &#x2F;&#x2F;奖品记录详情</span><br><span class="line">    titleLabel.text &#x3D;  @&quot;抽奖详情&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：<br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/WechatIMG9.jpeg" alt="图片2"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/prize_01.jpeg" alt="图片"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/prize_02.jpeg" alt="图片"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/prize_03.jpeg" alt="图片"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/prize_04.jpeg" alt="图片"></p><p><a href="https://github.com/GaoYingQiu/Rotary-Draw" target="_blank" rel="noopener">抽奖功能模块源码</a> </p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽奖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图多手势的应用</title>
      <link href="/2018/09/28/mapGesture/"/>
      <url>/2018/09/28/mapGesture/</url>
      
        <content type="html"><![CDATA[<p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/WechatIMG253.jpeg" alt="图片"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/WechatIMG252.jpeg" alt="图片2"><br>当需要在地图上层覆盖一个列表时候，我们想看到更多的内容，列表被拉出来后翻看数据；<br>当想收起时候，可用下拉，或者随着手势滑落下来；</p><p>需解决的问题：<br>1、滑动表格，地图不移动；手势来回滑时候，列表要跟着高度变化；<br>2、当滑到最高时候，不再往上滑动；相反，滑到最低高度时候不再继续向下；<br>3、滑上去之后，再往下滑动 不影响列表数据的查看与浏览；</p><p><strong>思考</strong></p><p>手势开始：记录 开始点startY，</p><p>手势移动：<br>根据起始位置移动差  确定上滑动 ， 下滑动；  </p><p>起点B 点 记录方向 0；<br>B-A 正向， 记录方向符号 1；<br>B-C 反向 ，记录方向 -1；</p><p>偏移值 大于0 ， 上滑动；<br>当B-A-C 后，立马记录 1 变成 -1；    记录标记状态前，</p><p>正向如：B-A 的过程 ，需判断是否为 为 -1 到1 还是 0-1 ， 如果是-1 则是来回拖动；否则为正向拖动；</p><p><strong><em>code :以下是重点逻辑代码；</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">if(gestureRecognizer.state &#x3D;&#x3D; UIGestureRecognizerStateChanged)&#123;</span><br><span class="line">    CGPoint point &#x3D; [gestureRecognizer locationInView:self.view];</span><br><span class="line"></span><br><span class="line">    CGFloat topDistance &#x3D; startSpanPoint.y - point.y;</span><br><span class="line">    if(topDistance &gt;0)&#123; &#x2F;&#x2F;&gt;100 就是向上滑，但是要控制滑动的距离限制；</span><br><span class="line"></span><br><span class="line">        if(pointB1_Y &#x3D;&#x3D; -1)&#123;</span><br><span class="line">        blChange &#x3D; YES; &#x2F;&#x2F;记录从往下变成往上；</span><br><span class="line">        &#125;else if(pointB1_Y &#x3D;&#x3D; 0)&#123;</span><br><span class="line">        blChange &#x3D; NO; &#x2F;&#x2F;方向没有变更；</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pointB1_Y &#x3D; 1; &#x2F;&#x2F;记录当前是往上推；</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;往上推；</span><br><span class="line">        if(self.tableView.top &#x3D;&#x3D; self.listViewMinTop)&#123;</span><br><span class="line">            self.tableView.scrollEnabled &#x3D; YES;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(self.datas.count &gt; 0)&#123; &#x2F;&#x2F;无数据时候 不给往上推</span><br><span class="line">                &#x2F;&#x2F;向上；上剩多少留多少 ;</span><br><span class="line">                if(bBottom_Top_Flag &#x3D;&#x3D; NO)&#123;</span><br><span class="line">                    if(!blChange &amp;&amp; self.mapViewHeight - topDistance &gt;&#x3D; self.listViewMinTop)&#123;</span><br><span class="line">                    self.tableView.top &#x3D; self.mapViewHeight - topDistance;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    if(self.mapViewHeight - topDistance &gt;&#x3D; self.listViewMinTop)&#123;</span><br><span class="line">                    self.tableView.top &#x3D; self.mapViewHeight - topDistance;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(topDistance&lt;0)&#123;</span><br><span class="line"></span><br><span class="line">        if(pointB1_Y &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        blChange &#x3D; YES; &#x2F;&#x2F;记录从往上变成往下；</span><br><span class="line">        &#125;else if(pointB1_Y &#x3D;&#x3D; 0)&#123;</span><br><span class="line">        blChange &#x3D; NO; &#x2F;&#x2F;方向没有变更；</span><br><span class="line">        &#125;</span><br><span class="line">        pointB1_Y &#x3D; -1; &#x2F;&#x2F;记录当前是往下拉；</span><br><span class="line"></span><br><span class="line">        if(self.tableView.contentOffset.y&lt;&#x3D;0 &amp;&amp; self.tableView.top &lt; self.mapViewHeight)&#123; &#x2F;&#x2F;并且是在顶部小于0时候</span><br><span class="line"></span><br><span class="line">            self.tableView.contentOffset &#x3D; CGPointMake(0, 0); &#x2F;&#x2F;可写可不写；</span><br><span class="line">            self.tableView.scrollEnabled &#x3D; NO;</span><br><span class="line"></span><br><span class="line">            if(bBottom_Top_Flag &#x3D;&#x3D; YES)&#123;</span><br><span class="line">                if(!blChange &amp;&amp; self.listViewMinTop - topDistance &lt;&#x3D; self.mapViewHeight)&#123;</span><br><span class="line">                self.tableView.top &#x3D; self.listViewMinTop - topDistance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(self.listViewMinTop - topDistance &lt;&#x3D; self.mapViewHeight)&#123;</span><br><span class="line">                self.tableView.top &#x3D; self.listViewMinTop - topDistance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单独写了个demo-，仿boss-直聘-查看更多职位，仿哈喽出现-app-扫码底部按钮-查看更多活动"><a href="#单独写了个demo-，仿boss-直聘-查看更多职位，仿哈喽出现-app-扫码底部按钮-查看更多活动" class="headerlink" title="单独写了个demo ，仿boss 直聘 查看更多职位，仿哈喽出现 app 扫码底部按钮 查看更多活动"></a>单独写了个demo ，仿boss 直聘 查看更多职位，仿哈喽出现 app 扫码底部按钮 查看更多活动</h3><p><a href="https://github.com/GaoYingQiu/GYSlideOnView" target="_blank" rel="noopener">Demo 源码</a><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/slide2OnView.png" alt="图片2"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/slide1OnView.png" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC设计模式见解</title>
      <link href="/2018/09/28/mvc/"/>
      <url>/2018/09/28/mvc/</url>
      
        <content type="html"><![CDATA[<p>（控制器Controller）- 负责转发请求，网络处理，控制业务逻辑。</p><p>（视图View） - 页面视图UI交互； 模型与视图不能通信，需通过控制器controller来实现；</p><p>（模型Model） -  数据业务模型的呈现； 涉及到的UI 改动， 数据驱动UI，改动数据状态即可实现UI的变更；</p><hr><h2 id="演进（ViewModel模型）-在原有MVC-基础上多了一层，Controller不直接控制Model-直接操作ViewModel-来间接管理；-ViewModel-（NSObject）的职责：数据逻辑处理-控制，算法，解析，网络处理等等；-不直接管理View"><a href="#演进（ViewModel模型）-在原有MVC-基础上多了一层，Controller不直接控制Model-直接操作ViewModel-来间接管理；-ViewModel-（NSObject）的职责：数据逻辑处理-控制，算法，解析，网络处理等等；-不直接管理View" class="headerlink" title="演进（ViewModel模型） - 在原有MVC 基础上多了一层，Controller不直接控制Model,   直接操作ViewModel 来间接管理； ViewModel （NSObject）的职责：数据逻辑处理,控制，算法，解析，网络处理等等；  不直接管理View;"></a>演进（ViewModel模型） - 在原有MVC 基础上多了一层，Controller不直接控制Model,   直接操作ViewModel 来间接管理； ViewModel （NSObject）的职责：数据逻辑处理,控制，算法，解析，网络处理等等；  不直接管理View;</h2><p>三层模式可有效降低项目偶尔度，有效业务规整，分类； 大大提高项目开发效率；</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种典型的设计模式</title>
      <link href="/2018/09/28/designPatterns/"/>
      <url>/2018/09/28/designPatterns/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">----------  简单工厂模式：---------- </span><br><span class="line"></span><br><span class="line">定义一个计算接口。 </span><br><span class="line"></span><br><span class="line">定义四个加减乘除 的具有该接口功能 的类。</span><br><span class="line"></span><br><span class="line">定义一个工厂类。 用来创建 不同的 接口功能类。 </span><br><span class="line"></span><br><span class="line">根据不同的需要，通过 接口 接收对象， 调用不同的功能操作类的实现方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------  模板模式：---------- </span><br><span class="line"></span><br><span class="line">父类运行的时候，调用子类 重写的方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------  工厂模式：---------- </span><br><span class="line"></span><br><span class="line">定义一个接口功能。 两个数变量  ，有计算功能。 </span><br><span class="line"></span><br><span class="line">定义 不同的 功能接口实现类。 使用变量时候 用  @synthesize numberA &#x3D; _numberA;</span><br><span class="line"></span><br><span class="line">定义一个类，定义创建工厂方法，不实现。改抽象工厂  具有计算接口功能。</span><br><span class="line"></span><br><span class="line">定义不同的工厂子类，实现创建工厂对象。 </span><br><span class="line"></span><br><span class="line">调用的时候，通过 不同的计算方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------  责任模式：---------- </span><br><span class="line"></span><br><span class="line">请假：</span><br><span class="line"></span><br><span class="line">定义一个 领导。 Manager  领导 具有批准请假功能。 内包含直属领导。</span><br><span class="line"></span><br><span class="line">领导有三级层次的领导。（内包含直属领导。如果自己审批时候发现 需要直属领导审批 则直接让直属领导操作）</span><br><span class="line"></span><br><span class="line">普通请假 普通领导批准，请假天数超过一定数需要更高级领导 批准。 普通领导 有直属 领导 。 普通领导处理时候 一级一级 处理上去 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------  命令模式，享元模式：---------- </span><br><span class="line"></span><br><span class="line">定义一个菜单。Order . </span><br><span class="line"></span><br><span class="line">菜单有很多种菜单。 子类 order .  菜单中  厨师 cook  执行这个菜单。</span><br><span class="line"></span><br><span class="line">多个客户下单 。 waiter 统一接受 菜单。（不管点的什么菜）。</span><br><span class="line"></span><br><span class="line">watier 去传达给 cook 去 做不同的菜系。调用不同的子类菜单 让厨师去 做菜。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS连接过程</title>
      <link href="/2018/09/25/https/"/>
      <url>/2018/09/25/https/</url>
      
        <content type="html"><![CDATA[<p>【HTTPS连接过程】<br>https协议就是http+ssl协议，如下图所示为其连接过程：<br>￼<img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/20170509100144426.jpg" alt="图片"></p><p>1.https请求<br>客户端向服务端发送https请求；<br>2.生成公钥和私钥<br>服务端收到请求之后，生成公钥和私钥。公钥相当于是锁，私钥相当于是钥匙，只有私钥才能够打开公钥锁住的内容；<br>3.返回公钥<br>服务端将公钥（证书）返回给客户端，公钥里面包含有很多信息，比如证书的颁发机构、过期时间等等；<br>4.客户端验证公钥<br>客户端收到公钥之后，首先会验证其是否有效，如颁发机构或者过期时间等，如果发现有问题就会抛出异常，提示证书存在问题。如果没有问题，那么就生成一个随机值，作为客户端的密钥，然后用服务端的公钥加密；<br>5.发送客户端密钥<br>客户端用服务端的公钥加密密钥，然后发送给服务端。<br>6.服务端收取密钥，对称加密内容<br>服务端收到经过加密的密钥，然后用私钥将其解密，得到客户端的密钥，然后服务端把要传输的内容和客户端的密钥进行对称加密，这样除非知道密钥，否则无法知道传输的内容。<br>7.加密传输<br>服务端将经过加密的内容传输给客户端。<br>8.获取加密内容，解密<br>客户端获取加密内容后，用之前生成的密钥对其进行解密，获取到内容。<br>中间人劫持攻击<br>https也不是绝对安全的，如下图所示为中间人劫持攻击，中间人可以获取到客户端与服务器之间所有的通信内容。<br>￼￼<img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/20170509104722086.jpg" alt="图片"></p><p>中间人截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信；将服务器返回给客户端的内容发送给客户端，伪装成服务器与客户端进行通信。<br>通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。<br>使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新浪微博 推和拉</title>
      <link href="/2018/09/25/sinaPullPush/"/>
      <url>/2018/09/25/sinaPullPush/</url>
      
        <content type="html"><![CDATA[<p>每个人的feed就是一个list，存储到redis;<br>用户前端产生的所有事件 发送到消息队列 RabbitMQ,<br>Server 根据 业务逻辑将新的item插入到下游用户的feed里面；</p><p>在线推，推给活跃在线用户，离线拉；</p><p>任务调度 ：选用了Celery；</p><p>每个用户都有一个收件箱 和 发件箱；保存自己发过的动态以及Feed动态；</p><p>用户A关注了用户B ， 用户B发布动态则将动态推进用户A的feed，这里使用redis的zset实现，sort为time（记得以毫秒为时间戳，秒级在数据量达到一定程度后，会有读取不到的问题，比如以时间戳为分页页码），value为具体的动态 ID（为什么是动态ID， 其实很简单， 就是因为动态的内容可以进行缓存，在redis里面全部走ID，修改动态内容也需要修改一处，动态内容可以保存在hash结构里）， 每个用户维护一个zset保存我发布的动态，一个zset保存我的feed动态，过期时间3~7天看情况而定。</p><p>全局维护一个在线用户列表，怎么设计这个就自己琢磨了，为了防止用户挂后台导致与服务端为离线状态，所以最好是1~3小时未操作或者离线时间不大于3小时的，都当做在线处理，</p><p>那么，当用户发了一条动态后，后台会有以下这些操作：</p><p>在线推： 异步遍历在线的粉丝，将动态ID，添加到粉丝的Feed中。</p><p>离线拉： 离线用户打开APP后，我们是会请求一个公共的入口接口，主做统计以及其他初始化操作，在这里，我们也开了一个异步线程，对用户进行Feed更新操作，防止用户进入APP后等待拉取时间过长，毕竟关注成千上万的人肯定有（其实万单位以下遍历都很快）。拉取过程其实就是把自己最后一条Feed的时间戳取出，去遍历关注的人的feed，将大于该时间的ID全部拉取回来。用户进入APP后，刷新即可看到最新操作。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊动态多类型cell的设计</title>
      <link href="/2018/09/25/typeCells/"/>
      <url>/2018/09/25/typeCells/</url>
      
        <content type="html"><![CDATA[<p>红包实体，文章实体  都属于动态 ，定义时候实现该协议DynamicPro,相当于java中的接口。<br>dataList 数组中 存放的是通过网络请求拿到的 DynamicPro 类型的动态列表。</p><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">@protocol</span> <span class="title">DynamicPro</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"> <span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"> 红包实体，文章实体  都属于动态 ，定义时候实现该协议DynamicPro。</span><br><span class="line"> dataList 数组中 存放的是通过网络请求拿到的 DynamicPro 类型的动态列表。</span><br><span class="line"> </span><br><span class="line"> DynamicCell: <span class="built_in">UITableViewCell</span></span><br><span class="line"> &#123;</span><br><span class="line"> 属性  Id&lt;DynamicPro&gt; dynamic;  <span class="comment">//文章动态，普通动态，直播动态，红包类型动态</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">@implementation</span> <span class="title">DynamicCell</span></span></span><br><span class="line"> -(<span class="keyword">void</span>)setDynamic:(<span class="keyword">id</span>&lt;DynamicPro&gt;)dynamic&#123;</span><br><span class="line"> _dynamic = dynamic;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//DynamicCell 有很多子类cell:  红包cell ,文章cell,直播cell 等</span></span><br><span class="line"> <span class="comment">//在子类cell  渲染具体UI数据绑定</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 表格 cellFor 渲染的时候：&#123; </span><br><span class="line"> DynamicPro *dynamic  = <span class="keyword">self</span>.dataList[indexPath.row]; </span><br><span class="line"> DynamicCell * cell =  [红包cell  new]; <span class="comment">//根据dynamic类型 创建 不同的 动态cell</span></span><br><span class="line"> <span class="comment">//最终统一设置动态数据</span></span><br><span class="line"> [cell setDynamic: dynamic];</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 表格高度 heightFor 渲染的时候：&#123;</span><br><span class="line"> </span><br><span class="line"> DynamicPro *dynamic  = <span class="keyword">self</span>.dataList[indexPath.row]; </span><br><span class="line"> <span class="keyword">if</span>(dynamic 高度不变的)&#123;</span><br><span class="line"> <span class="keyword">return</span>  <span class="number">44</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">//高度变动的用自动布局</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 表格 estimatedHeightForRowAtIndexPath 进行自动布局的估算</span><br><span class="line"> &#123; <span class="keyword">return</span> <span class="number">100</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于聊天页面的多类型消息的封装</title>
      <link href="/2018/07/21/messageUIDesign/"/>
      <url>/2018/07/21/messageUIDesign/</url>
      
        <content type="html"><![CDATA[<p>消息布局观察：周边头像，昵称，间距  ，气泡 及其他统一，内容视图挖空； 采取自定义注入视图配置；</p><p>从CellFor 方法说起；聊天消息页面，我们看到 有 聊天消息 还有时间戳；根据 ModelItem项 的 class类型 分别去创建 两种cell ; 只里只讲 聊天消息cell;   </p><p>流程：当为聊天消息Model 时候，名  messageModel（messageModel 里面 大致有以下属性:   记录消息模型，消息布局，头像，昵称 显示控制，消息内容size; （不足 后补））； 取得消息布局； 相对应的content类字符串；根据 identify = content 去重用cell (不同消息类型重用标识不同 );   创建MessageCell 根据 content 去创建 对应的内容视图 即可；再刷新视图数据 赋值； </p><p>布局来源：定义 一个 layoutconfigInterface;<br>layoutconfig 配置包含：{<br>1）message的内容大小；<br>2）需要创建显示的CellContent 类名<br>3）气泡的配置间距等<br>4）控制是否显示头像<br>5）控制是否 显示昵称<br>6）控制消息显示在左边还是在右边 （是否是自己发的）<br>}</p><p>Content来源<br>1、contentConfigInterface 接口：<br>考虑到message的内容大小 和 cellContent 类名 是 属于 CellContent 配置； 于是 考虑用一个 cellConentConfigFactory 的工厂来生产这些配置 ； </p><p>2、contentConfigInterface 实列<br>message的内容大小 和 cellContent 类名 抽出来 定义一个接口 ContentConfigInterface；<br>（考虑到有文本配置，图片配置，以及图文配置，后期 的扩展 声音配置，红包配置 ， 好友分享配置） 准备一个超级父类<br>BaseContentConfig （具有message属性，方便计算message内容的大小）；   后期配置只需继承 BaseContentConfig、实现ContentConfigInterface 接口 方法即可；</p><p>3、最终要把配置contentConfigInterface 这样的实列 反馈给 布局管理器;  为了不暴露太多的详细contentConfig 细节 以及 低耦合；用一个<br>ConentConfigFactory 工厂生产这些配置玩意 ，根据消息类型  返回 消息内容配置 contentConfig （工厂单列，实列化的时候 创建了一个Map或者字典， 记录了消息类型 对应的 消息contentConfig;） </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS客户端请求模块</title>
      <link href="/2018/07/20/iOSNetworkDesign/"/>
      <url>/2018/07/20/iOSNetworkDesign/</url>
      
        <content type="html"><![CDATA[<h2 id="探究原生网络请求"><a href="#探究原生网络请求" class="headerlink" title="探究原生网络请求"></a>探究原生网络请求</h2><h2 id="业务接口API设计与网络请求"><a href="#业务接口API设计与网络请求" class="headerlink" title="业务接口API设计与网络请求"></a>业务接口API设计与网络请求</h2><h2 id="Swift-版-Alnofire-框架使用"><a href="#Swift-版-Alnofire-框架使用" class="headerlink" title="Swift 版 Alnofire 框架使用"></a>Swift 版 Alnofire 框架使用</h2><h2 id="Swift-中的Json解析"><a href="#Swift-中的Json解析" class="headerlink" title="Swift 中的Json解析"></a>Swift 中的Json解析</h2><p>VC 发起请求， 一个专门发请求的发射器；我给它取名字 叫 NetManager , 显然 ，为 了不重复创建http 请求基础配置（请求头，Https证书配置等），这是个单例；</p><p>发射器 发的是请求； 考虑到每个业务 都有不同的请求；我准备了 一个 超级父类请求 ；取名 DataRequest;  具体的请求，只需传 具体的子类request；</p><p>一个APP 请求有很多，为了区分 及 维护方便 ，于是我定义了一个枚举；每个业务请求，只需给它表明一个标识；</p><p>请求具有什么特性呢？ 1）有请求的API url地址，2）请求的参数，请求的标识（请求的枚举值）， 3）对请求回来的数据解析好封装（业务数据封装等处理）；   于是我定义了一个名叫APIInterface 的接口协议； 父类请求去实现这个APInterface接口协议； 子类去Override 这几个方法即可；</p><p>发出一个请求，必然有 回答；要么成功，要么失败 （有的失败是业务码失败）； 于是 ，我定义了已一个请求回调的接口；RequestCallBackInterface ； （具有三个方法： 业务成功，业务失败，网络其他原因失败）</p><p>我从VC 发出去的请求，相当于Android 的Activity; 熟称视图控制器；当然是希望请求回调 回到 视图控制器；<br>于是我 在 基类视图控制器 BaseViewController 或者BaseActivity(Android)  实现 请求回调 接口协议；实现其中的方法。<br>具体视图控制器 继承基类，  只需覆盖Override 这三个方法 （具体VC 实现回调后的业务）</p><p>最后；页面逻辑就显示得比较简单了，一个单例 NetManager  执行一个 DataRequest (传具体请求子类) ； 视图控制器在具体RequestCallBackInterface  的回调方法 中处理 成功 ，失败后的数据； </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录请求</span></span><br><span class="line"><span class="keyword">self</span>.loginRequest.userLogin = <span class="keyword">self</span>.userName;</span><br><span class="line"><span class="keyword">self</span>.loginRequest.userPass =  <span class="keyword">self</span>.userPwd;</span><br><span class="line">[[GYNetworkingManager shareInstance] executeRequest:<span class="keyword">self</span>.loginRequest];</span><br><span class="line"></span><br><span class="line"><span class="comment">//朋友圈列表请求</span></span><br><span class="line"><span class="keyword">self</span>.dynamicListRequest.pageIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">self</span>.dynamicListRequest.pageSize = <span class="number">20</span>;</span><br><span class="line">[[GYNetworkingManager shareInstance] executeRequest:<span class="keyword">self</span>.dynamicListRequest];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onRequestSuccess:(BaseResponse *)response</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (response.requestAPICode ) &#123;  <span class="comment">//请求的枚举</span></span><br><span class="line"><span class="keyword">case</span> Http_Login:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回的登录对象</span></span><br><span class="line"><span class="comment">// LoginData *data  = response.responseObject;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> Http_DynamicList:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是列表,则从取数组</span></span><br><span class="line"><span class="built_in">NSArray</span> *dataList  = response.tableList.dataList;</span><br><span class="line">[<span class="keyword">self</span> allLoadingCompleted:dataList];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个杯子的8中营销方式</title>
      <link href="/2017/09/04/marketingMethods/"/>
      <url>/2017/09/04/marketingMethods/</url>
      
        <content type="html"><![CDATA[<h4 id="一个杯子的8种营销方案："><a href="#一个杯子的8种营销方案：" class="headerlink" title="一个杯子的8种营销方案："></a>一个杯子的8种营销方案：</h4><ol><li>卖产品的本身使用价值，只能卖3元/个。</li><li>卖产品的文化价值，可以卖5元/个。</li><li>卖产品的品牌价值，可以卖7元/个。 （品牌标签）</li><li>卖产品的组合价值，卖15元/个。（情侣，亲情套装）</li><li>卖产品的延伸价值。（对人体有什么好处之类的）</li><li>卖产品的细分市场价值 （情侣套装，12生肖，卡通动漫 之类的，精装礼盒）</li><li>卖产品的包装价值。</li><li>买产品的纪念价值。</li></ol><h4 id="营销解码："><a href="#营销解码：" class="headerlink" title="营销解码："></a>营销解码：</h4><p>消费者往往购买商品时，除了产品本身的使用价值外，更多的是购买一种感觉，文化，期望，面子，圈子，尊严，尊重，理解，地位等象征性的意义。<br>同样一个杯子，杯子里面的世界，它的功能，结构，作用，依然如故，随着外面的包装，它的价值就在提升。<br>采用不同的价值创新策略，精美的策划，就会让你的产品价值大大提升。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>创业前的几点</title>
      <link href="/2017/09/04/beforeEntrepreneurship/"/>
      <url>/2017/09/04/beforeEntrepreneurship/</url>
      
        <content type="html"><![CDATA[<h4 id="创业建议"><a href="#创业建议" class="headerlink" title="创业建议"></a>创业建议</h4><p>在合作方面不一定要找和自己相差不多的，因为这样彼此的眼光或者视野都比较短浅，合伙本来就是一种互助和学习的机会！我认为找合适的是必须的，同时先要了解对方的为人，因为合伙很容易出纠纷的！</p><p>　　至于真正的合伙创业，我建议你慎重，至于网络工作室的想法是好的，一来你没有技术、没有太多的资金都不是最主要的问题，关键是，能否找到合适的人选！比如技术不到位下面的工作是无法继续的，同时技术需要专业，不然谈判的过程中没有说服力！</p><p>　　至于资金，网络工作室的起步资金不需要太高，再加上合伙创业要给对方希望，大家有共同兴趣和目标这样才行，不然一切都是空谈！生意如此，合作也是如此！</p><p>　　个人认为，一个网站的发展好坏，更多的取决于推广和管理运营，再好的商业模式，没有强有力的执行力也只不过是泡影而已。在这个过程中也认识不少做技术的朋友，开发了不少在技术上非常过硬的产品出来，做出不少有新概念的网站或者产品出来，但是我不知道他们在做的时候有没有考虑过市场的需求，或者有没有想过东西做出来谁会花钱买？</p><p>　　一个不懂技术的人，不一定就一定不懂互联网，试问当今的互联网创业的大亨们，有几个是正统科班出身的？马云、朱俊、史玉柱。。。。。。他们懂得更多的是什么东西赚钱，怎么去做能赚钱。比起追求理想和境界的技术大师们，显得更现实了一些，更铜臭味了一些。</p><h4 id="创业准备易犯的错误"><a href="#创业准备易犯的错误" class="headerlink" title="创业准备易犯的错误"></a>创业准备易犯的错误</h4><ol><li>准备不足。（认真思考和对待自己的创业，是不是能聚合做这件事需要的要素，包括经验积累，团队，启动资金，资质牌照，商务渠道等，最基本的是经验和团队，另外最起码要有团队领导力等）</li><li>过于重视点子，忽视执行。（创业的核心在执行。过于追求点子，一味求新求变，追求不同，反而导致一堆没有可执行性的计划。）</li><li>选择过于复杂，超出创业公司能力的项目。</li><li>长时间兼职创业。（创业准备，和研究时间不辞职是可以的，但长时间兼职创业是不可取的。兼职往往导致执行力低下，思考不深入，团队无法正真组建，不能吸引好的人加入。无法融资，最重要的是轻易放弃了市场机会。）</li><li>多线开发，同时想做太多的事情。希望产品功能丰富，堆砌功能，没有抓住核心需求和核心价值。不注意政策和限制，选择太狭窄的方向，不去考虑推广的渠道，盈利模式等。</li></ol><h4 id="什么是创业者"><a href="#什么是创业者" class="headerlink" title="什么是创业者"></a>什么是创业者</h4><ul><li>在做每一件事情的时候，把这个事情的每一个阶段的步骤，然后每个阶段里面的重要性，都想得非常清楚。</li><li><p>能够笼络非常好的优秀团队。要有优秀的能人。对产品的细节和操作流程要很敏感。及时发现自己的劣势，找到优势互补的合伙人。</p></li><li><p>敏锐的洞察力，善于把握一些创业机会。</p></li><li><p>创业的激情。创业者最重要的是问自己，解决的问题是什么，第二，为什么只有你能解决，第二就是你的执行力，或者你的判断力。</p></li><li>创业者是否同时具有格局的高度，又能够有执行力，既有独特的观点，又能够有空杯的心态去听取别人的意见，学习别人的长处。既有乐观的精神，又能够有这种危机的意识(可能来自巨头的打压和同行的竞争，所以要有危机潜意识)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何打造理想中的团队</title>
      <link href="/2017/09/04/goodTeam/"/>
      <url>/2017/09/04/goodTeam/</url>
      
        <content type="html"><![CDATA[<h3 id="一-诚实正直"><a href="#一-诚实正直" class="headerlink" title="一.诚实正直"></a>一.诚实正直</h3><ol><li>对自己诚实，方能看清楚真实的情况，进而能发现问题的所在，并找到问题的解决方案。</li></ol><h3 id="二-友善"><a href="#二-友善" class="headerlink" title="二.友善"></a>二.友善</h3><ol><li>友善是一种态度，这意味着在你与人相处时除了过于殷切和敌视之间，有着广阔的空间。</li></ol><h3 id="三-独立责任感"><a href="#三-独立责任感" class="headerlink" title="三.独立责任感"></a>三.独立责任感</h3><ol><li><p>你应该为你的所有选择负责任，你应该为你的工作效率负责任，你应该为你的时间规划负主要责任。你应该为你的薪酬和所得负主要责任，你应该为你的职业成长负主要责任。</p><h3 id="四-沟通能力"><a href="#四-沟通能力" class="headerlink" title="四.沟通能力"></a>四.沟通能力</h3></li><li><p>在高度竞争的市场下，单兵作战能取胜的例子越来越少了，相信拥有良好的沟通能力的天才所得的成就远高于那些孤独的天才。</p></li></ol><h3 id="五-灵活度"><a href="#五-灵活度" class="headerlink" title="五.灵活度"></a>五.灵活度</h3><ol><li>记得随时退后三步审视自己，包括团队在做的事，并做好随时推翻昨天自己的准备。</li><li>能否在必要时候高效地否定自己，及时承认自己考虑的错误和疏漏，并快速地切换到“如何修正错误和调整策略”上。</li></ol><h3 id="六-有效且小"><a href="#六-有效且小" class="headerlink" title="六.有效且小"></a>六.有效且小</h3><ol><li>小团队需要多面手，单兵素质远高于多面手，不仅仅意味着效率，还意味着跨领域跨技术的思维交叉。</li><li>小团队用较少成本实现大团队的用户规模，资金使用效率高。</li><li>同样资源情况下，小团的的生存期更长。</li><li>小团的内部沟通成本远低于大团队。意味着会议、人事、行政等边缘活动耗时更低。</li></ol><h3 id="七-锋利的一致性"><a href="#七-锋利的一致性" class="headerlink" title="七.锋利的一致性"></a>七.锋利的一致性</h3><ol><li>当团队价值观建立起来了后，团队本身具有了意识，其思考很行为都会有一定的自主性。这样更容易提高效率。</li><li>审美趣味一致性越早建立起来，产品和用户体验的设计师和开发过程越高校。</li></ol><h3 id="八-团队中的那些事儿"><a href="#八-团队中的那些事儿" class="headerlink" title="八.团队中的那些事儿"></a>八.团队中的那些事儿</h3><ol><li>正确看待Ta 的知识空缺。</li><li>保证良好的合作关系，心平气和地沟通，放低身段，耐心倾听和思考，不较真，融洽协作才是王者风范。</li><li>引导他们之间沟通。</li><li>坦诚。 与人交流，尤其是请教问题的时候，坦诚一点，错了就错了，没有想到就是没有想到，没有必要昂着头问问题。谦虚不会降低人的地位，降低身价的，往往是徒有的高调。</li><li>乐于分享果实。每周做一次技术交流，学习几个人的知识。</li><li>充分信任自己的伙伴， 放权让Ta去做。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>互联网思维到底说啥？</title>
      <link href="/2017/09/04/InternetThinking/"/>
      <url>/2017/09/04/InternetThinking/</url>
      
        <content type="html"><![CDATA[<h3 id="互联网思维指的是什么思维？"><a href="#互联网思维指的是什么思维？" class="headerlink" title="互联网思维指的是什么思维？"></a>互联网思维指的是什么思维？</h3><font color=orange>快速迭代，用户参与。</font>通过不断地迭代使产品日臻完善，而不是追求一次性做出完美的产品。并且，用户的反馈会作为设计决策的部分依据。<br><br>基于海量数据分析进行决策。互联网产品的一大便利是可以实时获取大量用户的行为数据，<font color=orange>基于这些数据可进行产品决策。</font>也可以采用AB测试等方法主动比较不同的设计方案。<br><br>病毒式营销，星火燎原。 利用互联网的传播特点，促成产品在社交网络，社会化媒体的渗透，并通过制造轰动性事件，争议性话题，实现大范围病毒传播，这是一种无本万利的营销手段。<br><br>小而美，少即多。互联网产品通常不追求大而全，而是抓住用户的某个痛点或价值点，针对性地做出定位明确的产品。在功能上尽量简单明确，即便要做大做复杂也是慢慢加上去的。<font color=orange>体验上尽量做到简单易上手。</font><p>免费策略，平台战争。 互联网产品大多不向用户直接收费，而是用免费策略极力争取用户，锁定用户。并且，同时致力于使Im，搜索引擎，浏览器，杀毒软件等从专用产品变成平台产品，凭借庞大的用户基数，推广和销售其他服务。</p><p>粉丝经济，草根品牌。培育和勾引死忠用户，壮大粉丝规模，营造粉丝文化乃至构建话语体系。同时必须在品牌中注入草根基因，放低身段，讨好甚至都弄粉丝，保持高频，全方位的互动，比较成功的互联网产品：小米，逻辑思维，梁欢。</p><p><font color=orange>激发用户创造，自组织构筑网络生态。</font> 使用户也成为产品的一部分，激励用户进行创造，生成高价值内容，用户在创造的同时还能自组织，自发形成多层次，多样性的网络单元，使互联网产品扩展为一个复杂的生态系统，最典型如豆瓣，自行繁荣壮大。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提高执行力</title>
      <link href="/2017/09/04/execution/"/>
      <url>/2017/09/04/execution/</url>
      
        <content type="html"><![CDATA[<h4 id="概念-什么是执行力"><a href="#概念-什么是执行力" class="headerlink" title="概念:什么是执行力?"></a>概念:什么是执行力?</h4><ul><li>第一， 静态管理，也就是说，我们遵守制度。</li><li>第二，指令如山。就是把所有的指令放在方向上，就是上司交代的事情，布置的任务如何尽快有效、高效地把它完成。</li><li>第三，做事要有结果。所谓的做事就是一个工作流程，结果就是工作价值。</li></ul><h4 id="思考-怎样提高执行力"><a href="#思考-怎样提高执行力" class="headerlink" title="思考:怎样提高执行力?"></a>思考:怎样提高执行力?</h4><ol><li>积极选拔合适的人到恰当的岗位上，还要锻炼员工队伍的执行能力.</li><li>从服从开始抓，因为不服从怎么谈执行？服从也应当是员工的第一美德，任何<a href="http://info.ceo.hc360.com/list/qygl-zlgl-jzfz.shtml" target="_blank" rel="noopener">发展</a>战略、<a href="http://info.ceo.hc360.com/list/qygl-scyx.shtml" target="_blank" rel="noopener">营销</a>模式都要建立在员工服从的基础之上，每一位员工都必须服从上级领导的指挥安排，服从是执行的第一步。</li><li>能够提高执行力的管理动作必须具备三个要素：标准、制约、责任。也就是说，事情怎么做必须要制订标准，要关注细节，要有人检查，形成监督和制约；最后，事情做的好与坏一定要追究责任，好的奖，坏的罚。 </li><li>把工作项和任务进行排序。重要，紧要等。积极的态度去参与。  坚持。注重结果。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>何为运营？</title>
      <link href="/2017/09/04/operation/"/>
      <url>/2017/09/04/operation/</url>
      
        <content type="html"><![CDATA[<p>产品运营往往是紧紧围绕三个目标： <font color=orange > <strong>    产品，用户，渠道。</strong> </font></p><h3 id="成功的运营能够挖掘用户的特点和需求。"><a href="#成功的运营能够挖掘用户的特点和需求。" class="headerlink" title="成功的运营能够挖掘用户的特点和需求。"></a>成功的运营能够挖掘用户的特点和需求。</h3><ol><li>产品运营具体工作有哪些？</li><li>运营策划： 主要是以数据为依据的产品运营方案策划，这块是重点。</li><li>BD : 运营会接触到不同的渠道的转化效率，因此相对的需要和渠道商打交道或者公司内部的销售人员接触，这块实际也会涉及到一定的沟通协调公关的工作。</li><li>媒介： 这里又包括文案的撰写，话题策划，软文发布等。</li><li>活动营销： 结合产品推广和品牌宣传，策划活动营销方案并有力执行，促使达到提高产品和品牌知名度的目的，以及用户的调研奖励等。</li><li>数据分析： 数据决定运营的执行。</li><li>市场监控： 主要是战略层面，包括行业市场的监控以及竞争对手的监控。</li></ol><h3 id="产品运营有极为明确的目标。"><a href="#产品运营有极为明确的目标。" class="headerlink" title="产品运营有极为明确的目标。"></a>产品运营有极为明确的目标。</h3><ol><li>营收：运营要找到商业模式，或者为现有的产品扩大营收。</li><li>扩大用户群：让更多人知道，产品将更成功。</li><li>用户活跃度：沉默的用户是没有多少商业价值的，只有活跃方能带来价值。</li><li>好的产品是运营出来的。第一，它能在一个点上打动用户。第二， 它一定是靠持续改进，持续运营的东西。互联网本质就是服务，用户的需求不断在变，你就得随时调整。</li></ol><h3 id="目标决定数据取样，找到关键值并努力执行。"><a href="#目标决定数据取样，找到关键值并努力执行。" class="headerlink" title="目标决定数据取样，找到关键值并努力执行。"></a>目标决定数据取样，找到关键值并努力执行。</h3><ol><li>看数据，分析数据，找到需要及时调整的数据。进行后续执行工作。</li><li>首先是要有数据，其次是准确性，然后数据要有连贯性。再者，一切数据要有对比才能产生价值。最后得到结论。</li><li>同时，关键数值是重要一环，可以省力高效；但真正每天围绕这个数值不断地努力执行下去才会有真正的提高。</li><li>产品运营不要寄予希望最后一击命中用户需求，而重点应该稳定有效地一步步接触，引导，尝试，认知，渗透，熟悉 的过程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你是个合格的产品经理？</title>
      <link href="/2017/09/04/productManager/"/>
      <url>/2017/09/04/productManager/</url>
      
        <content type="html"><![CDATA[<h4 id="首先，产品经理应该做什么？"><a href="#首先，产品经理应该做什么？" class="headerlink" title="首先，产品经理应该做什么？"></a>首先，产品经理应该做什么？</h4><p><strong> <font color=orange>帮助企业/用户为用户打造有价值的产品。</font> </strong></p><h4 id="产品经理思维包括哪些？"><a href="#产品经理思维包括哪些？" class="headerlink" title="产品经理思维包括哪些？"></a>产品经理思维包括哪些？</h4><ol><li>抓住需求的本质 - 人性 （一个优秀的产品经理需要具备抓住用户欲望的能力，而不是仅仅在产品上增加一个功能这么简单）<br/><br/></li><li>核心需求的把控能力。(无论功能如何增加和外界给予任何干扰，都需要时刻保证产品的核心不被影响)<br/><br/></li><li>时刻描画产品的蓝图 - 未来 （走一步，看百步。需要时刻心中明白产品的将来会是如何，最重要的是在走向未来的过程中又需要哪些助力）<br/><br/></li><li>不断复盘产品的现在 - 总结 （这个决定做的对吗？有什么数据支撑？ 产品人需一日三省，不断总结，不断修正，给自己日后决策更加充足的依据）<br/><br/></li><li>无懈可击的思维 - 逻辑思维 （慎密的思维能力，对整个业务流程要非常熟悉。）<br/><br/></li><li>产品的终极价值 - 商业盈利 （不断迭代的过程中，我们需要懂得如何帮助产品走到商业实现）<br/><br/></li><li>做减法如同做加法 - 极简 （做产品不是做功能，产品不是功能的不断累加，我们需要给产品瘦身的机会，给用户极简的体验，设问：每个版本要上的功能，你能删掉一个吗？）<br/><br/></li><li>懂得和不同的人打交道 - 沟通（应该好好思考如何与不同岗位的同学打交道，知道大家的性格特点，懂得如何把信息有效地传递。）<br/><br/></li><li>管理好自己的时间和任务 - todolist (对时间管理要更加细分化，多用TodoList ，会有不少的帮助。)<br/><br/></li><li>宰相肚里能撑船  - 抗压 （产品经理的特殊位置，导致了人人可喷的境遇。在如此逆境中，需要有一个广阔的胸怀和极强的抗压能力，其实这些都不是什么，因为我们眼里只有产品。）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>营销六心理</title>
      <link href="/2017/09/04/marketingPsychology/"/>
      <url>/2017/09/04/marketingPsychology/</url>
      
        <content type="html"><![CDATA[<p>法则一：<font color=orange> 从众心理 </font></p><p>1，比如淘宝。用户购物时候往往会参考别人的购物体验，当某件东西很畅销，人们会本能地把它当作一个正确有效的选择。 </p><ol><li>借助销售排行榜将一个品牌与最畅销的品牌联系在一起。</li><li>可在社交平台分享消费者生动感人的购买经历获得其他用户的认同感。</li><li>通过巧妙的方式让消费者心甘情愿地宣传产品的各种优势。</li><li>利用技术手段，通过社会化推荐系统，对相似消费群体的挖掘并推荐他们可能喜好的商品。</li></ol><p>法则二：<font color=orange>影响力</font></p><ol><li>利用明星或者权威人士进行产品推荐。</li><li>向名人推出试用活动，并鼓励他们在 社交媒体发布。</li></ol><p>法则三：<font color=orange>稀缺原则</font></p><ol><li>进行限量体验，限量机会，限量提供，限量版本等基于稀缺性的促销活动。</li><li>推出只针对社交媒体的促销计划。</li></ol><p>法则四：<font color=orange>喜好原则</font></p><ol><li>充分利用购物者的社交圈进行产品推荐，例如微博群组或QQ群。</li><li>利用社会化媒体平台关注，分享并传播一些目标消费者喜欢的信息。新闻或科普知识。</li><li>经常与活跃粉丝互动以获得他们的好感，这样更容易树立产品品牌形象。</li></ol><p>法则五：<font color=orange>一致性原则</font></p><ol><li>定期开展免费试用，线上的免费体验等。</li><li>设计与品牌相关的小游戏在社交平台推广。</li><li>保留消费者各种购物信息，并提供良好的服务，使消费者形成依赖。</li></ol><p>法则六：<font color=orange>互惠原则</font></p><ol><li>经常在节日与消费者互动，赠送消费者免费的试用装，产品宣传，杂志等。</li><li>电商可以透过社会心理层面利用社会化媒体平台塑造品牌。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户体验</title>
      <link href="/2017/09/03/userExperience/"/>
      <url>/2017/09/03/userExperience/</url>
      
        <content type="html"><![CDATA[<h3 id="优质的用户体验通常是怎样表达？"><a href="#优质的用户体验通常是怎样表达？" class="headerlink" title="优质的用户体验通常是怎样表达？"></a><font color="orange">优质的用户体验通常是怎样表达？</font></h3><ol><li>传统方式可通过观察用户，用户访谈，问卷，面对面沟通，可以得到很多的细节之处。</li><li>互联网时代，利用数据驱动设计，大数据量来分析用户体验。</li></ol><p>现实实例：网购，选产品，购物过程是否畅通，支付流程方便快捷？买家好不好，物流快不快等。这就是用户体验。</p><h3 id="用户体验包括具体哪些角色？"><a href="#用户体验包括具体哪些角色？" class="headerlink" title="用户体验包括具体哪些角色？"></a><font color=orange>用户体验包括具体哪些角色？</font></h3><ol><li>用户体验由产品经理，用户体验人员，设计师，运营人员和市场人员，商务拓展人员。用户在意的是最终的体验如何，而不是具体的中间流程。 </li></ol><h3 id="用户体验由谁来做？"><a href="#用户体验由谁来做？" class="headerlink" title="用户体验由谁来做？"></a><font color=orange>用户体验由谁来做？</font></h3><ol><li>用户体验一定是由整个团队来实现，而不是靠单几个专业人员。任何一个环节出了问题，都会给用户体验带来灾难性的后果。</li><li>用户体验要靠大家的集思广益，更多的讨论，更多的方案，和探索实验。</li><li>用户体验，要靠快速把想法表达出来，快速尝试尽可能多的可能性。</li><li>用户体验是典型自上而下的事情。这件事情必须是公司最高层，公司的创始人很在意的，才有可能用好。</li><li>用户体验靠研发的每一个环节重点切入，尽早开始，快速设计，快速检验，充分利用数据反馈，请专业人士进行评审。</li></ol><h3 id="用户体验要在哪些方面提高？"><a href="#用户体验要在哪些方面提高？" class="headerlink" title="用户体验要在哪些方面提高？"></a><font color=orange>用户体验要在哪些方面提高？</font></h3><ol><li>用户体验包括产品性能（使用起来快不快，是否流畅），产品的功能（能够实现哪些方面的功能），合适的价格（能不亏本的情况下，又能让人买得起）。</li><li>用户体验最重要的一点就是你的产品针对核心用户是谁。把握用户的特点和使用习惯。就是要站在用户的角度去开发产品（用户思维）。</li></ol><h3 id="公司什么样的人适合做用户体验？"><a href="#公司什么样的人适合做用户体验？" class="headerlink" title="公司什么样的人适合做用户体验？"></a><font color=orange>公司什么样的人适合做用户体验？</font></h3><ol><li>有一定的研发背景，然后又是个开放，愿意学习新东西，愿意接受用户体验，能够带领团队，能够从点点滴滴的细节做起。</li></ol><h3 id="什么才是好的用户体验？"><a href="#什么才是好的用户体验？" class="headerlink" title="什么才是好的用户体验？"></a><font color=orange>什么才是好的用户体验？</font></h3><ol><li>最基础，有用，实用，很容易理解。</li><li>易用（前提：针对某些合适的产品，如果是游戏或者企业级的应用的话，可能就不同了，反而比较复杂，可能还要经过培训或者较长的一段时间后才能了解）。</li></ol><ol><li>使用后不容易遗忘，容易操作不容易犯错，有及时的反馈，有很好的一致性。有很多具体的元素。</li><li>在用户体验的前提下，看是不是美观，是不是适合自己公司的品牌，氛围，气质。</li><li>具有激发性。能够激发用户。</li></ol><p>现实实例：微博。我们之所以使用微博，最主要的原因是因为我们能看到好朋友的一些分享，动态等。看到关注我的人是不是又增加了几个，看看谁又转发了我的微博等。根据这点，我们做的产品可以根据用户产生的内容加上社交元素，使产品和用户的关系转向用户和用户的关系，点赞等，使得用户之间相互激励。</p><ol><li>具有漂亮的图标。尤其是消费者类型的产品。用户可能看到漂亮的图标就下载了。</li><li>在消费领域的产品，一定要拿起就可以用。</li><li>用户体验，产品一开始是针对种子用户，而后是调整面向大众。同时也不会影响种子用户的体验。</li></ol><p>总结一点：产品做得好了，挣钱，名誉所有的其他东西都会随之而来。不然的话，即便是获得了，也只是短暂的获得。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>巧用图解构思-百度脑图</title>
      <link href="/2017/08/11/brainMap/"/>
      <url>/2017/08/11/brainMap/</url>
      
        <content type="html"><![CDATA[<p>很多情况，软件功能实现遇到比较复杂的业务情况下，都会借助于草稿或者流程图 去简单画出业务的流程，然后再编码实现。这样有助于提高程序的编写效率，减少bug 的出现。 以下，是基于实时聊天的会议功能设计流程图。逻辑紧代表本人草稿设计思路。</p><h3 id="使用百度脑图画图"><a href="#使用百度脑图画图" class="headerlink" title="使用百度脑图画图"></a>使用<a href="http://naotu.baidu.com" target="_blank" rel="noopener">百度脑图</a>画图</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/%E4%BC%9A%E8%AE%AE%E8%A7%92%E8%89%B2%E6%B5%81%E7%A8%8B.png" alt="图片1"></p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/%E4%BC%9A%E8%AE%AE%E4%B8%BB%E6%B5%81%E7%A8%8B.png" alt="图片2"></p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E6%8C%81%E4%BA%BA%E6%B5%81%E7%A8%8B.png" alt="图片3"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关系图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-TableView</title>
      <link href="/2016/11/11/Android-TableView/"/>
      <url>/2016/11/11/Android-TableView/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-development-a-Android-App"><a href="#How-to-development-a-Android-App" class="headerlink" title="How to development a Android App"></a>How to development a Android App</h2><h4 id="Before-you-begin-Let’s-talk-about-Android-lifecycle-first-Learn-about-Android’s-four-major-components-And-to-be-familiar-with-Android-development-tool-Android-Studio"><a href="#Before-you-begin-Let’s-talk-about-Android-lifecycle-first-Learn-about-Android’s-four-major-components-And-to-be-familiar-with-Android-development-tool-Android-Studio" class="headerlink" title="Before you begin, Let’s talk about Android lifecycle first .  Learn about Android’s four major components,And to be familiar with Android development tool -Android Studio."></a>Before you begin, Let’s talk about Android lifecycle first .  Learn about Android’s four major components,And to be familiar with Android development tool -Android Studio.</h4><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Activity1-&gt;Activity2: onCreate()——&gt;onStart()——&gt;onResume()</span><br><span class="line">Note left of Activity2: 第一个 Pause，第二个Create，Start，Resume。第一个 Stop</span><br><span class="line">Activity2--&gt;Activity1: back to the activity1</span><br><span class="line">Note left of Activity2: 暂停，restart第一个，start，resume,第二个stop,destory.</span><br></pre></td></tr></table></figure><p>when you push a new  Activity or back Activity, it’s due to the stack to manage the Activity status, but how to push a new Activity?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(ReorderFour.this, ReorderTwo.class);    </span><br><span class="line"></span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);</span><br><span class="line"></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Activity-Extented"><a href="#Activity-Extented" class="headerlink" title="Activity Extented"></a>Activity Extented</h4><h5 id="after-we-know-the-android-activity-i-want-tall-about-fragment"><a href="#after-we-know-the-android-activity-i-want-tall-about-fragment" class="headerlink" title="after we know the android activity, i want tall about fragment."></a>after we know the android activity, i want tall about fragment.</h5><h4 id="Perhaps-you-have-seen-the-most-app-interfaces-is-like-this-YEs-it’s-Tabbar-UI-Interface"><a href="#Perhaps-you-have-seen-the-most-app-interfaces-is-like-this-YEs-it’s-Tabbar-UI-Interface" class="headerlink" title="Perhaps you have seen the most app interfaces is like this. YEs ,it’s Tabbar UI Interface."></a>Perhaps you have seen the most app interfaces is like this. YEs ,it’s Tabbar UI Interface.</h4><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get1.png" alt="picture1"><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get2.png" alt="picture2"><br><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get3.png" alt="picture1"><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get4.png" alt="picture1"></p><h6 id="so-what-about-the-fragment"><a href="#so-what-about-the-fragment" class="headerlink" title="so, what about the fragment ?"></a>so, what about the fragment ?</h6><ol><li>tabbar interface is a activity contains one or more fragments.</li><li>fragments lifecycle is rely one activity.   </li></ol><h6 id="what-did-I-do-to-make-layout-the-UITabarActivity"><a href="#what-did-I-do-to-make-layout-the-UITabarActivity" class="headerlink" title="what did I do to make layout the UITabarActivity?"></a>what did I do to make layout the UITabarActivity?</h6><h3 id="app-gradle-配置"><a href="#app-gradle-配置" class="headerlink" title="app gradle 配置"></a>app gradle 配置</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_tab1.png" alt="picture1"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_tab2.png!github" alt="picture2">  </p><h3 id="Tabbar-Activity"><a href="#Tabbar-Activity" class="headerlink" title="Tabbar Activity"></a>Tabbar Activity</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_tab3.png" alt="picture1"></p><h3 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_tab4.png" alt="picture1"> </p><h3 id="界面Fragment配置"><a href="#界面Fragment配置" class="headerlink" title="界面Fragment配置"></a>界面Fragment配置</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_tab5.png" alt="picture1"></p><p>ok,after you see my screenshots, you can know  , i use the ViewpagerIndicator to make a tabbar Activity . it can manager fragments. you can easy to change every fragment you need. </p><h6 id="app-gradle-instroduce"><a href="#app-gradle-instroduce" class="headerlink" title="app gradle instroduce"></a>app gradle instroduce</h6><font color="#2D2D39" size="4.5px"><br>1. use the fastjson to make json parse.<br>2. use the butterknife replace the frequent findViewById.<br>3. use the ViewPagerIndicator to achieve a tabbarActivity interface.<br>4. use the android-smart-image-view to make the image cache.<br>5. use the android-async-http to make http request.<br>6. use the recycleView-v7 replace the android system listView.<br>7. use the bga-refreshlayout to make the pull refresh cool header.<br>8. finally, use cn.bingoogolapple:bga-adapter to make the recycleView cell Item can  right move delete, long press event ,ItemChildClickListener ,and so on .  all in all, bga-adapter is perfect !<br></font><p><strong>For your convenience, i encapsulated a tableview like iOS UITableView , you can use the group style or plain style decide by youself; you can find it in the package com.lvj.bookoneday-&gt;widget.view</strong>   </p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get_tableview.png" alt="tableview like iOS UItableView">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义表格的数据源接口</span><br><span class="line">public interface TableViewDataSource&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    RecyclerViewCell&lt;T&gt;[]  getRecyclerCells(); &#x2F;&#x2F;获取cell</span><br><span class="line">int getItemViewType(int position);  &#x2F;&#x2F;获取position: cell类型的tag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义表格的事件委托源</span><br><span class="line"> public interface TableViewDelegate &#123;   </span><br><span class="line"> </span><br><span class="line">void onTableViewDidSelectRow(int row);&#x2F;&#x2F;点击单行   </span><br><span class="line">void onTableViewDidLongClickRow(int row); &#x2F;&#x2F;长按单行   </span><br><span class="line"> void onTableViewDidChangeCheckRow(int row, boolean isChecked); &#x2F;&#x2F;选中行   </span><br><span class="line">void onItemChildClick(View childView, int position); &#x2F;&#x2F;item 点击</span><br><span class="line">void onTableViewRefresh();&#x2F;&#x2F;下拉刷新</span><br><span class="line">void onTableViewLoadMore();  &#x2F;&#x2F;加载更多</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>I create two java interface : TableViewDelete, TableViewDataSoucre. that you can easy<br>implements there’s methods .</li><li>when you use the activity or fragment need tableView layout , you can easy and fast<br>layout ,and implements TableViewDelegate, TableViewDatasource.</li></ul><h4 id="for-examples"><a href="#for-examples" class="headerlink" title="for examples"></a>for examples</h4><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get_tableViewFragment.png" alt="tableview like iOS UItableView"></p><h3 id="Talk-about-Http-request"><a href="#Talk-about-Http-request" class="headerlink" title="Talk about Http request"></a>Talk about Http request</h3><p>you know, when your app ask a request, may be have two Design Patterns . it named “block”（anonymous inner classes） ,”delegate”(delegate is named by iOS. on java, it’s interface or ask “OOP” thoughts).</p><h4 id="My-HttpRequest-Design"><a href="#My-HttpRequest-Design" class="headerlink" title="My HttpRequest Design"></a>My HttpRequest Design</h4><p>there is a abstract class named BaseDataService.  if you have a   new request . you just extend BaseDataService and @Override three methods. “getAPIRequestMethodName<br>, setRequestParams,parseResponse”. look these screenshots. And on your  Activity  or Fragments  , you just implemets RequestCallBackDelegate , and you can use your son of BaseDataService to make some request. </p><h3 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get_request1.png" alt="tableview like iOS UItableView">   </p><h3 id="子类继承父类"><a href="#子类继承父类" class="headerlink" title="子类继承父类"></a>子类继承父类</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get_request2.png" alt="tableview like iOS UItableView">   </p><h3 id="界面用子类请求实现"><a href="#界面用子类请求实现" class="headerlink" title="界面用子类请求实现"></a>界面用子类请求实现</h3><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/android_get_request3.png" alt="tableview like iOS UItableView"></p><p><em>For more info about the tableView how to work, you can find my   open source on my <a href="http://github.com/gaoyingqiu" target="_blank" rel="noopener">Github Android-TableView</a>,welcome make you suggestion. if you like this project, on my github, I hope you can click on the star in the upper right corner to give me more encouragement. thank you!</em></p><h3 id="TO-Do-Introduce-Android-Service-components"><a href="#TO-Do-Introduce-Android-Service-components" class="headerlink" title="TO Do:  Introduce Android Service components"></a>TO Do:  Introduce Android Service components</h3>]]></content>
      
      
      
        <tags>
            
            <tag> AndroidTableView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>客户端网络请求模块的设计</title>
      <link href="/2016/05/29/iOSDataTransmission/"/>
      <url>/2016/05/29/iOSDataTransmission/</url>
      
        <content type="html"><![CDATA[<p>AFNetworking也被广泛使用。其它的ASIHttpRequest，MKNetworkKit啥的其实也都还不错，苹果对网络请求部分已经做了很好的封装。但不管如何，APP端还是要对网络进行一个封装。在实际的App开发中，Afnetworking已经成为了事实上各大App的标准配置。</p><p>iOS开发领域有很多对象间数据的传递方式，我看到的大多数App在网络层所采用的方案主要集中于这三种：Delegate，Notification，Block。我的意见是Delegate为主，Notification可以用在网络发生变化时候使用。<br><a id="more"></a></p><h3 id="谈谈Notification"><a href="#谈谈Notification" class="headerlink" title="谈谈Notification"></a>谈谈Notification</h3><p>使用Notification来进行网络层和业务层之间数据的交换， 但是使用Notification给跨层数据交流开了一道口子，因为Notification的影响面不可控制，只要存在实例就存在被影响的可能。Notification因为支撑一对多的情况，这也给代码散落提供了条件。同时，Notification所对应的响应方法很难在编译层面作限制。</p><h3 id="关于Block-之谈"><a href="#关于Block-之谈" class="headerlink" title="关于Block 之谈"></a>关于Block 之谈</h3><p>1、block很难追踪，难以维护。调试的时候有个block，如果想知道这个block里面都做了些什么事情，这时候就要从之前写的代码往回查了。。<br>2、block会延长相关对象的生命周期。block会给内部所有的对象引用计数加一，这一方面会带来潜在的retain cycle。这个时候在block块中需要使用weak self 修饰词。因为block会延长生命好周期，所以可能请求还在执行中，ViewController pop之后，请求还在飞。而delegate是弱引用，哪怕请求仍然在外面飞，ViewController还是能够及时被回收的，回收之后指针自动被置为了nil。</p><h3 id="Delegate-委托"><a href="#Delegate-委托" class="headerlink" title="Delegate 委托"></a>Delegate 委托</h3><h4 id="封装请求基类-h-文件"><a href="#封装请求基类-h-文件" class="headerlink" title="封装请求基类 h 文件"></a>封装请求基类 h 文件</h4><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/netRequestDesign1.png" alt="封装请求基类"></p><h4 id="BaseDataService-网络请求基类-m文件-初始化"><a href="#BaseDataService-网络请求基类-m文件-初始化" class="headerlink" title="BaseDataService 网络请求基类 m文件 初始化"></a>BaseDataService 网络请求基类 m文件 初始化</h4><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/netRequestDesign2.png" alt="封装请求基类"></p><h4 id="BaseDataService-配置请求参数，调用具体业务请求子类"><a href="#BaseDataService-配置请求参数，调用具体业务请求子类" class="headerlink" title="BaseDataService 配置请求参数，调用具体业务请求子类"></a>BaseDataService 配置请求参数，调用具体业务请求子类</h4><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/netRequestDesign3.png" alt="封装请求基类"></p><h4 id="BaseDataService-请求结束，通过委托调用viewController-所实现的成功-或失败的方法"><a href="#BaseDataService-请求结束，通过委托调用viewController-所实现的成功-或失败的方法" class="headerlink" title="BaseDataService 请求结束，通过委托调用viewController 所实现的成功 或失败的方法"></a>BaseDataService 请求结束，通过委托调用viewController 所实现的成功 或失败的方法</h4><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/netRequestDesign4.png" alt="封装请求基类"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈iOS的多线程</title>
      <link href="/2016/05/16/iOSThread/"/>
      <url>/2016/05/16/iOSThread/</url>
      
        <content type="html"><![CDATA[<p>ios线程形式有三种。 ios4后，苹果改用GCD多线程。线程可以用来干什么呢？多线程可以用来后台加载图片更新主线程UI,或者请求网络数据等等。</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><h4 id="使用-NSThread-来创建线程有两种方法"><a href="#使用-NSThread-来创建线程有两种方法" class="headerlink" title="使用 NSThread 来创建线程有两种方法:"></a>使用 NSThread 来创建线程有两种方法:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[NSThread detachNewThreadSelector:@selector(myThreadMainMethod:) toTarget:self withObject:nil];</span><br><span class="line"></span><br><span class="line">NSThread* myThread = [[NSThread alloc] initWithTarget:self</span><br><span class="line"></span><br><span class="line">                              selector:@selector(myThreadMainMethod:)</span><br><span class="line"></span><br><span class="line">                              object:nil];</span><br><span class="line">[myThread start]; // Actually create the thread</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果你拥有一个 NSThread 对象,它的线程当前正运行,你可以给该线程发送 消息的唯一方法是在你应用程序里面的任何对象使用 performSelector:onThread:withObject:waitUntilDone:方法。它是实现线程间通 信的便捷方法.</p><p>线程通信：<br>1.在指定线程上执行操作<br>[self performSelector:@selector(run) onThread:thread withObject:nil waitUntilDone:YES]; </p><p>2.在主线程上执行操作</p><p>[self performSelectorOnMainThread:@selector(run) withObject:nil waitUntilDone:YES];  </p><p>3.在当前线程执行操作</p><p>[self performSelector:@selector(run) withObject:nil];  </p><h3 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h3><p>通常 NSOperation  会和NSOperationQueue 结合起来使用。 在之前，我们应该了解一下NSOperation .<br>Cocoa operations是基于 Obective-C实现的，类 NSOperation 以面向对象的方式封装了用户需要执行的操作，我们只要聚焦于我们需要做的事情，而不必太操心线程的管理，同步等事情，<br>因为NSOperation已经为我们封装了这些事情。 NSOperation 是一个抽象基类，我们必须使用它的子类。iOS 提供了两种默认实现：NSInvocationOperation 和 NSBlockOperation。<br>代码示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列</span><br><span class="line">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;        </span><br><span class="line">       //任务执行            &#125;];</span><br><span class="line">[queue addOperation:operation];</span><br></pre></td></tr></table></figure><br>如果我们想在一个NSOperation执行完毕后做一些事情，就调用NSOperation的setCompletionBlock方法来设置想做的事情<br>operation.completionBlock = ^() {<br> NSLog(@”执行完毕”);<br>}; </p><h4 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h4><p>基于一个对象和selector来创建操作。如果你已经有现有的方法来执行需要的任务,就可以使用这个类<br>// 这个操作是：调用self的run方法<br>NSInvocationOperation *operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run) object:nil];<br>// 开始执行任务(同步执行)<br>[operation start]; </p><h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><h4 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h4><p>单例就是全局都只有一个对象存在，而且是在整个App运行过程中都存在。 做用户数据存储时，通常都会用单例存储，因为应用在所有操作中，经常要求先登录.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)shared &#123;</span><br><span class="line">  static HYBUserManager *sg_userManager = nil;</span><br><span class="line">  static dispatch_once_t onceToken;</span><br><span class="line">  dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    <span class="keyword">if</span> (sg_userManager == nil) &#123;</span><br><span class="line">      sg_userManager = [[HYBUserManager alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">return</span> sg_userManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>相信大家对dispatch_once都不陌生了，我将和大家一起探究dispatch_once的更多细节。<br>dispatch_once的作用正如其名：对于某个任务执行一次，且只执行一次。 dispatch_once函数有两个参数，第一个参数predicate用来保证执行一次，第二个参数是要执行一次的任务block。<br>static dispatch_once_t predicate;<br>dispatch_once(&amp;predicate, ^{<br>    // some one-time task<br>});<br>dispatch_once被广泛使用在单例、缓存等代码中，用以保证在初始化时执行一次某任务。<br>dispatch_once在单线程程序中毫无意义，但在多线程程序中，其低负载、高可依赖性、接口简单等特性，赢得了广大消费者的一致五星好评。</p><p>dispatch_once使得block中的代码执行且只执行一次，在多线程竞态时，使其他线程进入等待状态直至block执行完毕，并且还保证无竞态时执行效率与非线程安全的if语句效率相当。<br>dispatch_once内部使用了大量的原子操作来替代锁与信号量，这使得其效率大大提升，但带来的是维护和阅读性的降低。<br>dispatch_once被大量使用在构建单例上，apple也推荐如此。</p><h4 id="Dispatch-Group"><a href="#Dispatch-Group" class="headerlink" title="Dispatch Group"></a>Dispatch Group</h4><p>我们可以使用dispatch_group_async函数将多个任务关联到一个Dispatch Group和相应的queue中，group会并发地同时执行这些任务。而且Dispatch Group可以用来阻塞一个线程, 直到group关联的所有的任务完成执行。有时候你必须等待任务完成的结果,然后才能继续后面的处理。<br>下面用Dispatch Group优化上面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. // 根据url获取UIImage  </span><br><span class="line">2. - (UIImage *)imageWithURLString:(NSString *)urlString &#123;  </span><br><span class="line">3.     NSURL *url = [NSURL URLWithString:urlString];  </span><br><span class="line">4.     NSData *data = [NSData dataWithContentsOfURL:url];  </span><br><span class="line">5.     // 这里并没有自动释放UIImage对象  </span><br><span class="line">6.     <span class="built_in">return</span> [[UIImage alloc] initWithData:data];  </span><br><span class="line">7. &#125;  </span><br><span class="line">8.   </span><br><span class="line">9. - (void)downloadImages &#123;  </span><br><span class="line">10.     dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  </span><br><span class="line">11.       </span><br><span class="line">12.     // 异步下载图片  </span><br><span class="line">13.     dispatch_async(queue, ^&#123;  </span><br><span class="line">14.         // 创建一个组  </span><br><span class="line">15.         dispatch_group_t group = dispatch_group_create();  </span><br><span class="line">16.           </span><br><span class="line">17.         __block UIImage *image1 = nil;  </span><br><span class="line">18.         __block UIImage *image2 = nil;  </span><br><span class="line">19.           </span><br><span class="line">20.         // 关联一个任务到group  </span><br><span class="line">21.         dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;  </span><br><span class="line">22.             // 下载第一张图片  </span><br><span class="line">23.             NSString *url1 = @<span class="string">"http://car0.autoimg.cn/upload/spec/9579/u_20120110174805627264.jpg"</span>;  </span><br><span class="line">24.             image1 = [self imageWithURLString:url1];  </span><br><span class="line">25.         &#125;);  </span><br><span class="line">26.           </span><br><span class="line">27.         // 关联一个任务到group  </span><br><span class="line">28.         dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;  </span><br><span class="line">29.             // 下载第一张图片  </span><br><span class="line">30.             NSString *url2 = @<span class="string">"http://hiphotos.baidu.com/lvpics/pic/item/3a86813d1fa41768bba16746.jpg"</span>;  </span><br><span class="line">31.             image2 = [self imageWithURLString:url2];  </span><br><span class="line">32.         &#125;);  </span><br><span class="line">33.           </span><br><span class="line">34.         // 等待组中的任务执行完毕,回到主线程执行block回调  </span><br><span class="line">35.         dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">36.             self.imageView1.image = image1;  </span><br><span class="line">37.             self.imageView2.image = image2;  </span><br><span class="line">38.               </span><br><span class="line">39.             // 千万不要在异步线程中自动释放UIImage，因为当异步线程结束，异步线程的自动释放池也会被销毁，那么UIImage也会被销毁  </span><br><span class="line">40.               </span><br><span class="line">41.             // 在这里释放图片资源  </span><br><span class="line">42.             [image1 release];  </span><br><span class="line">43.             [image2 release];  </span><br><span class="line">44.         &#125;);  </span><br><span class="line">45.           </span><br><span class="line">46.         // 释放group  </span><br><span class="line">47.         dispatch_release(group);  </span><br><span class="line">48.     &#125;);  </span><br><span class="line">49. &#125;</span><br></pre></td></tr></table></figure><br>dispatch_group_notify函数用来指定一个额外的block，该block将在group中所有任务完成后执行.</p><h4 id="异步下载图片"><a href="#异步下载图片" class="headerlink" title="异步下载图片"></a>异步下载图片</h4><p>1&gt; GCD提供一个特殊的dispatch queue,可以在应用的主线程中执行任务。只要应用主线程设置了run loop(由CFRunLoopRef类型或NSRunLoop对象管理),就会自动创建这个queue,并且最后会自动销毁。非Cocoa应用如果不显式地设置run loop, 就必须显式地调用dispatch_main函数来显式地激活这个dispatch queue，否则虽然你可以添加任务到queue,但任务永远不会被执行。<br>2&gt; 调用dispatch_get_main_queue函数获得应用主线程的dispatch queue,添加到这个queue的任务由主线程串行化执行<br>3&gt; 代码实现，比如异步下载图片后，回到主线程显示图片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. // 异步下载图片  </span><br><span class="line">2. dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;  </span><br><span class="line">3.     NSURL *url = [NSURL URLWithString:@<span class="string">"http://car0.autoimg.cn/upload/spec/9579/u_20120110174805627264.jpg"</span>];  </span><br><span class="line">4.     UIImage *image = [UIImage imageWithData:[NSData dataWithContentsOfURL:url]];  </span><br><span class="line">5.       </span><br><span class="line">6.     // 回到主线程显示图片  </span><br><span class="line">7.     dispatch_async(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">8.         self.imageView.image = image;  </span><br><span class="line">9.     &#125;);  </span><br><span class="line">10. &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xmpp协议</title>
      <link href="/2016/05/15/xmpp/"/>
      <url>/2016/05/15/xmpp/</url>
      
        <content type="html"><![CDATA[<p>基于TCP的长连接。在使用 TCP 长连接的 IM 服务设计中，往往都会涉及到心跳。心跳一般是指某端(绝大多数情况下是客户端)每隔一定时间向对端发送自定义指令，以判断双方是否存活，因其按照一定间隔发送，类似于心跳，故被称为心跳指令。</p><a id="more"></a><h4 id="保持心跳的必要"><a href="#保持心跳的必要" class="headerlink" title="保持心跳的必要"></a>保持心跳的必要</h4><p>服务器需要及时清理无效连接以减轻负载，另一方面也是业务的需求，如游戏副本中服务器需要及时处理玩家掉线带来的问题。</p><h4 id="为什么TCP-KeepAlive-不能用于检测"><a href="#为什么TCP-KeepAlive-不能用于检测" class="headerlink" title="为什么TCP KeepAlive 不能用于检测"></a>为什么TCP KeepAlive 不能用于检测</h4><p>TCP KeepAlive用于检测连接的死活，心跳机制用于检查双方的存活状态。考虑一种情况，某台服务器因为某些原因导致负载超高，CPU 100%，无法响应任何业务请求，但是使用 TCP 探针则仍旧能够确定连接状态，这就是典型的连接活着但业务提供方已死的状态，对客户端而言，这时的最好选择就是断线后重新连接其他服务器，而不是一直认为当前服务器是可用状态，一直向当前服务器发送些必然会失败的请求。</p><h4 id="心跳的做法"><a href="#心跳的做法" class="headerlink" title="心跳的做法"></a>心跳的做法</h4><p>每隔 30 秒心跳一次，15 秒内没有收到心跳回包则认为当前连接已失效，断开连接并进行重连。连接可靠性可在心跳超时 n 次后才判定当前连接不可用，这样做可以减少心跳连接的次数，减少流量。</p><h3 id="消息可达"><a href="#消息可达" class="headerlink" title="消息可达"></a>消息可达</h3><p>在移动网络下，丢包，网络重连等情况非常之多，为了保证消息的可达，一般需要做消息回执和重发机制。参考易信，每条消息会最多会有3次重发，超时时间为15秒，同时在发送之前会检测当前连接状态，如果当前连接并没有正确建立，缓存消息且定时检查(每隔2秒检查一次，检查15次)。所以一条消息在最差的情况下会有2分钟左右的重试时间，以保证消息的可达。</p><p>因为重发的存在，接受端偶尔会收到重复消息，这种情况下就需要接收端进行去重。通用的做法是每条消息都带上自己唯一的message id(一般是uuid)。</p><h3 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h3><p>为了保证协议不容易被破解，市面上几乎所有主流IM都会对协议进行加密传输。常见的流程和HTTPS加密相似:建立连接后，客户端和服务器进行进行协商，最终客户端获得一个当前Sessino的秘钥，后续的数据传输都通过这个秘钥进行加解密。一般出于效率的考虑都会采用流式加密，如RC4。而前期协商过程则推荐使用RSA等非对称加密以增加破解难度。</p><h3 id="IM协议包"><a href="#IM协议包" class="headerlink" title="IM协议包"></a>IM协议包</h3><p>包头：<br>struct PackHeader<br>{<br>    int32<em>t     length</em>;    //包长度<br>    int32<em>t     serial</em>;    //包序列号<br>    int32<em>t     command</em>;   //包请求类型<br>    int32<em>t     code</em>;      //返回码<br>};</p><h3 id="IM聊天App-登录后要做得事情"><a href="#IM聊天App-登录后要做得事情" class="headerlink" title="IM聊天App  登录后要做得事情"></a>IM聊天App  登录后要做得事情</h3><ul><li>好友列表</li><li>好友个人信息</li><li>群组列表</li><li>群成员列表</li><li>群成员个人信息</li><li>离线消息</li></ul><p>1，客户端永远只更新比本地缓存数据新的数据。<br>2、登录时候LBS可放在登录后或者网络空闲时去请求。<br>3、有些数据只是在请求时候去更新UI.</p><h3 id="使用XMpp协议的一个聊天应用程序，当程序退到后台的时候，如果想要继续接收到聊天信息或icon显示badge-该怎么做？GCDAsyncSocket"><a href="#使用XMpp协议的一个聊天应用程序，当程序退到后台的时候，如果想要继续接收到聊天信息或icon显示badge-该怎么做？GCDAsyncSocket" class="headerlink" title="使用XMpp协议的一个聊天应用程序，当程序退到后台的时候，如果想要继续接收到聊天信息或icon显示badge, 该怎么做？GCDAsyncSocket"></a>使用XMpp协议的一个聊天应用程序，当程序退到后台的时候，如果想要继续接收到聊天信息或icon显示badge, 该怎么做？GCDAsyncSocket</h3><p>You need to set the VoIP flag in your app’s (appname)-info.plist file, and then in</p><p>(void)xmppStream:(XMPPStream <em>)sender socketWillConnect:(AsyncSocket </em>)socket<br>You’ll need to set the socket stream flags to include kCFStreamNetworkServiceTypeVoIP:</p><p> CFReadStreamSetProperty([socket getCFReadStream], kCFStreamNetworkServiceType, kCFStreamNetworkServiceTypeVoIP);<br> CFWriteStreamSetProperty([socket getCFWriteStream], kCFStreamNetworkServiceType, kCFStreamNetworkServiceTypeVoIP);<br>Then, your app will be woken up briefly when a new XMPP message arrives. In your normal</p><p>(void)xmppStream:(XMPPStream <em>)sender didReceiveMessage:(XMPPMessage </em>)message<br>handler, you would want to create a local notification for the message if you are backgrounded (you can keep track of background state via UIApplicationDidEnterBackgroundNotification and UIApplicationWillEnterForegroundNotification). The local notification handler can set the application badge number, etc (just like you would for a push notification).</p><p>EDIT<br>Newer versions of the XMPP Framework (specifically, GCDAsyncSocket) now support a call to make this easier, so you can just have:</p><ul><li>(void)xmppStream:(XMPPStream <em>)sender socketWillConnect:(GCDAsyncSocket </em>)socket<br>{<br>  // Tell the socket to stay around if the app goes to the background (only works on apps with the VoIP background flag set)<br>  [socket performBlock:^{<pre><code>[socket enableBackgroundingOnSocket];</code></pre>  }];<br>}<br><a href="http://stackoverflow.com/questions/5257580/iphone-xmpp-app-run-background" target="_blank" rel="noopener">在这篇文章中你或许能找到答案</a>  不得不说StackOverFlow真是个好东西。</li></ul><h3 id="聊聊IOS后台"><a href="#聊聊IOS后台" class="headerlink" title="聊聊IOS后台"></a>聊聊IOS后台</h3><p>应用程序进入后台状态不久后转入暂停状态。在这种状态下，应用程序不执行任何代码，并有可能在任意时候从内存中删除。应用程序提供特定的服务，用户可以请求后台执行时间，以提供这些服务。<br>三种类型的可以运行在后以，<br>1.音乐<br>2.location<br>3.voip<br>声明你需要的后台任务<br>Info.plist中添加UIBackgroundModes键值，它包含一个或多个string的值，包括<br>audio:在后台提供声音播放功能，包括音频流和播放视频时的声音<br>location：在后台可以保持用户的位置信息<br>voip：在后台使用VOIP功能</p><p>实现VOIP应用：<br>VOIP程序需要稳定的网络去连接和它相关的服务，这样它才能接到来电和其他相关的数据。系统允许VOIP程序被挂断并提供组件去监听它们的sockets，而不是在任意时候都处于唤醒状态。设置VOIP应用程序如下：<br>A、 添加UIBackgroundModes中的VOIP键值<br>B、 为VOIP设置一个应用程序socket<br>C、 在移出后台之前，调用setKeepAliveTimeout:handler:方法去建立一个定期执行的handler，你的应用程序可以运行这个handler来保持服务的连接。<br>(<br>BOOL backgroundAccepted = [[UIApplication sharedApplication] setKeepAliveTimeout:600 handler:^{ [self backgroundHandler]; }];<br> if (backgroundAccepted)<br> {<br>      NSLog(@”VOIP backgrounding accepted”);<br> }<br>为了防止断连，voip程序需要定期被唤醒去检查它的服务。为了容易实现这个行为，IOS通过使用（UIApplication setKeepAliveTimeout:handler:）方法建立一个特殊的句柄。你可以在applicationDidEnterBackground方法中建立该句柄。一旦建立，系统至少会在超时之前调用该句柄一次，来唤醒你的应用程序。<br>这个keep-alive handler在后台执行，必须尽快的返回参数，它有最多30秒的时间来执行所需的任务，如果这段时间内句柄没有返回，那么系统将终止应用程序。<br>当你建立了handler之后，确定应用程序所需的最大超时。系统保证会在最大超时之前调用handler，但是这个时间是不确定的，所以你的handler必须在你申明的超时之前做好执行程序的准备<br>)<br>D、 设置你的audio session去处理这种切换</p><h4 id="安排Local-Notification的传递"><a href="#安排Local-Notification的传递" class="headerlink" title="安排Local Notification的传递"></a>安排Local Notification的传递</h4><p>UILocalNotification类提供了一种方法来传递local notifications。和push notifications需要设置remote server不同，local notifications 在程序中安排并在当前的设备上执行。满足如下条件可以使用该能力：<br>1、一个基于时间的程序，可以在将来特定的时间让程序post 一个alert，比如闹钟<br>2、一个在后台运行的程序，post 一个local notification去引起用户的注意<br>为了安排local notification 的传递，需要创建一个UILocalNotification的实例，并设置它，使用UIApplication类方法来安排它。Local notification对象包含了所要传递的类型（sound，alert，或者badge）和时间何时呈现） 。UIApplication类方法提供选项去确定是立即传递还是在指定的时间传递。<br>Listing 4-3 Scheduling an alarm notification  </p><ul><li>(void)scheduleAlarmForDate:(NSDate<em>)theDate<br>{<br>UIApplication</em> app = [UIApplication sharedApplication];<br>NSArray<em> oldNotifications = [app scheduledLocalNotifications];<br>// Clear out the old notification before scheduling a new one.<br>if ([oldNotifications count] &gt; 0)<br>[app cancelAllLocalNotifications];<br>// Create a new notification.<br>UILocalNotification</em> alarm = [[[UILocalNotification alloc] init] autorelease];<br>if (alarm)<br>{<br>alarm.fireDate = theDate;<br>alarm.timeZone = [NSTimeZone defaultTimeZone];<br>alarm.repeatInterval = 0;<br>alarm.soundName = @”alarmsound.caf”;<br>alarm.alertBody = @”Time to wake up!”;<br>[app scheduleLocalNotification:alarm];<br>}<br>}<br>(可以最多包含128个 local notifications active at any given time, any of which can be configured to repeat at a specified interval.)如果在调用该notification的时候，程序已经处于前台，那么application：didReceiveLocalNotification：方法将取而代之。</li></ul><h3 id="voip与socket实现后台推送"><a href="#voip与socket实现后台推送" class="headerlink" title="voip与socket实现后台推送"></a>voip与socket实现后台推送</h3><h4 id="1-找到该文件-添加该项"><a href="#1-找到该文件-添加该项" class="headerlink" title="1.找到该文件,添加该项"></a>1.找到该文件,添加该项</h4><p>(1)蜗牛帮-Info.plist(2)Required background modes它的item：App provides Voice over IP services</p><h4 id="2-在socket连接成功代理里面"><a href="#2-在socket连接成功代理里面" class="headerlink" title="2.在socket连接成功代理里面"></a>2.在socket连接成功代理里面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port//建立连接成功后执行的代理</span><br><span class="line">&#123;</span><br><span class="line">    //后台挂起voip</span><br><span class="line">    [socket performBlock:^&#123;</span><br><span class="line">        [socket enableBackgroundingOnSocket];</span><br><span class="line">    &#125;];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="3-在收到socket消息代理里面"><a href="#3-在收到socket消息代理里面" class="headerlink" title="3.在收到socket消息代理里面"></a>3.在收到socket消息代理里面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-(void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag//接收到消息执行的代理。</span><br><span class="line">&#123;</span><br><span class="line">    [socket readDataWithTimeout:-1 tag:0];//这句话太重要了</span><br><span class="line">    UIApplication *application=[UIApplication sharedApplication];</span><br><span class="line">    <span class="keyword">if</span> (application.applicationState==UIApplicationStateBackground||application.applicationState==UIApplicationStateInactive )</span><br><span class="line">    &#123;</span><br><span class="line">        NSArray *oldNotifications=[application scheduledLocalNotifications];</span><br><span class="line">        <span class="keyword">if</span> ([oldNotifications count]&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            [application cancelAllLocalNotifications];</span><br><span class="line">        &#125;</span><br><span class="line">        UILocalNotification *alarm=[[UILocalNotification alloc] autorelease];</span><br><span class="line">        <span class="keyword">if</span> (alarm)</span><br><span class="line">        &#123;</span><br><span class="line">            alarm.fireDate=[NSDate date];</span><br><span class="line">            alarm.timeZone=[NSTimeZone defaultTimeZone];</span><br><span class="line">            alarm.repeatInterval=0;</span><br><span class="line">            [Single sharedSingle].iconNumber++;</span><br><span class="line">            alarm.applicationIconBadgeNumber=[Single sharedSingle].iconNumber;</span><br><span class="line">            alarm.soundName=@<span class="string">"alarmsound.caf"</span>;</span><br><span class="line">            alarm.alertBody=[jsonDictionary valueForKey:@<span class="string">"sendmsg"</span>];</span><br><span class="line">            [application scheduleLocalNotification:alarm];</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-挂起时，本操作是为了600秒重写连接一次socket，保持socket在线"><a href="#4-挂起时，本操作是为了600秒重写连接一次socket，保持socket在线" class="headerlink" title="4.//挂起时，本操作是为了600秒重写连接一次socket，保持socket在线"></a>4.//挂起时，本操作是为了600秒重写连接一次socket，保持socket在线</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidEnterBackground:(UIApplication *)application</span><br><span class="line">&#123;</span><br><span class="line">    [[UIApplication sharedApplication] setKeepAliveTimeout:600 handler:^&#123; [[NSNotificationCenter defaultCenter]postNotificationName:@<span class="string">"CreatSocket"</span> object:nil userInfo:nil];&#125;];</span><br><span class="line">&#125;</span><br><span class="line">-(void)creatSocket</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (![[Single sharedSelfMemberID] isEqualToString:@<span class="string">""</span>]) &#123;//登陆了</span><br><span class="line">       </span><br><span class="line">        [Single sharedSingle].socket.delegate=self;</span><br><span class="line">        [Single sharedSingle].socket.delegateQueue=dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line">        NSError *err = nil;</span><br><span class="line">        <span class="keyword">if</span>(![socket connectToHost:socketURL onPort:socketPort error:&amp;err])</span><br><span class="line">        &#123;</span><br><span class="line">           </span><br><span class="line">            NSLog(@<span class="string">"%@"</span>,err);</span><br><span class="line">            [[Single sharedSingle].socket readDataWithTimeout:-1 tag:0];</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            [[Single sharedSingle].customStatueBar show];</span><br><span class="line">            [Single sharedSingle].customStatueBar.messageLabel.text=@<span class="string">"连接中..."</span>;</span><br><span class="line">            NSLog(@<span class="string">"ok"</span>);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AFNNetWorking-分析</title>
      <link href="/2016/05/13/AFNNetWorking/"/>
      <url>/2016/05/13/AFNNetWorking/</url>
      
        <content type="html"><![CDATA[<p>基于ASI之后，AFN应该是比较流行的ios第三方。<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">GIthub AFNetWorking</a>.<br>这里，先贴我之前做项目 基于AFN的封装。之后，解释下AFNetWorking 的相关知识，AFURLConnectionOperation,SSL 安全AFSecurityPolicy。</p><a id="more"></a><h3 id="项目AFNetWorking-请求封装部分代码"><a href="#项目AFNetWorking-请求封装部分代码" class="headerlink" title="项目AFNetWorking 请求封装部分代码"></a>项目AFNetWorking 请求封装部分代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关于 基于AFN网络请求的get,post方法</span></span><br><span class="line">//  BaseDataService.m</span><br><span class="line">//  LvJinKu</span><br><span class="line">//</span><br><span class="line">//  Created by lvjinku on 15/9/8.</span><br><span class="line">//  Copyright (c) 2015年 lvjinku. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line"><span class="comment">#import "BaseDataService.h"</span></span><br><span class="line"><span class="comment">#import "DFReachabilityUtil.h"</span></span><br><span class="line"><span class="comment">#import "NSString+RRAPI.h"</span></span><br><span class="line"><span class="comment">#import "JSONKit.h"</span></span><br><span class="line"></span><br><span class="line">static const NSString *LvJinKuAgency = @<span class="string">"root"</span>;</span><br><span class="line">static const NSString *LvJinKuSecurity = @<span class="string">"permission"</span>;</span><br><span class="line"></span><br><span class="line">@interface BaseDataService()</span><br><span class="line"></span><br><span class="line">@property (nonatomic,strong) NSMutableDictionary *requestParams;</span><br><span class="line"></span><br><span class="line">-(NSString *) acquireBaseRequestParamDictionary;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BaseDataService</span><br><span class="line">@synthesize manager,requestType,requestParams;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma mark - Lifecycle</span></span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    <span class="keyword">if</span> (self) &#123;</span><br><span class="line">        manager = [[AFHTTPRequestOperationManager alloc] init];</span><br><span class="line">        manager.requestSerializer.timeoutInterval = NetworkTimeoutInterval;</span><br><span class="line">        requestType = RequestTypeGet;</span><br><span class="line">        requestParams = [NSMutableDictionary dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma mark - Method</span></span><br><span class="line"></span><br><span class="line">-(void)executeRequest</span><br><span class="line">&#123;</span><br><span class="line">    //网络不可用</span><br><span class="line">    <span class="keyword">if</span> (![DFReachabilityUtil isNetworkAvailable]) &#123;</span><br><span class="line">        </span><br><span class="line">        NSError *error = [NSError errorWithDomain:CustomErrorDomain code:CustomErrorConnectFailed userInfo:nil];</span><br><span class="line">        [self onError:error];</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    switch (requestType) &#123;</span><br><span class="line">        <span class="keyword">case</span> RequestTypeGet:</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            NSDictionary *requestParamsDic = @&#123;@<span class="string">"xml"</span>:[self acquireBaseRequestParamDictionary]&#125;;</span><br><span class="line">            NSLog(@<span class="string">"get请求参数：%@"</span>, [self acquireBaseRequestParamDictionary]);</span><br><span class="line">         </span><br><span class="line">             //参数,简单的get请求</span><br><span class="line">            [manager GET:[self getRequestDomain] parameters:requestParamsDic success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class="line">                </span><br><span class="line">                [self onSuccess:responseObject];</span><br><span class="line">                </span><br><span class="line">            &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class="line">                NSLog(@<span class="string">"错误日志：%@"</span>,error.localizedDescription);</span><br><span class="line">                [self onError:error];</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> RequestTypePost:</span><br><span class="line">        &#123;</span><br><span class="line">            //参数,简单的post请求</span><br><span class="line">            NSDictionary *requestParamsDic = @&#123;@<span class="string">"xml"</span>:[self acquireBaseRequestParamDictionary]&#125;;</span><br><span class="line">            [manager POST:[self getRequestDomain]  parameters:requestParamsDic  success:^(AFHTTPRequestOperation *operation, id responseObject)&#123;</span><br><span class="line">                </span><br><span class="line">                 [self onSuccess:responseObject];</span><br><span class="line">            &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class="line">                </span><br><span class="line">                 [self onError:error];</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> RequestTypePostMultipart:</span><br><span class="line">        &#123;</span><br><span class="line">           </span><br><span class="line">            //检查是否为文件类型</span><br><span class="line">            BOOL isFile = NO;</span><br><span class="line">            <span class="keyword">for</span> (NSString * key <span class="keyword">in</span> requestParams.allKeys)</span><br><span class="line">            &#123;</span><br><span class="line">                id value = requestParams[key];</span><br><span class="line">                //判断请求参数是否是文件数据</span><br><span class="line">                <span class="keyword">if</span> ([value isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">                    </span><br><span class="line">                    isFile = YES;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(isFile)</span><br><span class="line">            &#123;</span><br><span class="line">                //上传文件</span><br><span class="line">                [manager POST:[self getRequestDomain]  parameters:requestParams constructingBodyWithBlock:^(id formData) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (NSString *key <span class="keyword">in</span> requestParams) &#123;</span><br><span class="line">                        id value = requestParams[key];</span><br><span class="line">                        <span class="keyword">if</span> ([value isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">                            [formData appendPartWithFileData:value  name:key fileName:key  mimeType:@<span class="string">"image/jpeg"</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class="line">                    </span><br><span class="line">                    [self onSuccess:responseObject];</span><br><span class="line">                    </span><br><span class="line">                &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class="line">                    </span><br><span class="line">                    [self onError:error];</span><br><span class="line">                    </span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(NSString *) getRequestDomain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> @<span class="string">"https://www.lvjinku.com/Home/Router/doRoute"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) onSuccess:(id)result</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        BaseResponse *response =  [[BaseResponse alloc] initWithData:result];</span><br><span class="line">        response.requestAPICode = self.requestApiCode;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (response.error == 0) &#123;</span><br><span class="line">            </span><br><span class="line">            NSLog(@<span class="string">"reqest finished:%@"</span>,result);</span><br><span class="line">            //解析，将responseObject设置成model对象</span><br><span class="line">            [self parseResponse:response];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (_delegate &amp;&amp; [_delegate conformsToProtocol:@protocol(DataServiceDelegate)] &amp;&amp; [_delegate respondsToSelector:@selector(onRequestSuccess:)]) &#123;</span><br><span class="line">                [_delegate onRequestSuccess:response];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_delegate &amp;&amp; [_delegate conformsToProtocol:@protocol(DataServiceDelegate)] &amp;&amp; [_delegate respondsToSelector:@selector(onRequestStatusError:)]) &#123;</span><br><span class="line">                </span><br><span class="line">                [_delegate onRequestStatusError:response];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) onError:(NSError *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_delegate &amp;&amp; [_delegate conformsToProtocol:@protocol(DataServiceDelegate)] &amp;&amp; [_delegate respondsToSelector:@selector(onRequestError:)]) &#123;</span><br><span class="line">        [_delegate onRequestError:error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//配置请求参数 xml的值</span><br><span class="line">-(NSString *) acquireBaseRequestParamDictionary</span><br><span class="line">&#123;</span><br><span class="line">    [self setRequestParams:self.requestParams];</span><br><span class="line">    </span><br><span class="line">    //json字符串</span><br><span class="line">    NSMutableDictionary *baseRequestDictionary = [NSMutableDictionary dictionary];</span><br><span class="line">    [baseRequestDictionary setObject:LvJinKuAgency forKey:@<span class="string">"agency"</span>];</span><br><span class="line">    [baseRequestDictionary setObject:LvJinKuSecurity forKey:@<span class="string">"security"</span>];</span><br><span class="line">    [baseRequestDictionary setObject:[self getAPIRequestMethodName] forKey:@<span class="string">"serviceCode"</span>];</span><br><span class="line">    [baseRequestDictionary setObject:self.requestParams forKey:@<span class="string">"params"</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    NSString *requestParamJsonStr = [self.requestParams JSONString];</span><br><span class="line">    NSString *tokenIdStr = [NSString stringWithFormat:@<span class="string">"%@%@%@%@"</span>,LvJinKuAgency,LvJinKuSecurity,[self getAPIRequestMethodName],requestParamJsonStr];</span><br><span class="line">    NSString *tokenId = [tokenIdStr MD5Code];</span><br><span class="line">    [baseRequestDictionary setObject:tokenId forKey:@<span class="string">"tokenid"</span>]; //md5加密</span><br><span class="line">    </span><br><span class="line">    NSString *baseRequestParamJsonStr = [baseRequestDictionary JSONString];</span><br><span class="line">    <span class="built_in">return</span> baseRequestParamJsonStr;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  获取请求api的具体接口方法名</span><br><span class="line"> *</span><br><span class="line"> *  @<span class="built_in">return</span> &lt;<span class="comment">#return value description#&gt;</span></span><br><span class="line"> */</span><br><span class="line">-(NSString *) getAPIRequestMethodName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> @<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  解析response 字段</span><br><span class="line"> *</span><br><span class="line"> *  @param response &lt;<span class="comment">#response description#&gt;</span></span><br><span class="line"> */</span><br><span class="line">-(void) parseResponse:(BaseResponse *)response</span><br><span class="line">&#123;</span><br><span class="line">     //子类覆盖该方法进行解析</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>【后面我将会结合Http请求封装解耦 写一个系列关于HTTP请求自定义封装的解析，结合AFN封装，JSON解析，下拉刷新，分页】</p><h3 id="AFNetWorking-h-文件代码"><a href="#AFNetWorking-h-文件代码" class="headerlink" title="AFNetWorking.h 文件代码"></a>AFNetWorking.h 文件代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;Foundation/Foundation.h&gt;</span></span><br><span class="line"><span class="comment">#import &lt;Availability.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ifndef _AFNETWORKING_</span></span><br><span class="line">    <span class="comment">#define _AFNETWORKING_</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#import "AFURLRequestSerialization.h"</span></span><br><span class="line">    <span class="comment">#import "AFURLResponseSerialization.h"</span></span><br><span class="line">    <span class="comment">#import "AFSecurityPolicy.h"</span></span><br><span class="line">    <span class="comment">#import "AFNetworkReachabilityManager.h"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#import "AFURLConnectionOperation.h"</span></span><br><span class="line">    <span class="comment">#import "AFHTTPRequestOperation.h"</span></span><br><span class="line">    <span class="comment">#import "AFHTTPRequestOperationManager.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if ( ( defined(__MAC_OS_X_VERSION_MAX_ALLOWED) &amp;&amp; __MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1090) || \</span></span><br><span class="line">      ( defined(__IPHONE_OS_VERSION_MAX_ALLOWED) &amp;&amp; __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 70000 ) )</span><br><span class="line">    <span class="comment">#import "AFURLSessionManager.h"</span></span><br><span class="line">    <span class="comment">#import "AFHTTPSessionManager.h"</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#endif /* _AFNETWORKING_ */</span></span><br></pre></td></tr></table></figure><h3 id="一、综述"><a href="#一、综述" class="headerlink" title="一、综述"></a>一、综述</h3><p>#类库的头文件AFNetworking.h引入了下面的所有类库，并可以根据不同的系统使用不同的实现方式。</p><h5 id="1、AFURLConnectionOperation"><a href="#1、AFURLConnectionOperation" class="headerlink" title="1、AFURLConnectionOperation"></a>1、AFURLConnectionOperation</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AFURLConnectionOperation.h 文件 </span><br><span class="line">@interface AFURLConnectionOperation : NSOperation &lt;NSURLConnectionDelegate, NSURLConnectionDataDelegate, NSSecureCoding, NSCopying&gt;</span><br></pre></td></tr></table></figure><p>AFN最基础的类继承自NSOperation类，将网络请求依附到一个operation上。从而让我们能够有效的控制并观察一个网络请求的创建、进行、取消、完成、暂停恢复<br>、异常等问题及状态。</p><h5 id="2、AFHTTPRequestOperation"><a href="#2、AFHTTPRequestOperation" class="headerlink" title="2、AFHTTPRequestOperation"></a>2、AFHTTPRequestOperation</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AFHTTPRequestOperation.h 文件 </span><br><span class="line">/**</span><br><span class="line">`AFHTTPRequestOperation` is a subclass of `AFURLConnectionOperation` <span class="keyword">for</span> requests using the HTTP or HTTPS protocols. It encapsulates the concept of acceptable status codes and content types, <span class="built_in">which</span> determine the success or failure of a request.</span><br><span class="line">*/</span><br><span class="line">@interface AFHTTPRequestOperation : AFURLConnectionOperation</span><br></pre></td></tr></table></figure><p>HTTP或HTTPS协议请求的AFURLConnectionOperation的子类。它封装的可接受状态码和内容的类型，判定一个请求结果是成功或失败。实际上对系统的HTTP网络请求增加了几个HTTP需要用到的参数。</p><h5 id="3、AFHTTPRequestOperationManager"><a href="#3、AFHTTPRequestOperationManager" class="headerlink" title="3、AFHTTPRequestOperationManager"></a>3、AFHTTPRequestOperationManager</h5><p>这个类是AFN类库的核心类。它封装完成了一种通用的模式，可以帮助我们轻松友好的完成请求的创建、响应的系列化，网络状态的监控以及安全策略以及每一个请求operation的管理（operation的相互依赖或状态改变）。</p><h5 id="4、AFURLSessionManager"><a href="#4、AFURLSessionManager" class="headerlink" title="4、AFURLSessionManager"></a>4、AFURLSessionManager</h5><p>iOS7之后，苹果增加了新的网络请求类–NSURLSession。<br>AFN官方推荐iOS 7 或者 Mac OS X 10.9以上的，最好使用该类发起网络请求，取代AFHTTPRequestOperationManager。基于目前国内app大都最低适配的iOS6，该类的用途还不是太广泛。</p><h5 id="5、AFNetworkReachabilityManager"><a href="#5、AFNetworkReachabilityManager" class="headerlink" title="5、AFNetworkReachabilityManager"></a>5、AFNetworkReachabilityManager</h5><p>网络的连通状态监控以及网络的类型。实际是将苹果官方提供的Reachability的类名和通知名更换了一下，防止和系统提供的类的通知名以及类名的冲突。</p><h5 id="6、AFURLRequestSerialization"><a href="#6、AFURLRequestSerialization" class="headerlink" title="6、AFURLRequestSerialization"></a>6、AFURLRequestSerialization</h5><p>1：符合这个协议的对象用于处理请求，它将请求参数转换为 query string 或是 entity body 的形式，并设置必要的 header。<br>2：构建multipart请求。</p><h5 id="7、AFURLResponseSerialization"><a href="#7、AFURLResponseSerialization" class="headerlink" title="7、AFURLResponseSerialization"></a>7、AFURLResponseSerialization</h5><p>遵循AFURLResponseSerialization协议的对象，用于验证、序列化响应及相关数据，转换为有用的形式，比如 JSON 对象、图像、甚至基于mantle的模型对象。</p><h5 id="8、AFSecurityPolicy"><a href="#8、AFSecurityPolicy" class="headerlink" title="8、AFSecurityPolicy"></a>8、AFSecurityPolicy</h5><p>基于HTTPS 配置一些请求证书相关的安全策略。<br>讲到AFSecurityPolicy ，有必要先了解一下HTTPS.<br>HTTPS 连接建立过程大致是，客户端和服务端建立一个连接，服务端返回一个证书，客户端里存有各个受信任的证书机构根证书，用这些根证书对服务端 返回的证书进行验证，经验证如果证书是可信任的，就生成一个pre-master  secret，用这个证书的公钥加密后发送给服务端，服务端用私钥解密后得到pre-master secret，再根据某种算法生成master  secret，客户端也同样根据这种算法从pre-master secret生成master secret，随后双方的通信都用这个master  secret对传输数据进行加密解密。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager]; </span><br><span class="line"></span><br><span class="line">AFSecurityPolicy *securityPolicy = [[AFSecurityPolicy alloc] init]; </span><br><span class="line">[securityPolicy setAllowInvalidCertificates:NO]; </span><br><span class="line">[securityPolicy setSSLPinningMode:AFSSLPinningModeCertificate]; </span><br><span class="line">[securityPolicy setValidatesDomainName:YES];</span><br><span class="line">[securityPolicy setValidatesCertificateChain:NO]; </span><br><span class="line"></span><br><span class="line">manager.securityPolicy = securityPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">## SSL Pinning Modes</span></span><br><span class="line"></span><br><span class="line"> The following constants are provided by `AFSSLPinningMode` as possible SSL pinning modes.</span><br><span class="line"></span><br><span class="line"> enum &#123;</span><br><span class="line"> AFSSLPinningModeNone,</span><br><span class="line"> AFSSLPinningModePublicKey,</span><br><span class="line"> AFSSLPinningModeCertificate,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>AFSSLPinningModeNone: 代表客户端无条件地信任服务器端返回的证书。<br>AFSSLPinningModePublicKey: 代表客户端会将服务器端返回的证书与本地保存的证书中，PublicKey的部分进行校验；如果正确，才继续进行。<br>AFSSLPinningModeCertificate: 代表客户端会将服务器端返回的证书和本地保存的证书中的所有内容，包括PublicKey和证书部分，全部进行校验；如果正确，才继续进行。<br>AFSecurityPolicy相关更多知识可以了解这篇文章 <a href="http://www.jianshu.com/p/4102b817ff2f" target="_blank" rel="noopener">AFSecurityPolicy</a></p><h3 id="AFURLConnectionOperation-实现分析"><a href="#AFURLConnectionOperation-实现分析" class="headerlink" title="AFURLConnectionOperation 实现分析"></a>AFURLConnectionOperation 实现分析</h3><p>1、综述<br>AFURLConnectionOperation将Operation和URLConnection结合到一起，利用operation可以监听到状态以及可以建立相互之间的依赖关系的特性，实现了对于一个NSURLConnection对象的完美控制，并将请求的结果通过block友好的返回。</p><p>2、实现文件.m<br>我们总结下.m中这个类主要有哪些方法。</p><p>1）：首先我们可以看到它创建了一个单例线程。这个线程将会常驻内存，用来处理AFN发起的所有请求任务。当然，线程也跟随着一个runloop，AFN将这个runloop的模式设置为NSDefaultRunLoopMode。NSDefaultRunLoopMode是无法检测到connection的状态的。这说明了，AFN将不会在这该线程处理connection完成后的UI刷新等工作，而是会将数据抛给主线程，让主线程去完成UI的刷新。<br>2）：我们可以看到该类通过接受请求的字符串，创建了URLRequest以及NSURLConnection对象。从而去进行请求。<br>3）：实现文件多次使用到了锁，可以保证数据的安全。当然他也实现了几个数据的NSCoping协议。<br>4）：请求的创建、进行、取消、完成、暂停恢复、异常等问题及状态的控制。这里讲一下暂停和恢复。暂停实际上将网络请求取消掉了。但是由于实现了nscoping协议，已经下载到数据得以保存下来。下次进行相同请求的时候，我们会将已经下载到的数据的节点一起发送给服务器，告诉服务器这些部门的数据我们不需要了，服务器根据我发送的返回节点给我返回相应的数据即可。从而实现了暂停和恢复功能，也就是断点续传。<br>5）：operation方法的重写。<br>6）：状态的各种控制方法的实现以及发送状态改变的通知</p><p>3、接口文件.h<br>接口文档中的属性方法，基本可以概括为以下几个方法</p><p>1）：只读的数据，让管理者可以接收到。<br>2）：设置runloop的modes。不再使用类库默认设置的defaultmodes。<br>3）：状态的控制方法<br>4）：安全策略的设置总而言之，接口文件.h暴露的接口都是为了让manager可以去完全控制这个operation以及其中的网络请求。</p><h3 id="AFHTTPRequestOperationManger"><a href="#AFHTTPRequestOperationManger" class="headerlink" title="AFHTTPRequestOperationManger"></a>AFHTTPRequestOperationManger</h3><p>2.0后，AFN将一些设置提取出来，线程了专门的类【AFSecurityPolicy、AFURLRequestSerialization、AFURLResponseSerialization】。现在看来，AFN整体的设计是非常完美的。耦合性变得非常低，一些1.0版本中存在的问题也得到了改善。</p><p>1、实现文件.m<br>实现文件较为简单，可以看到他创建了一个队列。并将各个operation加入到队列中。在队列中，各个请求就可以设置依赖关系，并发的数量等等。</p><p>2、接口文件.h<br>接口文件中，我们可以看到。这个类可以设置AFSecurityPolicy、AFURLRequestSerialization、AFURLResponseSerialization 等参数了。这就是综述所说的降低耦合性的方式。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2015年总结</title>
      <link href="/2016/02/03/2015_Overview/"/>
      <url>/2016/02/03/2015_Overview/</url>
      
        <content type="html"><![CDATA[<p>今天是2016年 2月 3号了，写这篇博文的时候，手脚冰冷冰冷的。回想起走过的2015年，虽然不是很顺利，好几次遇到困难都是在零界点快要放弃了，自己的最后坚持又让我重新看到希望。当然，我一直坚信答案是在最后才能得到。我的生活，思想 都在变化着。但我一直坚信所经历的一切都对的，虽然有时候回头想了一些事情的决定后，偶尔会有些遗憾，但我一直在跟着心走，想清楚了，决定了，就去做。用心去自己喜欢做得事，把更多的时间和精力花在上面我反而觉得更有意义。<br><a id="more"></a></p><h3 id="工作缩影"><a href="#工作缩影" class="headerlink" title="工作缩影"></a>工作缩影</h3><p>前8个月，我在一家社交公司担任ios开发一职。每周6天班，每天10点到晚上10点。当然我不是说工作时间很长，正真工作的时间也才5到6个多小时。这样长期下去，一：身体透支。 二：工作效率降低。三：生活上大部分时间被占用，有些事情处理得不是很好。 我喜欢工作和生活安排都适当的节奏。企业文化问题也无法一下子提建议就改变的。9月后入职一家P2P公司，负责IOS以及的开发。开发完后，老板一直没有上线的意思。工作2个月后，公司发展战略遇到瓶颈，15年很多P2P的公司跑路，发展得不是很好。后面公司转移方向做P2P的信息平台了。后面惨的就是员工了，本身公司很小，员工没几个。但都被降工资了。到1月19号，我也离职走了。</p><h3 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h3><p>上半年过得特别充实，上班下班。租室 ，公司 。两点一线，每天这样，都沉浸在代码中。那段日子，师傅也比较喜欢我。积极向上，能够快速完成师傅分配的任务，和同事他们关系很融洽，玩得很好。也很有话题，每天中午服务器，android ,ios都是一些搞技术的人 一起去吃饭。聊聊技术，开开玩笑，哈。那段时间最开心了。自己也成长最快。工作快半年的样子，我就请了一趟假去杭州玩。因为伯伯在那边，去看看西湖，钱塘江。那段时间很美好，很怀念，很放松。短短的玩一星期。然后6月1号就坐飞机回来了。</p><h3 id="波折的六月"><a href="#波折的六月" class="headerlink" title="波折的六月"></a>波折的六月</h3><p>六月，那个月我生病了。花了8千块钱治疗。接着家里又出现一些事情，所以工作一直没有很专心。接着公司也来了一个新妹子，平静的生活一下子被打破了。后来遇到了那表述不清却很渴望的神圣东西名曰爱情。接着第七个月，很大一部分心思都没有认真花在工作上。每天都会开小差，然后趁她不注意多看她几眼。那段时间，写程序总是粗心，bug .  还有一个bug没解决 . 接着，随着相处。8月份我们就再一起了，后来七夕我送玫瑰给她了。但是半个月后，因为一个小误会，又让我沉浸在难过当中。接下来的一星期，异常难过。后来双方冷战。看到她难过，家里琐事重重，工作作息等不协调，也确实累了。当时冲动就离职了。。</p><h3 id="关于爱情的想法"><a href="#关于爱情的想法" class="headerlink" title="关于爱情的想法"></a>关于爱情的想法</h3><p>爱情是双方的，有时候可能会吵架，但这也许就是小插曲吧。中间会出现很多磨合，正是因为这些，才让对方和自己变得慢慢理性成熟起来，只有相互地宽容对方，理解对方，才能更长久地走下去。燕儿，我爱你。</p><h3 id="新的一年前做得事情"><a href="#新的一年前做得事情" class="headerlink" title="新的一年前做得事情"></a>新的一年前做得事情</h3><p>虽然这一年曲折多变，但也让我成长不少。新的一年2016年一月，我为自己做了这些事情，1.20号离职了。21号到31号这十天：<br>1、搭建了一个个人博客网站。<br>2、模仿一个app做了一个Android版demo.(所有UI以及动效) 后期等完善服务器后台接口调通后，我会发博文剖析整个架构。<br>3、坚持每天傍晚去跑3圈。从第一天的11分06秒 到 第九天的 9分 06 秒。<br>4、准备好了年后的计划，以及要去做的事情。创业走起。相信生活会越来越好。</p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/red_flower.jpg" alt="flower2"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手撕机-拆笔记本了解结构</title>
      <link href="/2016/01/24/openTheNotebook/"/>
      <url>/2016/01/24/openTheNotebook/</url>
      
        <content type="html"><![CDATA[<h3 id="这几天"><a href="#这几天" class="headerlink" title="这几天"></a>这几天</h3><p>今天广州的天气好冷，最低气温0度。离职后有几天了，在家里写代码，傍晚的时候就去跑步。今天是周末，就稍微休息了下。前几天刚好把博客搭建起来了，今天就跟大家大概讲一下笔记本的主板结构。以下图为仅今天动手拆卸后所拍。（注：亲，请勿冲动拆卸笔记本。）</p><h3 id="主板拍摄图"><a href="#主板拍摄图" class="headerlink" title="主板拍摄图"></a>主板拍摄图</h3><h5 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h5><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/notebook_boot.jpg" alt=""></p><a id="more"></a><h5 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h5><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/notebook_cpu.jpg" alt=""></p><h5 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h5><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/notebook_memery.jpg" alt=""></p><h5 id="主板正面"><a href="#主板正面" class="headerlink" title="主板正面"></a>主板正面</h5><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/notebook_boot1.jpg" alt=""></p><h5 id="主板背面"><a href="#主板背面" class="headerlink" title="主板背面"></a>主板背面</h5><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/notebook_boot2.jpg" alt=""></p><p>技术从来就不是因为难而让我们停止，只有动手尝试，去做就对了。欢迎大家有关笔记本插解方面有关的讨论和反馈。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建GithubPage 个人博客</title>
      <link href="/2016/01/22/hexoGithubPageBlog/"/>
      <url>/2016/01/22/hexoGithubPageBlog/</url>
      
        <content type="html"><![CDATA[<p>程序员都喜欢折腾，我也不列外。当然，用hexo 建博客也是当时碰巧在网上看到别人的博客，用来写技术，生活，读书，以及不一样的心情。<br>当时我也很是好奇这样的博客是用什么搭建的。看到博尾有一行小字“Powered by Hexo.”, 于是，开始了自己的不断折腾。因为这段时间离职了，刚好也有空闲下来去做自己喜欢的事情。<br>接下来，我大概按照我的思路记下来我搭建hexo的步骤。<br><a id="more"></a></p><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/avatar.jpg" alt="sea"></p><h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1) 在 Windows 环境下安装 Node.js 非常简单.到此处下载 [下载node.js](http://nodejs.org/)</span><br></pre></td></tr></table></figure><h3 id="下载-Git稳定版"><a href="#下载-Git稳定版" class="headerlink" title="下载 Git稳定版"></a>下载 Git稳定版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于git官网下载 可能比较缓慢，可通过其他途径如csdn下载。我下载的git版本是 2.6.2.windows.1</span><br></pre></td></tr></table></figure><h3 id="配置Git-SSH-key。本地与github服务器链接。"><a href="#配置Git-SSH-key。本地与github服务器链接。" class="headerlink" title="配置Git SSH key。本地与github服务器链接。"></a>配置Git SSH key。本地与github服务器链接。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)打开本地C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。</span><br><span class="line">如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</span><br><span class="line">2)登陆github系统。点击右上角的 Account Settings---&gt;SSH Public keys ---&gt; add another public keys</span><br><span class="line">3)把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</span><br><span class="line">4)测试是否配置成功  $ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="http://qyanblog.oss-cn-shenzhen.aliyuncs.com/config_sshKey_success.png" alt=""></p><h3 id="下载并安装-Hexo"><a href="#下载并安装-Hexo" class="headerlink" title="下载并安装 Hexo"></a>下载并安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1) 在任意位置打开 git bash .</span><br><span class="line">2) 运行以下命令 $ npm install -g hexo</span><br><span class="line">3) 下载完成后，在你喜欢的位置 如D:/hexo 下打开git bash 运行 hexo init  这个命令的意思是 Hexo 即会自动在目标</span><br><span class="line">文件夹建立网站所需要的所有文件</span><br><span class="line">4) 安装hexo 相关的依赖包 npm install</span><br><span class="line">5) 运行hexo g 编译静态文件 ，然后再hexo s 启动本地服务。检查安装是否成功 在浏览器地址输入 localhost:4000</span><br></pre></td></tr></table></figure><h3 id="hexo-config的基本配置"><a href="#hexo-config的基本配置" class="headerlink" title="hexo config的基本配置"></a>hexo config的基本配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在hexo的根目录下配置 _config.yml 文件。</span><br></pre></td></tr></table></figure><h3 id="下载并使用其他主题，主题的配置"><a href="#下载并使用其他主题，主题的配置" class="headerlink" title="下载并使用其他主题，主题的配置"></a>下载并使用其他主题，主题的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) 我使用的是next主题。进入你的hexo文件夹下，下载可以使用</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">2) 下载安装，主题设置可参考 [Next主题](http://theme-next.iissnan.com/five-minutes-setup.html)</span><br></pre></td></tr></table></figure><h3 id="hexo-的使用，以及部署到你的github库"><a href="#hexo-的使用，以及部署到你的github库" class="headerlink" title="hexo 的使用，以及部署到你的github库"></a>hexo 的使用，以及部署到你的github库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在hexo 根目录 _config.yml 文件配置</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/gaoyingqiu/gaoyingqiu.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="hexo搭建遇到的相关问题解决办法"><a href="#hexo搭建遇到的相关问题解决办法" class="headerlink" title="hexo搭建遇到的相关问题解决办法"></a>hexo搭建遇到的相关问题解决办法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关于 hexo d 出现 ERROR Deployer not found : github 如何解决？</span></span><br><span class="line">1) deploy的<span class="built_in">type</span>改成git，然后运行下npm install hexo-deployer-git --save</span><br><span class="line">2) 继续运行 hexo g  然后再hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment"># *** Please tell me who you are.</span></span><br><span class="line">Run git config --global user.email <span class="string">"you@example.com"</span>  git config --global user.name <span class="string">"Your Name"</span> 如何解决？</span><br><span class="line">1) 根据此错误可知，部署到github 库需要 输入邮箱和你的github的用户名。所以根据提示，运行相应的命令即可，再次部署一次。hexo d.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置favicon。</span></span><br><span class="line">1)把favicon.icon图标拷贝到hexo 根目录的<span class="built_in">source</span>文件夹下即可，如果这个时候没网页icon不显示可更改主题文件配置中的favicon属性 。</span><br><span class="line">把favicon.icon拷贝到images文件夹下。favicon的配置如  favicon: /images/favicon.icon</span><br><span class="line"></span><br><span class="line"><span class="comment">#hexo 部署到github时候，怎样解决频繁地输入用户名 和密码？</span></span><br><span class="line">1) 在系统属性环境变量处 添加用户环境变量。变量名：HOME 变量值： %USERPROFILE%</span><br><span class="line">2) 在 C:\Users\Administrator 添加一个名为 “_netrc” 的文件，无后缀。在里面设置</span><br><span class="line">   machine github.com  </span><br><span class="line">   login 你的github用户名</span><br><span class="line">   password 你的github登录密码</span><br></pre></td></tr></table></figure><p><a href="http://zipperary.com/2013/05/27/domain-name-and-dns/" target="_blank" rel="noopener">购买域名，DNS解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
